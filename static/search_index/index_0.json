{"/hardware/zh/tang/index.html": {"title": "Tang 系列开发板", "content": "---\ntitle: Tang 系列开发板\n---\n\nTang 系列开发板主要分为 Tang Nano 和 Tang Primer 两个系列。\n\n## 当前产品\n\n### 外观总览\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tang Primer 20K（核心板）</th>\n<th style=\"text-align:center\">Tang Nano 1K</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"./tang-primer-20k/primer-20k.html\"><img src=\"./../../assets/Tang/primer_20k/primer_20k.png\" alt=\"Tang Primer 20K（核心板）\"></a></td>\n<td style=\"text-align:center\"><a href=\"./Tang-Nano-1K/Nano-1k.html\"><img src=\"./../../assets/Tang/Nano-1K/1K.png\" alt=\"Tang Nano 1K\"></a></td>\n</tr>\n</tbody>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tang Nano 4K</th>\n<th style=\"text-align:center\">Tang Nano 9K</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"./Tang-Nano-4K/Nano-4K.html\"><img src=\"./../../assets/Tang/Nano_4K/Nano_4K.png\" alt=\"Tang Nano 4K\"></a></td>\n<td style=\"text-align:center\"><a href=\"./Tang-Nano-9K/Nano-9K.html\"><img src=\"./../../assets/Tang/Nano-9K/9K.png\" alt=\"Tang Nano 9K\"></a></td>\n</tr>\n</tbody>\n</table>\n\n### 主要参数对比\n\n| 条目            |<p style=\"white-space:nowrap\">Tang Primer 20K</p>| <p style=\"white-space:nowrap\">Tang Nano 9K</p>|<p style=\"white-space:nowrap\">Tang Nano 4K</p>|<p style=\"white-space:nowrap\">Tang Nano 1K</p>|\n| :-------------- | :---------------- | :---------------- | :---------------- | ------------ |\n| 逻辑单元(LUT4)  | 20736             | 8640              | 4608              | 1152         |\n| 寄存器（FF）    | 15552             | 6480              | 3456              | 864          |\n| S-SRAM (bits)   | 41472             | 17280             |                   |              |\n| B-SRAM (bits)   | 828K x 46         | 468K x 26         | 180K x 10         | 72K x 4      |\n| 用户闪存 (bits) |                   | 608K              | 256K              | 96K          |\n| 锁相环 (PLL)    | 4                 | 2                 | 2                 | 1            |\n| 板载 Flash      | 32Mbits NOR Flash | 32Mbits NOR Flash | 32Mbits NOR Flash | 预留焊盘     |\n| 硬核处理器      |                   |                   | Cortex-M3         |              | |\n\n## 售罄产品\n\n|                                  Tang Nano                                  |                                         Tang Primer                                          |\n| :-------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------: |\n| [![Tang Nano](./../../assets/Tang/Nano/Tang_Nano.jpg)](./Tang-Nano/Nano.html) | [![Tang Primer](./../../assets/Tang/permier/Tang_permier.jpg)](./Tang-primer/Tang-primer.html) |"}, "/hardware/zh/tang/Tang-Nano/Tang-nano.html": {"title": "Tang nano 一些例程", "content": "---\ntitle: Tang nano 一些例程\n---\n\n对于Programmer(下载程序)建议使用 https://dl.sipeed.com/shareURL/TANG/programmer 里面的文件。\n下载后解压替换掉Gowin对应安装目录的Programmer文件夹即可。\n不会替换的话可以在下载解压后的Programmer程序中手动添加对应下载文件来进行烧录。\n\n\n## 例程\n- [点灯例程](./examples/1_led.html)\n- [驱屏教程](./examples/2_lcd.html)"}, "/hardware/zh/tang/Tang-Nano/examples/led/github_sourcecode.html": {"title": "使用github例程", "content": "# 使用github例程\n\n- 首先获得仓库文件 https://github.com/sipeed/Tang-Nano-examples\n\n- 打开 Tang-Nano-examples\\example_led\\led_prj 目录下的 led_prj.gprj 文件\n\n- 在process界面右键选择 clean&Rerun all\n    ![](./assets/github_place&route.png)\n    \n- 紧接着会报错（这是历史问题，有兴趣可以自己查查）。\n  顶部菜单栏 Project -> Configuration -> Syntheize 选择 GowinSyntheize 后点击**确定**，然后重新在 Place&Route 右键 clean&Rerun all\n   ![](./assets/Change_Synthesis.png)\n  \n- 然后是进行连接板子，烧录固件。在Process界面双击`Program Device` 后打开烧录工具\n   ![](./assets/Open_Programmer.png)\n   \n- 接下来选择sram烧录即可验证程序。\n    ![](./assets/Success_led.png)\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano/examples/led/self_create.html": {"title": "自己点灯", "content": "# 自己点灯\n\n## 新建项目\n\n新建工程：File-->NEW-->FPGA Design Project-->OK\n    ![](./../../assets/LED-1.png)\n\n弹出的选项框选择存储路径和工程名称（路径和文件名称要求是英文路径）\n    ![](./../../assets/LED-2.png)\n\n选择对应的型号：\n    ![Tang_nano_1k_device_choose](./assets/Nano_device_choose.png)\n    \n## 编写代码\n\n新建好工程之后接下来进行代码编辑，在Design工作栏内新建“Verilog File”,如下图所示：\n    ![](./../../assets/LED-5.png)\n    \n为文件命名（要求写英文名，不然后续综合很容易报错）； \n   一般来说对于verolog文件建议文件名称与文件module名称应当相同\n    ![](./../../assets/LED-6.png)\n\n双击新建的 .v 文件，可以在右侧的编辑框中编写代码。\n    ![](./../../assets/LED-7.png)\n\n\n### Verilog 预备知识\n\n这里只介绍接下来会用到的相关语法，更多的可以参考 《Verilog 数字系统设计教程》\n\nVerilog 的基本设计单元是模块，一个模块是由两部分组成的，一部分描述接口，另一部分描述逻辑功能，即描述输出和输入的关系的。\n\n模块就像我们平时提到的黑匣子，当我们实现了模块后，就不需要去关心模块内部，只需要根据模块定义的输入输出格式，将模块实例化，给模块提供输入，就可以让模块自己工作了\n\n一个模块长成这样\n\n```v\nmodule module_name \n#(parameter)\n(port) ;\n    Function description;\nendmodule\n```\n\n模块整体结构由 module 和 endmodule 组成，module 后面跟着的是模块的名称，可传递变量参数，接口的定义，声明了端口的方向\n\n模块内部有时候会使用内部的信号，内部信号有 wire 和 reg 类型\n\n功能的定义可以通过 assign 和 always 块完成。 assign 是描述组合逻辑最常用的方法之一； always 可用于描述组合逻辑，也可描述时序逻辑\n\n### 示例代码\n\n以流水灯为例；将下方的代码粘贴到自己的文件中，也可以自己编写代码。\n\n```verilog\nmodule led (\n    input sys_clk,\n    input sys_rst_n,\n    output reg [2:0] led // 110 B, 101 R, 011 G\n);\n\nreg [23:0] counter;\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1199_9999)       // 0.5s delay\n        counter <= counter + 1'b1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 3'b110;\n    else if (counter == 24'd1199_9999)       // 0.5s delay\n        led[2:0] <= {led[1:0],led[2]};\n    else\n        led <= led;\nend\n\nendmodule\n\n ```\n\n## 综合、约束、布局布线\n\n### 综合\n\n保存编辑的代码后转到“Process”界面下，对编辑好的代码进行综合，即双击“Synthesize”\n    ![](./../../../Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\n运行之后如没有报错而且 Synthesize 变成下图里的图标\n    ![](./../../../Tang-Nano/assets/LED.png) \n\n说明前面编辑的代码无误；如果有错，根据错误提示进行改正即可。        \n\n### 约束\n\n- 此处未涉及时钟约束\n\n想让 Fpga 实现代码的功能，必须将代码中涉及的 端口 绑定到 Fpga 实际的引脚上。\n\n如下图，在左边的工作区点击 process，然后双击 FloorPlanner\n\n![](./../../../assets/examples/led_pjt_2.png)\n\n接下来通过 双击 Process 界面里的FloorPlanner来设置管脚约束。第一次打开会弹出缺少.cst文件.选择“OK”即可；\n    ![](./../../assets/LED-9.pngassets/LED-9.png)\n\nnano 的 rgb led电路图如下所示\n    ![](./assets/nano_led_pins.png \"nano rgb pins\")\n\n整个项目需要约束的引脚如下\n\n| port      | I/O    | pin | desc       |\n| --------- | ------ | --- | ---------- |\n| sys_clk   | input  | 35  | 时钟输入脚  |\n| sys_rst_n | input  | 15  | 系统复位脚  |\n| led[0]    | output | 16  | 绿灯       |\n| led[1]    | output | 17  | 蓝灯       |\n| led[2]    | output | 18  | 红灯       |\n\n对于交互式管脚约束有下图中的两种方法\n- 将对应的端口拖拽到芯片引脚上\n- 在IO约束中输入端口对应的引脚编号\n\n在打开的界面中按照序号的顺序来进行相应的操作（两种方式选择一种即可）\n![](./assets/pin_constrain_1.png)\n![](./assets/pin_constrain_2.png)\n\n- 直接编写约束文件方法用户自行研究\n\n关于 FloorPlanner 更多的相关说明，可以参考 [SUG935-1.3_Gowin设计物理约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG935-1.3_Gowin%E8%AE%BE%E8%AE%A1%E7%89%A9%E7%90%86%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)。里面的内容都很有用\n\n### 布局布线\n\n到“Process”下运行“Place&Route”，即运行管脚布局布线，运行结果如下图所示：\n    ![](./assets/RGB_LED_Place&Route.png)\n    \n## 烧录\n\n接下来是连接板子，烧录固件。在Process界面双击 `Program Device` 后打开烧录工具\n    ![](./assets/Open_Programmer.png)\n\n可以在图中进行相应的修改\n    ![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/tang-nano-programmer-config.png)\n\n接下来选择sram烧录即可验证程序。\n    ![](./assets/Success_led.png)\n    \n点灯验证到此结束。\n\n## 结语\n\n有问题的话可以在下方留言。\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano/examples/2_lcd.html": {"title": "RGB LCD 示例", "content": "# RGB LCD 示例\n\n> 编辑于2022.04.12\n\n## 先介绍时序\n\nRGB LCD 显示协议和 VGA 类似，通信都有专用的行同步、场同步信号线。它们的主要区别是前者传输用的是数字信号，后者传输走的是模拟信号。\n\n下面就介绍 VGA 的时序\n\n![](./../../assets/examples/lcd_pjt_1.png)\n\n上图分别是 VGA 在数据传输中的行同步、场同步时序\n\n从时序图中可以看出，不论是显示一行数据还是一列数据，都需要一个对应的同步(sync)信号，数据的传输在两个同步信号的脉冲之间完成\n\n每一行的数据包括显示前沿(back porch)、有效数据(active video)、显示后沿(front porch)三个阶段\n\n其中的有效数据就是我们常说的分辨率，而显示前后沿的参数需要参考具体的分辨率与帧数进行设置，相关参数可以参考典型参数，链接在此： http://www.tinyvga.com/vga-timing\n\n这块5寸屏幕的控制时序略有不同，相关参数的设置可以查看[规格书](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet/5.0inch_LCD_Datashet%20RGB.pdf)\n\n其他尺寸的屏幕相关规格书均可以在这里下载 [点我](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet)\n\n下面为这块 LCD 时序相关的截图\n\n![](./../../assets/examples/lcd_pjt_2.png)\n\n![](./../../assets/examples/lcd_pjt_3.png)\n\n上面一张图是时序中的参数表，下面的图是时序图\n\n从时序图中看出，这块屏幕可以不用设置前后沿，可以只设置消影(blanking)时间，通过实际的程序证明，两种方式都是可以的\n\n## 新建工程\n\n新建工程方法参考[自建点灯文章(点我)](./led/self_create.html)\n\n\n## 生成屏幕时钟\n\n- 这里需要用到高云半导体官方的IP核\n\n板载的晶振时钟为 24MHz ，但是我们的屏幕要求 33.3MHZ 的时钟，所以我们需要使用对应的ip核来生成相应的时钟\n\n### pll\n\n\n这里需要使用到 `IP Core Generate` ，位置在 Tools -> IP Core Generate\n\n![](./../../Tang-Nano-1K/assets/Gowin_IP_rpll.png)\n\n双击 `rPLL` ，在弹出窗口 language 选择 Verilog ，CLKIN 为 24MHz ，CLKOUT 为 200MHz，CLKOUTD 要选择 Enable，然后生成时钟为 33.33MHz，Tolerance 选择 0.2%\n\n![](./../../assets/examples/lcd_pjt_5.png)\n\n点击ok后提示是否需要添加到当前工程，此时应当选择确定\n  ![](./led/assets/add_ip_file_in_project.png)\n\n接着会出现一个例化的tmp文件，用来例化所设置的ip。比如下图中例子\n![](./led/assets/ip_examples.png)\n\n### osc\n\n**这一步可以不做**\n\n系统的时钟可以由外部时钟提供，也可以使用 OSC 生成的时钟\n\n同样也是使用 `IP Core Generate`\n\n找到 `OSC` 并双击打开进行分频的设置\n\n在帮助页面可以知道，GW1N-1 系列的 fpga 的 OSC 是从 240MHz 进行分频的，所以要产生 24MHz 的时钟，只需要进行 10 的分频\n\n## 屏幕驱动代码\n\n- **首先新建一个额外的verilog文件来保存下面要编写的代码**\n\n### 端口定义\n\n首先需要先定义出驱动屏幕所需要的端口\n\n```verilog\nmodule VGAMod\n(\n    input                   CLK,\n    input                   nRST,\n\n    input                   PixelClk,\n\n    output                  LCD_DE,\n    output                  LCD_HSYNC,\n    output                  LCD_VSYNC,\n\n\toutput          [4:0]   LCD_B,\n\toutput          [5:0]   LCD_G,\n\toutput          [4:0]   LCD_R\n);\n```\n\n本例程使用RGB565作为驱动方式；\n\n### 时序常量\n\n接着定义出时序图上所要求的常量\n\n```verilog\n\nlocalparam      V_BackPorch = 16'd6; //0 or 45\nlocalparam      V_Pluse \t= 16'd5; \nlocalparam      HightPixel  = 16'd480;\nlocalparam      V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam      H_BackPorch = 16'd182; \t\nlocalparam      H_Pluse \t= 16'd1; \nlocalparam      WidthPixel  = 16'd800;\nlocalparam      H_FrontPorch= 16'd210;\n\nlocalparam      PixelForHS  =   WidthPixel + H_BackPorch + H_FrontPorch;  \t\nlocalparam      LineForVS   =   HightPixel + V_BackPorch + V_FrontPorch;\n\n```\n\n首先是设置时序相关的参数：前沿、后沿、有效像素\n\n关于显示前沿、后沿，前面也说了，可以合并为一个消影时间，就是可以把其中一个设置为0，另一个设置为消影时间。反正前后沿的时间加起来符合表中的时间要求就可以\n\n### 定义变量\n\n- 定义一些变量能够容易编写程序\n  \n```verilog\n\nreg [15:0] LineCount;\nreg [15:0] PixelCount;\n\nreg\t[9:0]  Data_R;\nreg\t[9:0]  Data_G;\nreg\t[9:0]  Data_B;\n\n```\n\n### 同步信号\n\n这段代码产生同步信号，需要注意的是，这块屏幕的同步信号是负极性使能\n\n```verilog\n    always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n            LineCount       <=  16'b0;    \n            PixelCount      <=  16'b0;\n            end\n        else if(  PixelCount  ==  PixelForHS ) begin\n            PixelCount      <=  16'b0;\n            LineCount       <=  LineCount + 1'b1;\n            end\n        else if(  LineCount  == LineForVS  ) begin\n            LineCount       <=  16'b0;\n            PixelCount      <=  16'b0;\n            end\n        else\n            PixelCount      <=  PixelCount + 1'b1;\n    end\n\n   always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n\t\t\tData_R <= 9'b0;\n\t\t\tData_G <= 9'b0;\n\t\t\tData_B <= 9'b0;\n            end\n        else begin\n\t\t\tend\n\tend\n\n//注意这里HSYNC和VSYNC负极性\nassign  LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) ? 1'b0 : 1'b1;\nassign  LCD_VSYNC = ((( LineCount  >= V_Pluse )&&( LineCount  <= (LineForVS-0) )) ) ? 1'b0 : 1'b1;\n```\n\n### 使能信号\n\n这段代码设置 LCD 使能图像显示，这块屏幕需要控制一个管脚用作显示开关，实际这个信号就是传输图像有效的那 800*480 的数据时置 1\n  \n```verilog\nassign  LCD_DE = (  ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 ))  ? 1'b1 : 1'b0;\n                    //这里不减一，会抖动\n```\n\n### 测试彩条\n\n- 这段代码用来产生 LCD 的测试数据，产生彩条显示\n\n```verilog\nassign  LCD_R   =   (PixelCount<200)? 5'b00000 : \n                    (PixelCount<240 ? 5'b00001 :    \n                    (PixelCount<280 ? 5'b00010 :    \n                    (PixelCount<320 ? 5'b00100 :    \n                    (PixelCount<360 ? 5'b01000 :    \n                    (PixelCount<400 ? 5'b10000 :  5'b00000 )))));\n\nassign  LCD_G   =   (PixelCount<400)? 6'b000000 : \n                    (PixelCount<440 ? 6'b000001 :    \n                    (PixelCount<480 ? 6'b000010 :    \n                    (PixelCount<520 ? 6'b000100 :    \n                    (PixelCount<560 ? 6'b001000 :    \n                    (PixelCount<600 ? 6'b010000 :  \n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign  LCD_B   =   (PixelCount<640)? 5'b00000 : \n                    (PixelCount<680 ? 5'b00001 :    \n                    (PixelCount<720 ? 5'b00010 :    \n                    (PixelCount<760 ? 5'b00100 :    \n                    (PixelCount<800 ? 5'b01000 :    \n                    (PixelCount<840 ? 5'b10000 :  5'b00000 )))));\n```\n\n\n**当然在最后的驱动文件最后别忘记换行加上 endmodule** \n\n到这里驱动模块的编写已经完成了。\n\n## 在顶层模块中例化\n\n- **这里也是要新建verilog文件的**\n- 新建文件之后直接把下面的内容复制进去保存即可\n\n```verilog\nmodule TOP //设置顶层模块\n(\n\tinput\t\t\tnRST,\n    input           XTAL_IN,\n\n\toutput\t\t\tLCD_CLK,\n\toutput\t\t\tLCD_HYNC,\n\toutput\t\t\tLCD_SYNC,\n\toutput\t\t\tLCD_DEN,\n\toutput\t[4:0]\tLCD_R,\n\toutput\t[5:0]\tLCD_G,\n\toutput\t[4:0]\tLCD_B\n\n); // 列出需要的端口\n\n\twire\t\tCLK_SYS;\t\n\twire\t\tCLK_PIX;\n    \n    //例化pll\n    Gowin_rPLL chip_pll(\n        .clkout(CLK_SYS), //output clkout     //200M\n        .clkoutd(CLK_PIX), //output clkoutd   //33.00M\n        .clkin(XTAL_IN)    //input clkin\n    );\t\n\n\tVGAMod\tVGAMod_inst //例化vga驱动\n\t(\n\t\t.CLK\t\t(\tCLK_SYS     ),\n\t\t.nRST\t\t(\tnRST\t\t),\n\n\t\t.PixelClk\t(\tCLK_PIX\t\t),\n\t\t.LCD_DE\t\t(\tLCD_DEN\t \t),\n\t\t.LCD_HSYNC\t(\tLCD_HYNC \t),\n    \t.LCD_VSYNC\t(\tLCD_SYNC \t),\n\n\t\t.LCD_B\t\t(\tLCD_B\t\t),\n\t\t.LCD_G\t\t(\tLCD_G\t\t),\n\t\t.LCD_R\t\t(\tLCD_R\t\t)\n\t);\n\n\tassign\t\tLCD_CLK\t\t=\tCLK_PIX;\n\nendmodule\n```\n\n## 综合、约束、布局布线\n\n### 综合\n\n完成上面步骤后转到“Process”界面下，对编辑好的代码进行综合，即运行“Synthesize” \n![](./../../Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\n运行的结果如下图出现 \n![](./../../Tang-Nano/assets/LED.png)\n\n说明前面编辑的代码无误；如果有错，根据错误提示进行改正即可。\n\n### 管脚约束\n\n对应的管脚约束如下表格所示；\n关于管脚约束方法可以参考[自建点灯文章(点我)](./led/self_create.html)里面的约束方法。\n感觉麻烦的话也可以直接复制准备好的[文件(点我)](./lcd_constrains.html)，将页面里的内容复制到工程目录里 .cst 文件中（如果没有.cst 文件那么自己新建一个**物理管脚约束文件**） 即可。\n\n|   PORT   |  PIN  |   PORT   |  PIN  |   PORT   |  PIN  |\n| :------: | :---: | :------: | :---: | :------: | :---: |\n| LCD_CLK  |  11   |   nRST   |  14   | XTAL_IN  |  35   |\n| LCD_B[4] |  45   | LCD_B[3] |  44   | LCD_B[2] |  43   |\n| LCD_B[1] |  42   | LCD_B[0] |  41   | LCD_G[5] |  40   |\n| LCD_G[4] |  39   | LCD_G[3] |  38   | LCD_G[2] |  34   |\n| LCD_G[1] |  33   | LCD_G[0] |  32   | LCD_R[4] |  31   |\n| LCD_R[3] |  30   | LCD_R[2] |  29   | LCD_R[1] |  28   |\n| LCD_R[0] |  27   | LCD_DEN  |   5   | LCD_SYNC |  46   |\n| LCD_HYNC |  10   |\n\n### 布局布线\n\n管脚约束之后需要在设置里面开启引脚复用才能完成布局布线。\n具体位置在 软件顶部菜单栏 Project -> Configuration -> Place&Route -> Dual-Purpose Pin\n![](./led/assets/enable_io_mux.png)\n\n设置完上面的之后。\n就可以开始布局布线(Place&Route)了。\n完成后就可以给开发板验证代码内容了。\n\n## 烧录\n\n布局布线结束后生成比特流，就可以烧录开发板了。\n\n\n## 结束\n\n上面差不多叙述了所有代码。\n整个工程可以参考 [这里](https://github.com/sipeed/Tang-Nano-examples/tree/master/example_lcd) \n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano/examples/1_led.html": {"title": "点灯", "content": "# 点灯\n\n> 编辑于2022年3月29日\n\n## 前言\n本文提供两种方法点灯\n- [使用github仓库](./led/github_sourcecode.html)\n- [自己新建项目](./led/self_create.html)  \n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano/examples/lcd_constrains.html": {"title": "LCD constrain file content", "content": "---\ntitle: LCD constrain file content\n---\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>\n\n```cst\nIO_LOC \"LCD_B[4]\" 45;\nIO_PORT \"LCD_B[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[3]\" 44;\nIO_PORT \"LCD_B[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[2]\" 43;\nIO_PORT \"LCD_B[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[1]\" 42;\nIO_PORT \"LCD_B[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[0]\" 41;\nIO_PORT \"LCD_B[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[5]\" 40;\nIO_PORT \"LCD_G[5]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[4]\" 39;\nIO_PORT \"LCD_G[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[3]\" 38;\nIO_PORT \"LCD_G[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[2]\" 34;\nIO_PORT \"LCD_G[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[1]\" 33;\nIO_PORT \"LCD_G[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[0]\" 32;\nIO_PORT \"LCD_G[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[4]\" 31;\nIO_PORT \"LCD_R[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[3]\" 30;\nIO_PORT \"LCD_R[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[2]\" 29;\nIO_PORT \"LCD_R[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[1]\" 28;\nIO_PORT \"LCD_R[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[0]\" 27;\nIO_PORT \"LCD_R[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_DEN\" 5;\nIO_PORT \"LCD_DEN\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_SYNC\" 46;\nIO_PORT \"LCD_SYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_HYNC\" 10;\nIO_PORT \"LCD_HYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_CLK\" 11;\nIO_PORT \"LCD_CLK\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"nRST\" 14;\nIO_PORT \"nRST\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\nIO_LOC \"XTAL_IN\" 35;\nIO_PORT \"XTAL_IN\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\n```\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano/user.html": {"title": "一些例程", "content": "# 一些例程\n\n## 点灯LED\n\n1. 新建工程：File-->NEW-->FPGA Dsign Project-->OK\n    ![](./assets/LED-1.png)\n\n2. 弹出的选项框选择存储路径和工程名称（路径和文件名称要求是英文路径）\n    ![](./assets/LED-2.png)\n\n3. 选择合适的型号：\n    ![](./assets/LED-3.png)![](./assets/LED-4.png)\n\n4. 新建好工程之后接下来进行代码编辑，在Design工作栏内新建“Verilog File”,如下图所示：\n    ![](./assets/LED-5.png)\n5. 为文件命名（要求写英文名，不然后续综合很容易报错）\n    ![](./assets/LED-6.png)![](./assets/LED-7.png)\n6. 双击文件，可以在右侧的编辑框中进行代码的编写。以编辑流水灯为例，将下方的“LED例程代码”粘贴到自己的文件中，也可以自己编写自己的代码，例程代码地址：<https://github.com/sipeed/TangNano-1K-examples>\n\n    ```v\n    module led (\n        input sys_clk,\n        input sys_rst_n,\n        output reg [2:0] led // 110 R, 101 B, 011 G\n    );\n\n    reg [31:0] counter;\n\n    always @(posedge sys_clk or negedge sys_rst_n) begin\n        if (!sys_rst_n) begin\n            counter <= 31'd0;\n            led <= 3'b110;\n        end\n        else if (counter < 31'd1350_0000)       // 0.5s delay\n            counter <= counter + 1'b1;\n        else begin\n            counter <= 31'd0;\n            led[2:0] <= {led[1:0],led[2]};\n        end\n    end\n\n    Endmodule\n\n    ```\n\n7. 代码编辑结束后转到“Process”界面下，对编辑好的代码进行综合，即运行“Synthesize”\n    ![](./assets/LED-8.png)\n    运行的结果如上图出现 ![](./assets/LED.png) 的形状，且下方结果栏不出现任何从报错，说明前面编辑的代码无误，如果有错，根据错误提示进行改正即可。\n\n8. 接下来通过  打开“FloorPlanner”实现管脚约束（前面的综合如果运行失败，这一步无法进行），第一次打开会弹出缺少.cst文件：\n    ![](./assets/LED-9.png)\n    选择“OK”即可；\n    初始界面如图：![](./assets/LED-10.png)![](./assets/LED-11.png)\n9. 将界面转到“Package View”界面，点击下方“I/O Constraints”编辑引脚数据，如下图所示：\n    ![](./assets/LED-12.png)![](./assets/LED-13.png)\n    引脚情况：\n    ![](./assets/LED-14.png)\n    引脚分布情况：\n\n| PORT | I/O | PIN | DESE |\n| --- | --- | --- | --- |\n| SYS_CLK | INPUT | 47 | 47 |\n| SYS-RST-N | INPUT | 13 | --- |\n| LED[0] | OUTPUT | 9 | --- |\n| LED[1] | OUTPUT | 10 | --- |\n| LED[2] | OUTPUT | 11 | --- |\n\n10.将界面转到“Package View”界面，点击下方“I/O Constraints”编辑引脚数据，如下图所示：\n![](./assets/LED-15.png)\n\n11.到“Process”下运行“Place&Route”，即运行管脚布局布线，运行结果如下图所示：\n![](./assets/LED-16.png)\n\n12.接下来是进行连接板子，烧录固件，可参照下图选择版型：\n![](./assets/LED-17.png)\n\n13.以烧录进SRAM为例进行说明，如下图：\n![](./assets/LED-18.png)![](./assets/LED-19.png)\n\n最后运行：\n![](./assets/LED-20.png)\n\n14、结果显示：\n【此处放置LED闪烁动图】\n\n15、解说烧录到FLASH中的方式：\n![](./assets/LED-21.png)![](./assets/LED-22.png)\n\n点灯步骤到此结束。\n\n\n\n> 说明：\n> 01、只测试过下载站下班的版本以及1.9.8版本测试正常，其他版本需用户自行确认。\n> 02、不要使用中文路径-->错误：![](./assets/LED-23.png)\n\n\n## 驱屏教程\n\n例程代码地址：<https://github.com/sipeed/TangNano-1K-examples>\n\n![](./assets/pin-1.png)![](./assets/pin-2.png)![](./assets/pin-3.png)\n\n引脚分布情况：\n\n| PORT | I/O | PIN | DESE |\n| --- | --- | --- | --- |\n| KEY | INPUT | 13 | 47  |\n| LCD_B[0] | INPUT | 19 | --- |\n| LCD_B[1] | OUTPUT | 20 | --- |\n| LCD_B[2] | OUTPUT | 22 | --- |\n| LCD_B[3] | OUTPUT | 23 | --- |\n| LCD_B[4] | OUTPUT | 24 | --- |\n| LCD_CLK | OUTPUT | 8 | --- |\n| LCD_DEN | OUTPUT | 21 | --- |\n| LCD_G[0] | OUTPUT | 28 | --- |\n| LCD_G[1] | OUTPUT | 27 | --- |\n| LCD_G[2] | OUTPUT | 15 | --- |\n| LCD_G[3] | OUTPUT | 16 | --- |\n| LCD_G[4] | OUTPUT | 17 | --- |\n| LCD_G[5] | OUTPUT | 18 | --- |\n| LCD_HYNC | OUTPUT | 33 | --- |\n| LCD_R[0] | OUTPUT | 15 | --- |\n| LCD_R[2] | OUTPUT | 34 | --- |\n| LCD_R[3] | OUTPUT | 31 | --- |\n| LCD_R[4] | OUTPUT | 30 | --- |\n| LCD_R[4] | OUTPUT | 29 | --- |\n| LCD_SYNC | OUTPUT | 32 | --- |\n| LED_B | OUTPUT | 10 | --- |\n| LED_G | OUTPUT | 11 | --- |\n| LED_R | OUTPUT | 9 | --- |\n| XTAL_IN | INPUT | 47 | --- |\n| nRST | INPUT | 44 | --- |\n\n详细代码和工程建立步骤请参照LED点灯例程。"}, "/hardware/zh/tang/Tang-Nano/start.html": {"title": "摄像头和HDIM屏幕显示", "content": "# 摄像头和HDIM屏幕显示\n\n具体工程[文件](https://github.com/sipeed/TangNano-4K-example)\n\n接好摄像头和HDMI显示器之后，将这个工程烧录到开发板上即可使用了。"}, "/hardware/zh/tang/Tang-Nano/Nano.html": {"title": "Tang Nano", "content": "# Tang Nano\n\n## 概述\n\nTang Nano是基于高云半导体的小蜜蜂系列GW1N-1 FPGA设计的简约型开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载Type-C、USB-JTAG、PSRAM、RGB接口(可接LCD屏、VGA等外设)等，并把所有IO资源引出，方便开发者拓展使用，非常适用于小型数字逻辑的设计和实验。\n\n![](/hardware/assets/Tang/Nano/Tang_Nano.jpg)\n\n## 参数\n\nTang Nano开发板板载的GW1N-1 FPGA芯片功能非常强大，具有较丰富的逻辑资源，支持多种I/O电平标准，内嵌块状静态随机存储器、锁相环、Flash等资源，是一款具有非易失性的FPGA产品;另外，板载64Mbits PSRAM，为FPGA提供了丰富的存储资源。\n\n![Nano](/hardware/assets/Tang/Nano/Tang-Nano-4.png)\n\n| 项目             | 参数        |\n| ---------------- | ----------- |\n| 核心             | GW1N-1 FPGA |\n| 逻辑单元(LUT4)   | 1152        |\n| 寄存器(FF)       | 864         |\n| Block SRAM(bits) | 72K         |\n| B-SRAM块个数     | 4           |\n| 用户闪存(bits)   | 96K         |\n| 锁相环PLL        | 1           |\n| I/O Bank总数     | 4           |\n| 最多用户I/O数    | 41          |\n| 核电压           | 1.2V        |\n\n\n![Nano-Pin](/hardware/assets/Tang/Nano/Tang-Nano-Pin.png)\n\n## 产品技术支持\nTang Nano开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>\n\n## 资料\n\n[相关例程](./../Tang-Nano-Doc/examples.html#板型)\n[资料下载](https://dl.sipeed.com/shareURL/TANG/Nano)"}, "/hardware/zh/tang/Tang-primer/Tang-primer.html": {"title": "Tang Primer", "content": "# Tang Primer\n\n## 介绍\nLichee Tang Primer是基于安路科技的EG4S20BG256 FPGA芯片设计的简约型开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载Micro-USB、USB-JTAG、TF卡槽、DVP摄像头接口、RGB(可接LCD屏、VGA等外设)等，并把部分IO资源引出，非常方便开发者拓展使用，开放RISC-V IP内核。\n\n![Tang_permier](./../../../assets/Tang/permier/Tang_permier_1.png)\n\n## 管脚定义\n\n![Tang_permier_2](./../../../assets/Tang/permier/Tang_permier_2.png)\n\n![Tang_permier_3](./../../../assets/Tang/permier/Tang_permier_3.png)\n\n## 参数\n\n| 项目                            | 参数                                           |\n| ------------------------------- | ---------------------------------------------- |\n| FPGA芯片                        | EG4S20BG256                                    |\n| 逻辑单元数量                    | 23520                                          |\n| 寄存器数量(FF)                  | 19600                                          |\n| Total Configuration SRAM (bits) | 4,988,928                                      |\n| EM SDR SDRAM                    | 2M X 32bits                                    |\n| 锁相环PLL                       | 1                                              |\n| I/O Bank总数                    | 1                                              |\n| 最多用户I/O数                   | 193                                            |\n| 核电压                          | 1.2V                                           |\n| 板载FPC40P座                    | 可接RGB LCD、VGA转接口、高速DAC等模块          |\n| 板载FPC20P座                    | 可接DVP摄像头、高速ADC模块                     |\n| 引出IO                          | 标准2.54mm和半邮票孔接口，引出芯片大部分IO资源 |\n| 板载IIC电阻触摸芯片屏控制器     | NS2009                                         |\n\n## 产品技术支持\n\nTang Permier开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务support@sipeed.com。\n\n## 资料\n[烧录相关使用](/soft/Tang/zh/index_bak.md)\n[资料下载](https://dl.sipeed.com/shareURL/TANG/Primer)"}, "/hardware/zh/tang/Tang-primer/index.html": {"title": "荔枝糖 全流程指南", "content": "# 荔枝糖 全流程指南\n\n荔枝糖，一款极致打磨的国产开源RISC-V开发板。\n\n荔枝糖萌生于国内芯片振荡之潮，历经三个月的生长与蜕变，终于在七月，登上开源的舞台。\n\n荔枝糖不仅担起开源开发者们的期待，更志向于在国内推广RISC-V架构相关的开发与教育，向世界介绍中国的一款优秀开发板。\n\n![](./../assets/material.png)\n\n\n荔枝糖使用 安路科技(Anlogic Technologies) 的 EG4S20 作为核心单元, **20K逻辑单元(LUT4/LUT5混合架构)，约130KB SRAM，内置32bit位宽 64MBit SDRAM，丰富的LVDS引脚，内置12-bit 1MSPS ADC**，这为荔枝糖提供了无限的可能性：\n-   FPC40P座，可接 RGB LCD，VGA转接板，高速DAC模块\n-   FPC24P座，可接DVP摄像头，高速ADC模块\n-   I2C接口的电阻触摸屏控制器，配合RGB LCD使用\n-   3路DCDC电源芯片，稳定高效的电源供应，Bank0 IO电平独立可调\n-   FPGA 配置Flash，8Mbit\n-   用户Flash，nor/nand可选\n-   板载FPGA JTAG下载调试器\n-   RGB LED\n-   相邻插针LVDS等长引出，引出8路GCLK，全引出8路ADC。\n-   双排插针间距900mil， **兼容面包板开发** \n-   半孔引出额外 **40 IO**，整板引出 **130+ IO** 。\n\n![荔枝糖资源图](./../assets/E203_function.png)\n\n![荔枝糖引脚图(旧板,底面丝印较小版本)](./../assets/E203_pin.png)\n\n![ 荔枝派引脚图(新板,底面丝印较大版本)](./../assets/Lichee-tang_NewIoMap.png)\n\n您可能需要这些来进一步了解荔枝糖： \n\n- EG4S20Datasheet [点我](https://dl.sipeed.com/shareURL/TANG/Primer/HDK/Datasheet/)里面的`EG4S20_DataSheet_V1.4.pdf`\n\n- 荔枝糖原理图 [点我](https://dl.sipeed.com/shareURL/TANG/Primer/HDK)里面的`LicheeTang_RV(Schematic).pdf`\n\n荔枝糖仍在不断地成长，对于外观、电路设计、文档内容甚至于荔枝糖的发展方向，\n我们欢迎您到[荔枝糖 | 建议与讨论帖](https://bbs.sipeed.com/cate/30/seq/1) 提出您宝贵的建议。\n\n同时欢迎各位加入荔枝派交流群 `834585530` 或者 [荔枝派Telegram电报群](https://t.me/sipeed)与众多开发者、爱好者即时交流。\n\n另外，FPGA开发环境TD (Tang Dynasty) 可在如下网址下载：\n- [https://eyun.baidu.com/s/3i6FbQzr](https://eyun.baidu.com/s/3i6FbQzr)\n- [https://dl.sipeed.com/shareURL/TANG/Primer/IDE](https://dl.sipeed.com/shareURL/TANG/Primer/IDE)"}, "/hardware/zh/tang/Tang-primer/Tang-primer-summary.html": {"title": "Tang Primer", "content": "# Tang Primer\n\nTang Primer 系列 FPGA 是 Sipeed 使用国产 FPGA 芯片作为主控所设计的大容量板卡。\n\n<table>\n    <thead>\n        <tr>\n            <th>Tang primer 20K</th>\n            <th>Tang primer </th>\n        </tr>\n    </thead>\n        <tr>\n            <td><a href=\"./../tang-primer-20k/primer-20k.html\"><img src=\"./../tang-primer-20k/assets/primer_20k.png\" width=320></a></td>\n            <td><a href=\"./Tang-primer.html\"><img src=\"./../../../assets/Tang/permier/Tang_permier.jpg\" width=320></a></td>\n        </tr>\n</table>"}, "/hardware/zh/tang/Tang-primer/e203/led/led.html": {"title": "RGB LED", "content": "---\ntitle: RGB LED\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/led/ws2812.html": {"title": "WS2812灯带", "content": "---\ntitle: WS2812灯带\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/led/pwm_led.html": {"title": "呼吸灯", "content": "---\ntitle: 呼吸灯\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/led.html": {"title": "蜂鸟点灯", "content": "---\ntitle: 蜂鸟点灯\n---\n\n> maxdepth\n> :   2\n>\n> led/led led/pwm\\_led led/ws2812"}, "/hardware/zh/tang/Tang-primer/e203/ft2232.html": {"title": "FT2232使用简明教程", "content": "---\ntitle: FT2232使用简明教程\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/peripherals.html": {"title": "蜂鸟外设简介", "content": "---\ntitle: 蜂鸟外设简介\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/display/lcd1602.html": {"title": "1602屏幕", "content": "---\ntitle: 1602屏幕 \n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/display/oled.html": {"title": "OLED屏幕", "content": "---\ntitle: OLED屏幕 \n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/display/spi_tft.html": {"title": "SPI\\_MCU彩屏", "content": "---\ntitle: 'SPI\\_MCU彩屏' \n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/int.html": {"title": "蜂鸟的中断", "content": "---\ntitle: 蜂鸟的中断\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/sensor.html": {"title": "蜂鸟外挂传感器", "content": "---\ntitle: 蜂鸟外挂传感器\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/rv_ip.html": {"title": "蜂鸟添加外设", "content": "---\ntitle: 蜂鸟添加外设\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/display.html": {"title": "蜂鸟驱动屏幕", "content": "---\ntitle: 蜂鸟驱动屏幕\n---\n\n> maxdepth\n> :   2\n>\n> display/lcd1602 display/oled display/spi\\_tft"}, "/hardware/zh/tang/Tang-primer/get_started/E203.html": {"title": "搭建蜂鸟开发环境", "content": "# 搭建蜂鸟开发环境\n\n- Note 现已经做好了 虚拟机镜像 \n链接：[https://dl.sipeed.com/shareURL/TANG/Primer/vmware](https://dl.sipeed.com/shareURL/TANG/Primer/vmware)，可直接使用\n\n## 下载交叉编译工具链\n\n百度网盘链接为: [https://pan.baidu.com/s/1eUbBlVc](https://pan.baidu.com/s/1eUbBlVc)\n\n由于这里提供的openocd不支持LicheeTang使用的flash型号，所以进行了一些修改;\n请[下载](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/get_started/openocd) 新的进行替换\n\n## 配置工作环境\n\n1. 从github下载e200_opensource\n\n```bash\ngit clone https://github.com/SI-RISCV/e200_opensource.git \n```\n\n2. 将 [sirv-e203-lichee.tar.gz](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/get_started/sirv-e203-lichee.tar.gz) 解压至 e200_opensource/sirv-e-sdk/bsp/env 目录下\n\n- 将下载好的交叉工具编译链以及 openocd 解压(记得使用新的openocd替换)，在 e200_opensource/sirv-e-sdk/work 目录下将其分别软连接到:\n  \n```sh\n    .\n    └── build \n    ├── openocd\n    │   └── prefix\n    │       └── bin -> /opt/riscv/gnu-mcu-eclipse/openocd/0.10.0-6-20180112-1448/bin/\n    └── riscv-gnu-toolchain\n    └── riscv32-unknown-elf\n    └── prefix\n    └── bin -> /opt/riscv/gnu-mcu-eclipse/riscv-none-gcc/7.2.0-2-20180111-2230/bin/\n```\n\n## 蜂鸟的调试\n\n我们使用ft2232d与openocd进行蜂鸟的调试，所以需要进行一些配置\n将ft2232d插入电脑，执行lsusb，可看到一下信息\n\n```bash\nBus 003 Device 019: ID 0403:6010 Future Technology Devices International, Ltd FT2232C Dual USB-UART/FIFO IC\n```\n\n新建 udev rules,使 ft2232d 能够被 plugde\n group 访问\n\n    vim /etc/udev/rules.d/45-ft2232.rules\n    ATTR{idVendor}==\"0403\", ATTR{idProduct}==\"6010\", MODE=\"660\", GROUP=\"plugdev\"\n\n查看该设备是否属于 plugdev\n\n    ls -l /dev/ttyUSB1\n    crw-rw---- 1 root plugdev 188, 1 7月  11 09:13 /dev/ttyUSB1\n\n将你自己的用户添加到 plugdev group 中\n\n    whoami\n    sudo usermod –a –G plugdev your user name\n    \n确认你自己的用户是否属于 plugdev group\n\n    groups\n\n## 编译下载demo程序\n\n编译下载demo程序，可参考文件夹下的demo_gpio.tar.gz在e200_opensource/sirv-e-sdk目录下执行\n\n```bash\nmake software PROGRAM=demo_gpio BOARD=sirv-e203-lichee #编译\n```\n\n```bash\nmake upload PROGRAM=demo_gpio BOARD=sirv-e203-lichee   #上传\n```\n## 调试\n打开两个terminal，一个运行openocd，另外一个运行gdb\n\n```bash\nmake run_openocd PROGRAM=demo_gpio BOARD=sirv-e203- lichee #运行openocd\n```\n```bash\nmake run_gdb PROGRAM= demo_gpio BOARD=sirv-e203- lichee    #运行gdb\n```\n\n`Tip 可能写的不是很清楚，如果有任何疑问欢迎提出，或者参看胡大的《手把手教你设计CPU：RISC-V处理器》（已经上市，请在京东、淘宝、当当上搜索 RISC-V关键字）`"}, "/hardware/zh/tang/Tang-primer/get_started/install_Linux.html": {"title": "Linux的开发环境安装", "content": "# Linux的开发环境安装\n\n## 安装TD \n\n想要进行FPGA开发需要安装TD，可以通过[下载站](https://dl.sipeed.com/shareURL/TANG/Premier/IDE)，下载TD安装包和license，如果下载速度过慢的时候，建议使用[百度网盘](https://eyun.baidu.com/s/3i6FbQzr)进行下载\n\n对应应下载的IDE名称为 `TD_5.0.3_28716_NL_Linux.zip`\nLicense文件：`Anlogic_20230606.lic`\n\n双击打开第一个文件进行安装，安装结束之后将 Anlogic_20230606.lic 修改成Anlogic.lic放到对应安装目录的TD5.0.27252/license中\n\n下载完程序后，打开终端并 cd 进入TD压缩包所在的目录。 \n\n```bash\ncd <安装程序存档目录的路径 >\n```\n\n在linux中 /opt 目录是为所有不属于默认安装的软件和附加包保留的。 在这里我们为 TD创建一个安装目录\n\n```bash\nsudo mkdir /opt/TD_DECEMBER2018\n```\n\n将 TD 解压到 /opt/TD_DECEMBER2018 目录中：\n\n```bash\nsudo tar -xvf  TD_5.0.3_28716_NL_Linux.zip -d /opt/TD_DECEMBER2018/\n```   \n\n## 检查默认linux驱动\n\n将 Tang Primer 连接上电脑，执行lsusb命令然后查看信息。确定 USB VID:PID 为 0547:1002，如下图中的显示\n\n![](./assets/USB_VID.jpg)\n\n## 新建一个udev文件\n\n新建一个udev文件能够让Tang Primer被插件搜索到，\n在终端中执行以下命令以创建新的 udev 规则文件。\n\n```bash\nsudo nano /etc/udev/rules.d/91-anlogic-jtag.rules\n```\n\n将下面的内容复制到上面新建的文件中。\n\n```\nSUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0547\", ATTRS{idProduct}==\"1002\", \\\n  GROUP=\"plugdev\", \\\n  MODE=\"0660\"\n\n```\n\n在终端中执行下面的命令来重启udev服务\n\n```bash\nsudo service udev restart\n```\n\n## 检查设备能否被TD检测到\n\n在td所在路径解压目录指定下面命令来打开gui界面\n\n```bash\n./td -gui\n```\n\n点击下图中框出来的下载按钮\n![](./assets/td_linux_gui.jpg)\n\n将开发板与电脑连接，点击下载界面的刷新按钮\n![](./assets/refresh.jpg)\n\n> 有奇怪的bug，导致JTAG只能在 400kbps 或者更低的速率运行"}, "/hardware/zh/tang/Tang-primer/get_started/install_TD_win.html": {"title": "Windows的开发环境安装", "content": "# Windows的开发环境安装\n\n> 修改于2022.04.22\n\n## 安装TD\n\n想要进行FPGA开发需要安装TD，可以通过[下载站](https://dl.sipeed.com/shareURL/TANG)，下载TD安装包和license，如果下载速度过慢，建议使用[百度网盘](https://eyun.baidu.com/s/3htTXfaG)进行下载\n\n安装包 ：`TD_5.0.4_27252_Win7_64bit_NL.msi`\nLicense文件：`Anlogic_20230606.lic`\n\n双击打开第一个文件进行安装，安装结束之后将 Anlogic_20230606.lic 修改成Anlogic.lic放到对应安装目录的TD5.0.27252\\license中\n\n然后可以运行TD软件\n\n## 安装usb串口\n\n将 Tang Primer 插入您的计算机并打开设备管理器以查看信息。 \n根据 Windows 版本不同，它可能被命名为 WinUsb Device 或 USB-JTAG-Cable。 \n确保 USB VID:PID 为 0547:1002\n\n- win7系统没有安装驱动时\n\n![no_driver](./../../assets/get_started/no_driver.png)\n\n- win10系统没有安装驱动时\n\n![no_driver_win10](./../../assets/get_started/no_driver_win10.png)\n\n### win7安装驱动\n\n双击 WinUsb Device 选择更新驱动程序 \n![update_drive1](./../../assets/get_started/update_driver1.png)\n![update_drive2](./../../assets/get_started/update_driver2.png)\n\n浏览文件夹，选择TD安装目录下的驱动目录。 单击确定开始安装\n![choosefolder](./../../assets/get_started/choosefolder.png)\n\n安装成功，在设备管理器中可以看到 \n![installsuccess](./../../assets/get_started/installsuccess.png)\n\n### win10安装驱动\n\n> 在安装驱动程序本身之前，请确保首先禁用驱动程序签名强制，否则 Windows 10 将不允许您安装来自 Anlogic 的未签名驱动程序\n\n双击 WinUsb Device 选择更新驱动程序 \n![update_drive1](./../../assets/get_started/update_driver1_win10.png)\n![update_drive2](./../../assets/get_started/update_driver2_win10.png)\n\n浏览文件夹，选择TD安装目录下的driver\\win8_10_64目录。 单击确定。 然后单击让我从计算机上的可用驱动程序列表中选择\n![choosefolder](./../../assets/get_started/choosefolder_win10.png)\n\n单击Have Disk...，然后选择您在上一步中选择的目录，然后单击OK  \n![install_from_disk_win10](./../../assets/get_started/install_from_disk_win10.png)\n\n安装成功，在设备管理器中可以看到\n![installsuccess](./../../assets/get_started/installsuccess.png)\n\n## 验证安装\n\n打开TD，点击下载,如图所示\n![](./../../assets/get_started/87078310026779781.jpg)\n\n将 Tang Primer 插入您的计算机，然后点击下载对话框上的刷新按钮\n![](./../../assets/get_started/1823555291194601.jpg)\n\n出现上图的信息，则表示安装且激活成功"}, "/hardware/zh/tang/Tang-primer/get_started/fpga_download.html": {"title": "FPGA码流烧录", "content": "# FPGA码流烧录\n\n----\n\n<font size = 5>**Attention!! 下载码流需要先保证驱动安装成功**</font>\n\n1. 打开TD软件，选择 download\n![](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/migrate/E203_TD_download.png)\n\n2. 添加 bitstream文件，选择 [LicheeTangNewIoMap_BitStream.bit](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/LicheeTangNewIoMap_BitStream.bit) 或其他码流文件\n![](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/migrate/E203_TD_add.png)\n\n3. 如果 Mode 为 JTAG，断电后则丢失程序。为了上电自动启动，需要选择 PROGRAM FLASH 。（时间较长）\n\n4. E203源码已开放，如果需要进行IO修改，或者功能修改，请使用源码自行进行修改。可以到 [Github](https://github.com/Lichee-Pi/Tang_E203_Mini.git) 下载。\n\n5. FPGA例程已上传，请到 [Tang_FPGA_Examples](https://github.com/Lichee-Pi/Tang_FPGA_Examples.git) 下载。"}, "/hardware/zh/tang/Tang-primer/fpga/led.html": {"title": "FPGA点灯", "content": "---\ntitle: FPGA点灯\n---\n\n## 源码下载\n\n请到 github 下载全部工程，地址为 [https://github.com/Lichee-Pi/Tang_FPGA_Examples/](https://github.com/Lichee-Pi/Tang_FPGA_Examples/)\n\n## Verilog代码\n\n```v\nmodule led\n(\n    input wire CLK_IN, //时钟输入，24MHz\n    input wire RST_N, //复位按键输入，低有效\n    output wire [2:0]RGB_LED //RGB led输出\n);\n\nparameter time1 = 24’d24_000_000;//晶振为24Mhz，这里表示计数一秒\n\nreg [2:0]rledout;\nreg [23:0] count;\nreg [1:0]shift_cnt;\n\ninitial\nbegin\n    count=24’b0;\n    rledout=3’b1;\n    shift_cnt=2’b0;\nend\n\nalways @(posedge CLK_IN)begin\n    if(RST_N==0)begin //复位按键按下就清空计数并清空输出\n        count <= 24’b0;\n        rledout <= 3’b1;\n        shift_cnt <=2’b0;\n    end\n\n    if(count == time1) //计数时间到\n    begin\n        count<= 24’d0; //清空计数值\n\n        if(shift_cnt==2’b10)begin //移位3次\n            rledout <= 3’b1;\n            shift_cnt <=2’b0;\n        end\n        else begin\n            rledout <= {rledout[1:0],1’b0}; //led输出移位\n            shift_cnt <= shift_cnt + 1’b1;\n        end\n    end\n    else\n        count <= count + 1’b1; //计数累加\nend\n\nassign RGB_LED = rledout;\nendmodule\n```\n\n上面的代码输入完且保存后，综合一下，接着自己对照板子原理图进行管脚约束。在生成比特流下载到fpga，可以看到板上的rgb led会移位闪烁。（emmm，闪烁效果太差，如果你有更好的可以发过来。(╯︵╰)"}, "/hardware/zh/tang/Tang-primer/fpga/sdram.html": {"title": "FPGA驱动SDRAM", "content": "---\ntitle: FPGA驱动SDRAM \n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/dvp.html": {"title": "FPGA驱动DVP", "content": "---\ntitle: FPGA驱动DVP \n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/display/vga.html": {"title": "FPGA驱动VGA", "content": "---\ntitle: FPGA驱动VGA\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/display/av.html": {"title": "FPGA驱动AV显示器", "content": "---\ntitle: FPGA驱动AV显示器\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/display/lcd.html": {"title": "FPGA驱动LCD", "content": "---\ntitle: FPGA驱动LCD\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/display/hdmi.html": {"title": "FPGA驱动HDMI", "content": "---\ntitle: FPGA驱动HDMI\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/display.html": {"title": "FPGA外接常用显示接口", "content": "---\ntitle: FPGA外接常用显示接口 \n---\n\n\\> maxdepth \\> : 2 \\> \\> display/lcd display/vga display/av display/hdmi"}, "/hardware/zh/tang/Tang-primer/fpga/opencores.html": {"title": "FPGA 运行其他软核", "content": "---\ntitle: FPGA 运行其他软核\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/ics/adc9288.html": {"title": "FPGA驱动ADC9288", "content": "---\ntitle: FPGA驱动ADC9288\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/ics/dac908.html": {"title": "FPGA驱动DAC908", "content": "---\ntitle: FPGA驱动DAC908\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/ics/usb3300.html": {"title": "FPGA驱动USB3300", "content": "---\ntitle: FPGA驱动USB3300\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/ics/codec.html": {"title": "FPGA驱动CODEC", "content": "---\ntitle: FPGA驱动CODEC\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/ics.html": {"title": "FPGA驱动其他IC", "content": "---\ntitle: FPGA驱动其他IC \n---\n\n\\> maxdepth \\> : 2 \\> \\> ics/adc9288 ics/dac908 ics/codec ics/usb3300"}, "/hardware/zh/tang/Tang-Nano-Doc/SUMMARY.html": {"title": "Summary", "content": "---\ntitle: Summary\n---\n\nTang nano系列开发板是基于[高云半导体](http://www.gowinsemi.com.cn/)FPGA设计的开发板，多种型号刚好可以满足不同的需求：\n- Tang nano 1K 用极低的价格来让用户带领用户踏入FPGA领域\n- Tang nano 4K 带有一个Cortex m3的硬核，几乎是用户可以购买到的最低价的异构开发板\n- Tang nano 9K 配有极其丰富数量的逻辑单元，可以让用户在上面运行软核\n\n## 横向对比\n\n| 型号     | Tang Nano 1K         | Tang Nano 4K   | Tang Nano 9K        |\n| --- | -------- | ----------------- | -------- |\n| 图片             | ![Generated](./../Tang-Nano/assets/clip_image002.gif) | ![Generated](./../Tang-Nano/assets/clip_image004.gif) | ![Generated](./../Tang-Nano/assets/clip_image006.gif) |\n| 逻辑单元（LUT4） | 1152                                                         | 4608                                                         | 8640                                                         |\n| 硬核处理器       | 无                                                           | Cortex-M3                                                    | 无                                                           |\n| 有源晶振         | 27Mhz                                                        | 27Mhz                                                        | 27Mhz                                                        |\n| 显示接口         | 常见RGB屏幕接口                                              | HDMI                                                         | HDMI<br>  常见RGB屏幕接口<br>  SPI屏幕接口                       |\n| 摄像头           | 无                                                           | 可选OV2640                                                   | 无                                                           |\n| 外置SPI FLASH    | 仅预留焊盘                                                   | 默认焊接<br>32Mbit SPI FLASH                                     | 默认焊接<br>32Mbit SPI FLASH                                     |\n| TF卡座           | 无                                                           | 无                                                           | 有                                                           |\n| 下载器           | 板载USB-JTAG下载器                                           | 板载USB-JTAG下载器                                           | 板载USB-JTAG下载器&<br>USB-UART通信接口                                    |\n\n\n## 准备\n\n- [IDE安装](./get_started/install-the-ide.html)"}, "/hardware/zh/tang/Tang-Nano-Doc/index.html": {"title": "Tang Nano", "content": "# Tang Nano\n\n## 什么是 Tang Nano \n\nTang Nano 是基于高云半导体小蜜蜂系列 GW1N-1 FPGA 的简约型开发板。\n\n板载芯片为 GW1N-LV1QN48C6/I5，搭载了 1152 LUT4 的逻辑资源，1 PLL 和 4 Block 合计 72Kbit SRAM，封装为 QFN48。开发板引出了所有 I/O 接口，适用于小型数字逻辑的设计和实验。\n\n板载 64Mbits PSRAM，为 FPGA 提供了丰富的存储资源。\n\n同时，该开发板具有 RGB接口，能够与 LCD屏、VGA转换器 等外设连接，非常适合于屏幕显示等类型的应用。\n\n板子板载 24MHz 晶振和 USB转JTAG下载器，能够容易的连接电脑进行开发，而不需要外部的调试器和时钟输入。板载的 RGB LED 可用于指示和调试，同时 FPGA IOBANK 分组可调的IO电平使得开发板能够容易的对外部各种不同电平规范的器件接口。\n\n**板载资源:**\n\n+ GW1N-1\n+ 64Mbit QSPI PSRAM\n+ RGB LED\n+ RGB LCD 40P接口及驱动电路\n+ 24MHz晶振\n+ USB调试器，基于Type-C通讯接口\n\n## 引脚定义\n\n![Nano 引脚](./../../assets/tang_nano_pinout_v1.0.0_w5676_h4000_large.png)\n\n## 资源下载链接\n\n+ [高云半导体官方下载站](http://www.gowinsemi.com.cn/faq.aspx)\n+ [dl 下载站](http://dl.sipeed.com/TANG/Nano)\n+ [Tang nano 原理图](../assets/files/Tang-NANO.pdf)"}, "/hardware/zh/tang/Tang-Nano-Doc/examples.html": {"title": "Tang Nano 系列例程", "content": "# Tang Nano 系列例程\n\n- 编辑于2022.04.18\n\n这里汇总 Tang Nano 例程，持续更新\n\n## 前言\n\n对于Programmer(下载程序)建议使用\nhttps://dl.sipeed.com/shareURL/TANG/programmer 里面的文件。\n下载后解压替换掉Gowin对应安装目录的Programmer文件夹即可。\n不会替换的话可以在下载解压后的Programmer程序中手动添加对应下载文件来进行烧录。\n\n另外欢迎投稿或者提供例程，有什么例程想法的话也可以提出。\n\n## 板型\n\n### Tang Nano\n\n> 板载下载器为CH552\n\n- [点灯例程](./../Tang-Nano/examples/1_led.html)\n- [驱屏教程](./../Tang-Nano/examples/2_lcd.html)\n\n### Tang Nano 1K\n\n- [点灯例程](./../Tang-Nano-1K/examples/LED.html)\n- [驱屏教程](./../Tang-Nano-1K/examples/LCD.html)\n\n### Tang Nano 4K\n\n- [点灯例程](./../Tang-Nano-4K/examples/LED.html)\n- 使用 Cortex-M3 点灯例程：[Github](https://github.com/verilog-indeed/gowin_fpga_tutorials) (英文)\n- HDMI显示工程：https://github.com/sipeed/TangNano-4K-example/tree/main/dk_video/project\n- 摄像头内容显示在HDMI工程：https://github.com/sipeed/TangNano-4K-example/tree/main/dk_video/project\n- 在Nano 4K上运行GBA的工程：https://github.com/Martoni/GbHdmi\n\n### Tang Nano 9K\n\n- [点灯例程](./../Tang-Nano-9K/examples/LED.html)\n- [驱RGB屏教程](./../Tang-Nano-9K/examples/LCD.html)\n- [PicoRV 在9K上运行的示例](./../Tang-Nano-9K/examples/picorv.html)\n- [FPGA驱动1.14 SPI屏幕工程](./../Tang-Nano-9K/examples/spi_lcd.html)\n<!-- - [FPGA驱动1.14 SPI屏幕](./../Tang-Nano-9K/examples/spi_lcd/spi_lcd.html) -->\n- HDMI 示例：参考 [PicoRV 在9K上运行的示例](./../Tang-Nano-9K/examples/picorv.html)\n- litex 在 9K 支持：https://github.com/litex-hub/litex-boards"}, "/hardware/zh/tang/Tang-Nano-Doc/get_started/install-the-ide.html": {"title": "安装 IDE", "content": "---\ntitle: 安装 IDE \nkeywords: Sipeed, Gowin, Tang, Nano, fpga, 矽速\nupdate:\n  - date: 2022-09-19\n    version: none\n    author: wonder\n    content:\n      - 根据高云半导体下载链接新页面重新截图\n      - 去掉了替换 Programmer 相关操作说明\n---\n\n使用高云半导体的 FPGA 需要用到 GOWIN 这个软件，对应的软件文档链接：\n<http://www.gowinsemi.com.cn/down.aspx?FId=n14:14:26>\n\n- 根据自己系统选择安装对应版本的 IDE\n- 对于 Linux 系统下载固件可以使用 Openfpgaloader，可以查看本页底部的 [Linux 下烧录](#burn-in-linux) 来进行烧录操作。\n\n## 安装软件\n\n### 下载软件\n\n前往 http://www.gowinsemi.com.cn/faq.aspx 下载 IDE。\n\n由于高云半导体的IDE在不断的更新中，下图为 2022 年 09 月 19 日截图\n\n![IDE](./assets/IDE-1.png)\n\n---\n\nIDE 分为商业版和教育版：\n\n商业版的 IDE 需要 license，需要向高云半导体官方自行申请。\n\n教育版 IDE 不需要 license，直接点击下载就可以了。\n\n教育版所支持的器件如下：\n\n![educational_device](./assets/educational_device.png)\n\n由于高云半导体的IDE在不断的更新中，上图为 2022 年 11 月 09 日截图\n\n| 芯片全程               | 芯片系列  | 芯片型号   | 适用板卡     |\n| --------------------- | --------- | --------  | ----------- |\n| GW1NZ-LV1QN48C6/I5    | GW1NZ     |GW1NZ      | Nano 1K     |\n| GW1NSR-LV4CQN48PC6/I5 | GW1NSR    |GW1NSR-4C  | Nano 4K     |\n| GW1NR-LV9QN88PC6/I5   | GW1NR     |GW1NR-9C   | Nano 9K     |\n| GW2AR-LV18QN88PC8/I7  | GW2AR     |GW2AR-LV18 | Nano 20K    |\n| GW2A-LV18PG256C8/I7   | GW2A      |GW2A-18C   | Primer 20K  |\n\n所以对于购买了 Tang Nano （板载 jtag 芯片为 CH552），目前需要使用商业版的 IDE 且需要自行向高云半导体官方申请 license。\n\n### 开始安装\n\n#### Linux 系统\n\nLinux 版本的解压后里面存在着一个 bin 文件夹，然后可执行文件 `gw_ide` 就在所解压路径的 /IDE/bin/ 文件夹中，用命令行来运行即可；运行软件失败的话记得改软件的可执行权限 `chmod + x`。\n\n#### Windows 系统\n\n下载相应的 IDE 之后所得到的是一个压缩包程序；对于 Windows 版本的解压后里面是一个可执行程序，双击安装继续下面的步骤就行。下面的所有安装步骤均为 Windows 平台：\n\n<div class=\"imbox\">\n    <img src=\"./assets/IDE-2.png\" width=45%>\n    <img src=\"./assets/IDE-3.png\" width=45%>\n</div>\n\n下图的两个都需要安装上。其中的 Gowin 为 IDE 本体， 另一个 programmer 相关的是烧录软件。\n\n因为我们的下载器与 IDE 附带安装的 Programmer 可能不太兼容，使用中有问题的话可以前往 <a href=\"./../questions.html#下载失败\" target=\"blank\">programmer 相关里的下载失败</a> 来查看对应方法。\n\n<!-- 由于我们所提供下载器会与新版的 IDE 不太兼容，因此建议前往 <a href=\"./../questions.html#下载失败\" target=\"blank\">programmer 相关里的下载失败</a> 来查看对应方法。 -->\n\n<img src=\"./assets/IDE-4.png\" width=50%>\n\n下图的安装路径个人按照自己需要设置\n  \n<img src=\"./assets/IDE-5.png\" width=50%>\n\n安装中...\n\n<img src=\"./assets/IDE-6.png\" width=50%>\n\n下面这一步不要更改任何东西，按照默认的点击`Finish`就行，紧接着就是安装相关的驱动\n\n<img src=\"./assets/IDE-7.png\" width=50%>\n\n上面的`Finish`后会出现下面的内容，这是安装驱动的。\n\n<html>\n<div class=\"imbox\">\n    <img src=\"./assets/IDE-8.png\" width=45%>\n    <img src=\"./assets/IDE-9.png\" width=45%>\n</div>\n</html>\n\n这里需要选择接受协议才能继续安装\n  \n<html>\n<div class=\"imbox\">\n    <img src=\"./assets/IDE-10.png\" width=45%>\n    <img src=\"./assets/IDE-11.png\" width=45%>\n</div>\n</html>\n\n点击完成后桌面上会出现下面的图标\n  \n![IDE](./assets/IDE-12.png)\n\n到这里我们就完成了软件的安装\n\n## 使用 IDE\n\n### license 相关\n\n教育版本的 IDE 直接运行即可；商业版的 IDE 需要自行前往 [点我](http://www.gowinsemi.com.cn/faq_view.aspx) 申请 license 后才能使用，其中申请license 时 MAC 最好填写本机的以太网网卡地址，避免以后可能因部分设置而导致 MAC 地址改变 license 验证失败。\n\n### 验证 license\n\n打开高云半导体 IDE 的时候，在弹出的 license 管理中，选择自己本地 license 的文件，验证保存即可。\n\n<img src=\"./assets/IDE-13.png\" alt=\"Broswer lic\" width=45%>\n<img src=\"./assets/check.png\"  alt=\"Check lic\"   width=45%>\n\n然后就可以开始使用高云半导体 IDE 了。\n\n### Programmer\n\n<!-- 在烧录 FPGA 的时候可能因为安装 IDE 时所安装的 Programmer 软件不兼容我们所提供的下载器，因此对于 Windows 用户要求使用我们所提供的特定版本的 Programmer 软件，[点我](https://dl.sipeed.com/shareURL/TANG/programmer)跳转下载即可； -->\n\n如果下载固件失败的话，可以手动下载一下 Programmer 软件来试试 [跳转地址](https://dl.sipeed.com/shareURL/TANG/programmer)\n\n![programmer_download](./assets/programmer_download.png)\n\n对于 Linux 用户可以用 Openfpgaloader, 查看本页最底部的相关说明即可。\n\n## 拓展\n\n获取 license 可能需要等待一段时间。在此期间可以看看高云半导体的官方文档。下面简单说明一下：\n\n在 IDE 的安装路径下主要有如下内容：IDE 文件夹、Programmer 文件夹、uninst.exe；\n\n![ide_folder](./assets/ide_folder.png)\n\n**IDE** 文件夹：这里主要说一下里面的 **doc** 文件夹，用户在安装完之后可以在这个文件夹里面看到高云提供的大多数文档高云半导体，主要内容如下图所示：\n\n![IDE](./assets/doc-folder.png)\n\n**Programmer** 文件夹：里面是烧录软件，也有相关的文档。\n\n![programmer](./assets/programmer-folder.png)\n\n**uninst.exe**：卸载IDE\n\n<!-- ## 其他安装方法\n\n下面是高云半导体官方所提供的 IDE 安装方法，有需要的话可以自行查阅\n\n+ [高云半导体软件简介和安装](http://cdn.gowinsemi.com.cn/%E9%AB%98%E4%BA%91%E8%BD%AF%E4%BB%B6%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85.pdf) -->\n\n## Burn in linux\n\n[Linux系统下烧录方法](./flash_in_linux.html)"}, "/hardware/zh/tang/Tang-Nano-Doc/get_started/flash_in_linux.html": {"title": "Linux 下烧录方法", "content": "---\ntitle: Linux 下烧录方法\nkeyeords: Linux, FPGA, Gowin\n---\n\n在Ubuntu系统下我们建议使用**openFPGALoader**烧写，其他发行版尚未验证。以下为具体步骤\n\n### 安装openFPGALoader\n\n参考：https://trabucayre.github.io/openFPGALoader/guide/install.html\n\n直接在linux命令行执行下面命令即可\n\n```bash\n# preprocess\nsudo apt-get install libftdi1-2 libftdi1-dev libhidapi-hidraw0 libhidapi-dev libudev-dev zlib1g-dev cmake pkg-config make g++\n# compile\ngit clone https://github.com/trabucayre/openFPGALoader.git\ncd openFPGALoader\nmkdir build\ncd build\ncmake ../ # add -DBUILD_STATIC=ON to build a static version\n          # add -DENABLE_UDEV=OFF to disable udev support and -d /dev/xxx\n          # add -DENABLE_CMSISDAP=OFF to disable CMSIS DAP support\ncmake --build .\n# or\n# make -j$(nproc)\n# install\nsudo make install\n```\n\n### 烧录方法\n检测板卡\n```bash\n$ sudo ./openFPGALoader --detect # 对于这行命令应当在你上一步执行make install的目录下执行 \n# 下面是正常执行后显示的log\nJtag frequency : requested 6.00MHz   -> real 6.00MHz\nindex 0:\n        idcode 0x100481b\n        manufacturer Gowin\n        family GW1N\n        model  GW1N(R)-9C\n        irlength 8\n\n\n```\n\n下载码流\n\n```bash\n$ sudo ./openFPGALoader -b tangnano9k -f ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs\n# 其中的 -b 表示目标板型号，具体可以参考下面表格\n# -f 表示下载到 flash，不加的话会下载到 sram 中\n# 最后的是需要烧录的文件，应该找到对应目录下的 .fs 文件\n# 下面是成功执行后的log\nwrite to flash\nJtag frequency : requested 6.00MHz   -> real 6.00MHz  \nParse file Parse ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs: \nDone\nDONE\nJtag frequency : requested 2.50MHz   -> real 2.00MHz  \nerase SRAM Done\nerase Flash Done\nwrite Flash: [==================================================] 100.00%\nDone\nCRC check: Success\n\n```\n\n其中-b表示目标板型，可以使用以下取值：\n\n| Board name | FPGA            | Memory | Flash                         |\n| ---------- | --------------- | ------ | ----------------------------- |\n| tangnano   | GW1N-1 QFN48    | OK     | Internal Flash                |\n| tangnano1k | GW1NZ-1 QFN48   | OK     | Internal Flash                |\n| tangnano4k | GW1NSR-4C QFN48 | OK     | Internal Flash/External Flash |\n| tangnano9k | GW1NR-9C QFN88  | OK     | Internal Flash/External Flash |"}, "/hardware/zh/tang/Tang-Nano-Doc/questions.html": {"title": "常见问题", "content": "---\ntitle: 常见问题\ntags: Tang\nkeywords: Programmer\ndesc: \nupdate:\n  - date: 2022-06-29\n    version: v0.1\n    author: wonder\n    content:\n      - 初次编写  \n  - date: 2022-09-23\n    version: v0.2\n    author: wonder\n    content:\n      - 更新部分过期内容\n  - date: 2022-10-19\n    version: v0.3\n    author: wonder\n    content:\n      - 增加设置顶层相关说明\n---\n\n这里汇总一些常见问题。\n\n## Programmer 相关\n\n**首先确定设备管理器里面有两个 converter，在进行下面的操作**\n\n![converter](./../assets/questions/converter.png)\n\n与上图中一样的话说明电脑与板子连接没问题；不存在的话请稍微等待数秒，可能电脑正在加载驱动；数秒后仍未显示出来 converter 请更换电脑别的 USB 接口或者重新安装驱动[点我跳转到驱动下载页面](https://dl.sipeed.com/shareURL/TANG/programmer)。\n\n### 下载频率\n\n要注意下载频率应该为 `2.5M` 或者更低的数值。不然很可能导致下载极其缓慢或者下载失败等问题。\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看操作步骤图片</font></summary>\n  <img src=\"./../assets/questions/cable.png\">\n  <p>点击下图中的 Frequency，设置频率小于或者等于 2.5MHz</p>\n  <img src=\"./../assets/questions/frequency.png\" >\n  <p>接着再点击 Save 即可</p>\n</details>\n\n### Error found\n\n没有扫描到下载器或者驱动错误，要求使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的压缩包文件。\n下载后解压替换掉 Gowin IDE 对应安装目录的 Programmer 文件夹即可。\n不会替换的话可以在下载解压后的 Programmer 程序中手动添加对应下载文件来进行烧录。\n\n替换下载器软件后出现这个问题的话，可以先重启一下 programmer 软件；\n\n### Cabel open failed\n\n![cable_open_failed](./assets/qusetions/cable_open_failed.png)\n\n这里的意思是没有找到下载器，可以尝试使用高云半导体所提供的最新的教育版的编程器 [点我跳转](http://www.gowinsemi.com.cn/faq.aspx) 来尝试解决老版本 Programmer 软件的 bug。\n\n使用新版本下载器后出现这个问题的话，可以先重启一下 programmer 软件；依旧没找到的话可以看看本篇开头的 converter 相关的内容。\n\n<!-- 可以尝试使用要求使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的文件来解决无法正常烧录问题 -->\n\n![educational_edition_programmer](./../tang-primer-20k/assets/start/educational_edition_programmer.png)\n\n<!-- 参考上一步 No Gowin devices found 的操作后，再 programmer 里面进行下面操作：\n\n点击顶部菜单栏的 Edit->Cable Setting->Cable->Query，然后 Save 即可\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看操作步骤图片</font></summary>\n  <img src=\"./../assets/questions/cable.png\">\n  <p>点击下图中的 Query</p>\n  <img src=\"./../assets/questions/click_query.png\" >\n  <p>接着再点击 Save 即可</p>\n</details> -->\n\n### No Gowin devices found\n\n![no_gowin_device_found](./assets/qusetions/no_gowin_device_found.png)\n\n这里指的是没有扫描到高云设备，可以尝试使用高云半导体所提供的最新的教育版的编程器 [点我跳转](http://www.gowinsemi.com.cn/faq.aspx) 来尝试解决老版本 Programmer 软件的 bug。\n\n![educational_edition_programmer](./../tang-primer-20k/assets/start/educational_edition_programmer.png)\n\n20K Dock 套件要注意拨动拨码开关使能核心板后，下载软件才可以通过底板识别到底板所插入的核心板。\n\n| 使能核心板 | 未使能状态 | 补充说明 |\n| --- | --- | --- |\n|<img src=\"./../tang-primer-20k/assets/start/switch_1_on.png\" alt=\"switch_1_on\" width=100%>|<img src=\"./../tang-primer-20k/assets/start/reset_led_on.png\" alt=\"reset_led_on\" width=100%> | 未使能核心板的话板子上的 0、1 号 LED 会一直亮着，且核心板不会正常启动。|\n\n单独使用 20K 核心板和 RV Debugger Plus 下载器来下载固件出现这个错误时，可能是接线错了，自己根据下面的表格检查一下线序，或者检查一下核心板的 8pin 接口有没有被怼歪（有一次连接失败，发现是引脚歪了然后连接不上下载器了；不要大力出奇迹）。\n\n20K 核心板 JTAG 引脚定义可以在背部看到。\n\n<table>\n    <tr>\n        <td>核心板</td>\n        <td>5V0</td>\n        <td>TMS</td>\n        <td>TDO</td>\n        <td>TCK</td>\n        <td>TDI</td>\n        <td>RX</td>\n        <td>TX</td>\n        <td>GND</td>\n    </tr>\n    <tr>\n        <td>调试器</td>\n        <td>5V0</td>\n        <td>TMS</td>\n        <td>TDO</td>\n        <td>TCK</td>\n        <td>TDI</td>\n        <td>TX</td>\n        <td>RX</td>\n        <td>GND</td>\n    </tr>\n</table>\n\n![cable_connect](./../tang-primer-20k/examples/assets/led_assets/cable_connect.png)\n\n对于 20K 板卡来说可能是因为 JTAG 复用而导致主控芯片的 JTAG 引脚不再能被调试，[点我](./../tang-primer-20k/primer-20k.html#dock-底板不工作)来查看相应解决办法\n\n### ID code mismatch\n\n![id_code_mismatch](./assets/qusetions/id_code_mismatch.png)\n\n这种情况是工程文件设置的芯片与实际下载芯片型号不一致而造成的。\n\n重新设置工程中的芯片型号（比如工程设置、引脚约束、各个IP中的型号）。\n\n| 板卡型号 | 芯片系列 | 芯片设备 | 封装 | 速度等级 |\n| --- | --- | --- | --- | --- |\n| Tang Nano | GW1N | GW1N-1 | QFN48 | C6/I5 |\n| Tang Nano 1K | GW1NZ | GW1NZ-1 | QFN48 | C6/I5 |\n| Tang Nano 4K | GW1NSR | GW1NSR-4C | QFN48P | C6/I5 或者 C7/I6 |\n| Tang Nano 9K | GW1NR | GW1NR-9C | QFN88P | C6/I5 |\n| Tang Primer 20K | GW2A | GW2A-18C | PBGA256 | C8/I7 |\n\n<!-- <details>\n  <summary><font color=\"#4F84FF\">点开查看正确型号选择</font></summary>\n  <p>Nano 9K 应当选择的型号</p>\n  <img src=\"./../Tang-Nano-9K/nano_9k/Tang_nano_9k_Device_choose.png\" width=45%>\n  <p>Primer 20K 应当选择的型号</p>\n  <img src=\"./assets/primer_20k_device_choose.png\" width=45%>\n</details> -->\n\n<!-- 对于其他板子选择型号的时候与芯片丝印相对应就行。 -->\n\n### spi flash selected mismatch\n\n以高云半导体小蜜蜂（芯片名称以 GW1N 开头的系列）家族芯片为主控的板卡芯片内部含有 FLASH，因此下载的时候将生成的固件烧录到芯片内部即可，将板载的 FLASH 芯片当作外设使用。\n\n以高云半导体晨熙（芯片名称以 GW2A 开头的系列）家族芯片为主控的板卡芯片内部无有 FLASH，因此下载的时候将生成的固件烧录到外部 FLASH，对此在 Programmer 界面所进行的下载模式与 FLASH 选择如下：\n\n<table>\n  <tr>\n    <td rowspan=\"2\"><img src=\"./../tang-primer-20k/examples/assets/led_assets/flash_mode.png\" alt=\"flash_mode\"></td>\n    <td style=\"white-space:nowrap\">操作（Operation）为 <br><code>exFlash Erase,Program thru GAO-Bridge</code></td>\n  </tr>\n  <tr>\n    <td>Flash 型号选择为 <code>Generic Flash</code></td>\n  </tr>\n</table>\n\n### 下载卡住、下载非常慢\n\n不要选中带有 Verify 选项的。\n\n![never_choose_verify](./../assets/questions/never_choose_verify.png)\n\n另外自己注意设置一下下载频率，一般设置为 2.5MHZ 不会有异常\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看操作步骤图片</font></summary>\n  <img src=\"./../assets/questions/cable.png\">\n  <p>点击下图中的 Frequency</p>\n  <img src=\"./../assets/questions/frequency.png\" >\n  <p>接着再点击 Save 即可</p>\n</details>\n\n### 找不到下载文件\n\n一般来说生成的下载文件（拓展后缀为.fs）在工程目录下的 impl/pnr 文件夹里面。\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看相关图文说明</font></summary>\n  <img src=\"./../assets/questions/fs_path.png\">\n  <p> 在上图中可以看到这个下载文件的路径为 /fpga_project1/impl/pnr/fpga_project1.fs </p>\n  <p></p>\n  <p> 其中 fpga_project1 为工程目录，impl 为 IDE 生成的目录，然后所需要的文件位于 pnr 文件夹内</p>\n  <p></p>\n  <p> 然后那个拓展名为 .fs 的文件就是下载到 fpga 的固件</p>\n</details>\n\n### 烧录结束后没反应\n\n一般这种情况是没有选择正确的烧录文件。可以自己先对应着各个板子点灯文档里所选择的芯片型号来检查一下自己的工程，然后看看自己的代码是否有问题。对于 20K 板卡来说可能是因为 JTAG 复用而导致主控芯片的 JTAG 引脚不再能被调试，[点我](./../tang-primer-20k/primer-20k.html#dock-底板不工作)来查看相应解决办法\n\n## IDE 使用相关\n\n### 查看IP文档\n\n在 IDE 里面的 IP 界面点击想要查看的 IP 文档后点击对应的语言即可跳转到对应的说明\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看相关说明</font></summary>\n    <img src=\"./../assets/ip-reference.png\">\n</details>\n\n### 修改设置过的 IP\n\n在 IDE 里面的 IP 界面点击上方器件选型旁边的文件夹后打开已生成 IP 编辑界面\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看相关说明</font></summary>\n    <img src=\"./../assets/ip-reconfigure.png\">\n</details>\n\n### 设置 TOP 层\n\n对于含有多个模块的工程，成功例化后，在 IDE -> Hierarchy 页面右键想要设置为顶层的模块，然后选择 `Set As Top Module` 将它设置为顶层模块了。\n\n![set_top_module](./assets/set_top_module.png)\n\n如果在 Hierarchy 页面出现下下表左图现象，这表明代码里有逻辑错误，比如 语法错误、例化错误 等等，点击右上角的 `RTL Anakysis Error` ，就可以在弹出的对话框里看到错误的类型代码以及错误的位置，如下表右图所示。\n\n<table>\n<tr>\n<td align=\"center\">RTL Analysis Error</td>\n<td align=\"center\">错误类型以及详情</td>\n</tr>\n<tr>\n<td><img src=\"./assets/top_error.png\" alt=\"top_module_error\" ></td>\n<td><img src=\"./assets/error_detail.png\" alt=\"error_detail\"  ></td>\n</tr>\n</table>\n\n### 使用 GAO\n\nGAO 是高云半导体在线逻辑分析仪（Gowin Analyzer Oscilloscope）。安装高云 IDE 之后就能在对应的安装相对路径下看到相关文档了\n\n![gao](./../assets/questions/gao.png)\n\n使用高云半导体所提供的最新的教育版的编程器 [点我跳转](http://www.gowinsemi.com.cn/faq.aspx) 能够正常使用 GAO（因为 GAO 必须在 IDE 内才能打开，所以你需要自己替换掉安装时候的 Programmer 文件夹，并且确定替换后的路径与之前的相同）。\n\n![educational_edition_programmer](./../tang-primer-20k/assets/start/educational_edition_programmer.png)"}, "/hardware/zh/tang/Tang-Nano-4K/examples/LED.html": {"title": "Nano 4K 点灯", "content": "---\ntitle: Nano 4K 点灯\n---\n\n> 编辑于2022年3月31日\n\n- 点灯简单示例\n\n## 新建项目\n\n新建工程：File-->NEW-->FPGA Design Project-->OK\n    ![](./../../Tang-Nano/assets/LED-1.png)\n\n弹出的选项框选择存储路径和工程名称（路径和文件名称要求是英文路径）\n    ![](./../../Tang-Nano/assets/LED-2.png)\n\n选择对应的型号：\n    ![Tang_nano_4k_device_choose](./../assets/Nano_4K_device_choose.png)\n\n- 可能有部分板子主控芯片型号为 C7/I6 ，用户自行选择一下即可\n\n## 编写代码\n\n新建工程之后接下来进行代码编辑，在Design工作栏内新建“Verilog File”,如下图所示：\n    ![](./../../Tang-Nano/assets/LED-5.png)\n\n为文件命名（要求写英文名，不然后续综合很容易报错）；\n   一般来说文件名称应该和文件内容模块名称相同\n    ![](./../../Tang-Nano/assets/LED-6.png)\n\n双击文件，可以在右侧的编辑框中进行代码的编写。\n    ![](./../../Tang-Nano/assets/LED-7.png)\n\n以点灯为例，将下方的 示例代码 粘贴到自己的文件中，也可以自己编写自己的代码。\n\n```verilog\nmodule led (\n    input   sys_clk,\n    input   sys_rst_n,     // reset input\n    output  reg led        // LED\n);\n\nreg [23:0] counter;        //定义一个变量来计数\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin // Counter block\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1349_9999)       // 0.5s delay\n        counter <= counter + 1'b1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin // Toggle LED\n    if (!sys_rst_n)\n        led <= 1'b1;\n    else if (counter == 24'd1349_9999)       // 0.5s delay\n        led <= ~led;                         // ToggleLED\nend\n\nendmodule\n\n```\n\n## 综合、约束、布局布线\n\n### 综合\n\n保存编辑的代码后转到“Process”界面下，对编辑好的代码进行综合，即双击“Synthesize”\n    ![](./../../Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\n运行之后如没有报错而且 Synthesize 变成下图里的图标\n    ![](./../../Tang-Nano/assets/LED.png) \n\n说明前面编辑的代码无误；如果有错，根据错误提示进行改正即可。\n\n### 约束\n\n- 此处未涉及时钟约束\n\n想让 Fpga 实现代码的功能，必须将代码中涉及的 端口 绑定到 Fpga 实际的引脚上。\n\n如下图，在左边的工作区点击 process，然后双击 FloorPlanner\n\n![](./../../assets/examples/led_pjt_2.png)\n\n在工程中第一次点击，可能会提示说创建文件，点击确定即可\n![](./../../Tang-Nano/assets/LED-9.png)\n\nnano 4k的rgb led电路图如下所示\n    ![](./../assets/LED_Pin.png \"nano 4k rgb pins\")\n\n| port      | I/O    | pin | desc       |\n| --------- | ------ | --- | ---------- |\n| sys_clk   | input  | 45  | 时钟输入脚 |\n| sys_rst_n | input  | 15  | 系统复位脚 |\n| led       | output | 10  | 红灯       |\n\n对于交互式管脚约束有下图中的两种方法\n- 将对应的端口拖拽到芯片引脚上\n- 在IO约束中输入端口对应的引脚编号\n\n因此对应在管脚约束里的内容应该如下图\n  \n![Led floorplanner](./../assets/LED_FloorPlanner.png)\n\n关于 FloorPlanner 更多的相关说明，可以参考 [SUG935-1.3_Gowin设计物理约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG935-1.3_Gowin%E8%AE%BE%E8%AE%A1%E7%89%A9%E7%90%86%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)。里面的内容都很有用\n\n完成之后记得保存一下\n\n- LED对应的IO10默认是mode Pin，无法直接约束，需要在顶部菜单栏\nProject -> Configuration ->Palse&Route -> Dual-Purpose Pin,\n勾选 Use MODE as regular IO,如下图\n\n<img src=\"./../tang/assets/../../../assets/Nano-4K/4K-led-2.png\" alt=\"image-20210810161934170\" style=\"zoom:50%;\" />\n\n\n### 布局布线\n\n- 完成脚约束后，接下来进行布局布线操作。\n\n![Place&&Route](./../assets/Place&Route.png)\n\n> 失败的话请从头再来一遍\n\n## 烧录到开发板\n\n- 成功完成上面步骤后就已经生成高云半导体的比特流文件了，可以进行下面的步骤来将文件烧录到板子了。\n\n接下来是连接板子，烧录固件，可参照下图选择版型：\n![](./../assets/nano_4k_device_scan.png)\n\n在Process界面双击`Program Device` 后打开烧录工具\n    ![](./../assets/Open_Programmer.png)\n\n\n接下来选择 SRAM下载 即可验证程序。有固化需求的自行选择烧录到flash\n    ![](./../assets/Programmer_device.png)\n\n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-4K/examples/HDMI.html": {"title": "", "content": ""}, "/hardware/zh/tang/Tang-Nano-4K/Nano-4K.html": {"title": "Tang Nano 4K ", "content": "# Tang Nano 4K \n\n## Tang Nano 4K 开发板\n\nTang Nano 4K是基于[高云半导体](http://www.gowinsemi.com.cn/)的小蜜蜂系列 GW1NSR-LV4C 设计的简约型开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载Type-C、USB-JTAG、DVP、HDMI座子及其电路等，并把所有IO资源引出，方便开发者拓展使用，非常适用于小型数字逻辑的设计和实验。\n\n![Tang Nano 4K](./../Tang-Nano/assets/4k-1.jpg)\n![Tang Nano 4K](./../Tang-Nano/assets/4k-2.jpg)\n\n## 产品参数\n\nTang Nano 4K开发板板载的GW1NSR-LV4C，是一款系统级封装芯片，内部集成了GW1NS系列可编辑逻辑器件产品和PSRAM存储芯片。\n\n- 下表为与前代同系列产品对比图\n\n| 型号             | Tang Nano           | Tang Nano 4K      |\n| ---------------- | ------------------- | ----------------- |\n| FPGA芯片         | GW1N-1-LV           | GW1NSR-LV4C       |\n| 逻辑单元         | 1152                | 4608              |\n| 寄存器           | 864                 | 3456              |\n| 硬核处理器       | 无                  | Coetex M3         |\n| Block SRAM(bits) | 72K                 | 180K              |\n| 用户闪存(bits)   | 96K                 | 256K              |\n| 锁相环PLL        | 1                   | 2                 |\n| I/O Bank 总数    | 4                   | 4                 |\n| 最多用户I/O数    | 41                  | 44                |\n| 显示屏接口       | 标准40P RGB LCD接口  | HDMI接口          |\n| 摄像头接口       | None                | 常见的DVP顺序接口 |\n| 尺寸             | 58.4mm\\*21.3mm      | 60mm\\*22.86mm     |\n| 下载接口         | USB Type-C接口      | USB Type-C接口    |\n\n### 引脚图\n\n![Pinmap](./../Tang-Nano/assets/Tang_nano_4K_0813.png)\n\n## 开发环境\n\n特别注意：\n使用ide的时候版本需要>= v1.9.7.01 Beta；烧录软件要求使用我们所提供的 [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer)\n- 安装IDE的方法[参考](./../Tang-Nano-Doc/get_started/install-the-ide.html)\n\n## 下载方式\n\nTang Nano 4K 开发板板载 BL702 芯片，为 GW1NSR-4C 提供 JTAG 调试功能，开发板可以直接连接电脑使用 [GOWIN programmer](https://dl.sipeed.com/shareURL/TANG/programmer) 进行下载比特流，不需要额外准备下载器。\n\n## 资料\n\n- [相关例程](./../Tang-Nano-Doc/examples.html)\n- [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/02_Schematic)\n- [Tang Nano 4K 资料库](https://dl.sipeed.com/shareURL/TANG/Nano%204K)\n\n## 补充\n\n1. 如果有什么疑问，欢迎加群 `834585530`, 或者去[论坛](bbs.sipeed.com)发帖。\n2. 下载 FPGA 是要求使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件。不然有极大概率不能下载固件到板子。\n3. 有问题的话先去 [常见问题](./../Tang-Nano-Doc/questions.html) 自查，通常来说使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件能解决 99% 问题。\n4. 对于 Cortex-M3 硬核建议使用串口来打印调试信息来纠错，或者有能力的可以选择其他方式。"}, "/hardware/zh/tang/Tang-Nano-4K/Tang-nano-4k.html": {"title": "Tang nano 4k 一些例程", "content": "---\ntitle: Tang nano 4k 一些例程\n---\n\n对于Programmer(下载程序)建议使用 https://dl.sipeed.com/shareURL/TANG/programmer 里面的文件。\n下载后解压替换掉Gowin对应安装目录的Programmer文件夹即可。\n不会替换的话可以在下载解压后的Programmer程序中手动添加对应下载文件来进行烧录。\n\n参考工程[git仓库](https://github.com/sipeed/TangNano-4K-example)\n\n接好摄像头和HDMI显示器之后，将这个工程烧录到开发板上可以看到相应的现象。\n\n- [点灯例程](./examples/LED.html)\n- HDMI显示工程：https://github.com/sipeed/TangNano-4K-example/tree/main/dk_video/project\n- 摄像头内容显示在HDMI工程：https://github.com/sipeed/TangNano-4K-example/tree/main/dk_video/project\n- Cortex-m3点灯：待更新\n- Cortex-m3串口通信：待更新\n- 其他（有什么想法可以提出来，合适的话会被采纳）"}, "/hardware/zh/tang/Tang-Nano-1K/examples/led/github_sourcecode.html": {"title": "使用github例程", "content": "---\ntitle: 使用github例程\n---\n\n- 首先获得仓库文件 https://github.com/sipeed/TangNano-1K-examples\n\n- 打开 TangNano-1K-examples\\example_led\\led_prj 目录下的 led_prj.gprj 文件\n  \n- 在process界面直接双击  Place&Route\n    ![](./assets/github_nano1K_place&route.png)\n    \n- 然后是进行连接板子，烧录固件。在Process界面双击`Program Device` 后打开烧录工具\n    ![](./assets/Open_Programmer_nano_1k.png)\n\n- 接下来选择sram烧录即可验证程序。\n    ![](./assets/Success_led_nano_1k.png)\n\n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-1K/examples/led/self_create.html": {"title": "点灯LED RGB", "content": "---\ntitle: 点灯LED RGB\n---\n\n> 编辑于2022年4月13日\n\n## 新建项目\n\n新建工程：File-->NEW-->FPGA Design Project-->OK\n    ![](./../../../Tang-Nano/assets/LED-1.png)\n\n弹出的选项框选择存储路径和工程名称（路径和文件名称要求是英文路径）\n    ![](./../../../Tang-Nano/assets/LED-2.png)\n\n选择对应的型号：\n    ![Tang_nano_1k_device_choose](./../../assets/Nano_1K_device_choose.png)\n\n## 编写代码\n\n新建工程之后接下来进行代码编辑，在Design工作栏内新建“Verilog File”,如下图所示：\n    ![](./../../../Tang-Nano/assets/LED-5.png)\n\n为文件命名（要求写英文名，不然后续综合很容易报错）；\n   一般来说文件名称应该和文件内容模块名称相同\n    ![](./../../../Tang-Nano/assets/LED-6.png)\n\n双击文件，可以在右侧的编辑框中进行代码的编写。\n    ![](./../../../Tang-Nano/assets/LED-7.png)\n\n以流水灯为例，将下方的“LED例程代码”粘贴到自己的文件中，也可以自己编写自己的代码。\n\n```verilog\nmodule led (\n    input sys_clk,          // clk input\n    input sys_rst_n,        // reset input\n    output reg [2:0] led    // 110 B, 101 G,001 R\n);\n\nreg [23:0] counter;\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1349_9999)       // 0.5s delay\n        counter <= counter + 1'b1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 3'b110;\n    else if (counter == 24'd1349_9999)       // 0.5s delay\n        led[2:0] <= {led[1:0],led[2]};\n    else\n        led <= led;\nend\n\nendmodule\n\n ```\n\n## 综合、约束、布局布线\n\n### 综合\n\n保存编辑的代码后转到“Process”界面下，对编辑好的代码进行综合，即双击“Synthesize”\n    ![](./../../../Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\n运行之后如没有报错而且 Synthesize 变成下图里的图标\n    ![](./../../../Tang-Nano/assets/LED.png) \n\n说明前面编辑的代码无误；如果有错，根据错误提示进行改正即可。\n\n### 约束\n\n- 此处未涉及时钟约束\n\n想让 Fpga 实现代码的功能，必须将代码中涉及的 端口 绑定到 Fpga 实际的引脚上。\n如下图，在左边的工作区点击 process，然后双击 FloorPlanner\n   ![](./../../assets/examples/led_pjt_2.png)\n   \n在工程中第一次点击，可能会提示创建文件，点击确定即可\n   ![](./../../../Tang-Nano/assets/LED-9.png)\n\nnano 1k的rgb led电路图如下所示\n    ![](./../../assets/Nano_1K_RGB_pins.png \"nano 1k rgb pins\")    \n\n对于交互式管脚约束有下图中的两种方法\n- 将对应的端口拖拽到芯片引脚上\n- 在IO约束中输入端口对应的引脚编号\n\n因此在打开的界面中按照序号的顺序来进行相应的操作（两种方式选择一种即可）\n    ![](./../../assets/RGB_LED_Constrains.png)\n\n关于 FloorPlanner 更多的相关说明，可以参考 [SUG935-1.3_Gowin设计物理约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG935-1.3_Gowin%E8%AE%BE%E8%AE%A1%E7%89%A9%E7%90%86%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)。里面的内容都很有用\n\n**完成约束后记得保存~**\n\n\n### 布局布线\n\n到“Process”下运行“Place&Route”，即运行管脚布局布线，运行结果如下图所示：\n    ![](./../../assets/RGB_LED_Place&Route.png)\n\n如果没有成功运行，那自己修修。\n\n## 烧录\n\n- 成功完成上面步骤后就已经生成高云半导体的比特流文件了，可以进行下面的步骤来将文件烧录到板子了。\n\n接下来是连接板子，烧录固件。在Process界面双击`Program Device` 后打开烧录工具\n    ![](./../../assets/Open_Programmer.png)\n\n可以从下面的图中选择烧录模式；再此以烧录到SRAM作为示例\n![](./../../../Tang-Nano/examples/led/assets/tang-nano-programmer-config.png)\n\n接下来选择运行即可验证程序。有固化需求的自行选择下载到flash即可。\n\n点灯验证到此结束。\n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-1K/examples/led/lcd_constrains.html": {"title": "", "content": "---\ntitle: LCD 约束文件内容\n```\nIO_LOC \"LED_B\" 10;\nIO_PORT \"LED_B\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LED_G\" 11;\nIO_PORT \"LED_G\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LED_R\" 9;\nIO_PORT \"LED_R\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[4]\" 24;\nIO_PORT \"LCD_B[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[3]\" 23;\nIO_PORT \"LCD_B[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[2]\" 22;\nIO_PORT \"LCD_B[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[1]\" 20;\nIO_PORT \"LCD_B[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[0]\" 19;\nIO_PORT \"LCD_B[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[5]\" 18;\nIO_PORT \"LCD_G[5]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[4]\" 17;\nIO_PORT \"LCD_G[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[3]\" 16;\nIO_PORT \"LCD_G[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[2]\" 15;\nIO_PORT \"LCD_G[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[1]\" 27;\nIO_PORT \"LCD_G[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[0]\" 28;\nIO_PORT \"LCD_G[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[4]\" 29;\nIO_PORT \"LCD_R[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[3]\" 30;\nIO_PORT \"LCD_R[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[2]\" 31;\nIO_PORT \"LCD_R[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[1]\" 34;\nIO_PORT \"LCD_R[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[0]\" 35;\nIO_PORT \"LCD_R[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_DEN\" 21;\nIO_PORT \"LCD_DEN\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_SYNC\" 32;\nIO_PORT \"LCD_SYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_HYNC\" 33;\nIO_PORT \"LCD_HYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_CLK\" 8;\nIO_PORT \"LCD_CLK\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"XTAL_IN\" 47;\nIO_PORT \"XTAL_IN\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\nIO_LOC \"nRST\" 44;\nIO_PORT \"nRST\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\nIO_LOC \"KEY\" 13;\nIO_PORT \"KEY\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\n\n```"}, "/hardware/zh/tang/Tang-Nano-1K/examples/LED.html": {"title": "点灯", "content": "# 点灯\n\n> 编辑于2022年3月29日\n\n## 前言\n此处提供两种方法点灯\n对于文章中有什么疑问或者错误的地方欢迎到 [论坛](https://bbs.sipeed.com) 或 QQ群 提出\n- [使用github仓库](./led/github_sourcecode.html)\n- [自己新建项目](./led/self_create.html)  \n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-1K/examples/LCD.html": {"title": "RGB LCD 示例", "content": "---\ntitle: RGB LCD 示例\n---\n\n> 编辑于2022年3月30日\n\n## 先介绍时序\n\nRGB LCD 显示协议和 VGA 类似，通信都有专用的行同步、场同步信号线。它们的主要区别是前者传输用的是数字信号，后者传输走的是模拟信号。\n\n下面就介绍 VGA 的时序\n\n![](./../../assets/examples/lcd_pjt_1.png)\n\n上图分别是 VGA 在数据传输中的行同步、场同步时序\n\n从时序图中可以看出，不论是显示一行数据还是一列数据，都需要一个对应的同步(sync)信号，数据的传输在两个同步信号的脉冲之间完成\n\n每一行的数据包括显示前沿(back porch)、有效数据(active video)、显示后沿(front porch)三个阶段\n\n其中的有效数据就是我们常说的分辨率，而显示前后沿的参数需要参考具体的分辨率与帧数进行设置，相关参数可以参考典型参数，链接在此： http://www.tinyvga.com/vga-timing\n\n这块5寸屏幕的控制时序略有不同，相关参数的设置可以查看[规格书](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet/5.0inch_LCD_Datashet%20RGB.pdf)\n\n其他尺寸的屏幕相关规格书均可以在这里下载 [点我](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet)\n\n下面为这块 LCD 时序相关的截图\n\n![](./../../assets/examples/lcd_pjt_2.png)\n\n![](./../../assets/examples/lcd_pjt_3.png)\n\n上面一张图是时序中的参数表，下面的图是时序图\n\n从时序图中看出，这块屏幕可以不用设置前后沿，可以只设置消影(blanking)时间，通过实际的程序证明，两种方式都是可以的\n\n## 新建工程\n\n新建工程方法参考[自建点灯文章(点我)](./led/self_create.html)\n\n\n## 生成屏幕时钟\n\n- 这里需要用到高云半导体官方的IP核\n\n### pll\n\n板载的晶振时钟为 27MHz ，但是我们的屏幕要求 33.3MHZ 的时钟，所以我们需要使用相应的ip核来生成需要的时钟\n\n这里需要使用到 `IP Core Generate` ，位置在 Tools -> IP Core Generate\n\n![](./../assets/Gowin_IP_rpll.png)\n\n双击 `rpll` ，在弹出窗口 language 选择 Verilog ，CLKIN 为 27MHz ，CLKOUT 为  33.00MHz。\n\n![](./../assets/lcd_rpll.png)\n\n点击ok后提示是否需要添加到当前工程，此时应当选择确定\n  ![](./led/assets/add_ip_file_in_project.png)\n\n接着会出现一个例化的tmp文件，用来例化所设置的ip。比如下图中例子\n![](./../../Tang-Nano/examples/led/assets/ip_examples.png)\n\n## 屏幕驱动代码\n\n- **首先新建一个额外的verilog文件来保存下面要编写的代码**\n  \n### 端口定义\n\n首先需要先定义出驱动屏幕所需要的端口\n\n```verilog\nmodule VGAMod\n(\n    input                   CLK,\n    input                   nRST,\n\n    input                   PixelClk,\n\n    output                  LCD_DE,\n    output                  LCD_HSYNC,\n    output                  LCD_VSYNC,\n\n\toutput          [4:0]   LCD_B,\n\toutput          [5:0]   LCD_G,\n\toutput          [4:0]   LCD_R\n);\n```\n\n本例程使用RGB565作为驱动方式；\n\n### 时序常量\n\n接着定义出时序图上所要求的常量\n\n```verilog\nlocalparam      V_BackPorch = 16'd6; //0 or 45\nlocalparam      V_Pluse \t= 16'd5; \nlocalparam      HightPixel  = 16'd480;\nlocalparam      V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam      H_BackPorch = 16'd182; \t\nlocalparam      H_Pluse \t= 16'd1; \nlocalparam      WidthPixel  = 16'd800;\nlocalparam      H_FrontPorch= 16'd210;\n\nlocalparam      PixelForHS  =   WidthPixel + H_BackPorch + H_FrontPorch;  \t\nlocalparam      LineForVS   =   HightPixel + V_BackPorch + V_FrontPorch;\n```\n\n首先是设置时序相关的参数：前沿、后沿、有效像素\n\n关于显示前沿、后沿，前面也说了，可以合并为一个消影时间，就是可以把其中一个设置为0，另一个设置为消影时间。反正前后沿的时间加起来符合表中的时间要求就可以\n\n### 计数变量\n\n- 定义一些变量能够容易编写程序\n\n```verilog\n\nreg [15:0] LineCount;\nreg [15:0] PixelCount;\n\nreg\t[9:0]  Data_R;\nreg\t[9:0]  Data_G;\nreg\t[9:0]  Data_B;\n\n```\n\n### 同步信号\n\n这段代码产生同步信号，需要注意的是，这块屏幕的同步信号是负极性使能\n\n```verilog\n    always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n            LineCount       <=  16'b0;    \n            PixelCount      <=  16'b0;\n            end\n        else if(  PixelCount  ==  PixelForHS ) begin\n            PixelCount      <=  16'b0;\n            LineCount       <=  LineCount + 1'b1;\n            end\n        else if(  LineCount  == LineForVS  ) begin\n            LineCount       <=  16'b0;\n            PixelCount      <=  16'b0;\n            end\n        else\n            PixelCount      <=  PixelCount + 1'b1;\n    end\n\n   always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n\t\t\tData_R <= 9'b0;\n\t\t\tData_G <= 9'b0;\n\t\t\tData_B <= 9'b0;\n            end\n        else begin\n\t\t\tend\n\tend\n\n//注意这里HSYNC和VSYNC负极性\nassign  LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) ? 1'b0 : 1'b1;\nassign  LCD_VSYNC = ((( LineCount  >= V_Pluse )&&( LineCount  <= (LineForVS-0) )) ) ? 1'b0 : 1'b1;\n```\n\n### 使能信号\n\n这段代码设置 LCD 使能图像显示，这块屏幕需要控制一个管脚用作显示开关，实际这个信号就是传输图像有效的那 800*480 的数据时置 1\n  \n```verilog\nassign  LCD_DE = (  ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 ))  ? 1'b1 : 1'b0;\n                    //这里不减一，会抖动\n```\n\n### 测试彩条\n\n这段代码用来产生 LCD 的测试数据，产生彩条显示\n\n```verilog\nassign  LCD_R   =   (PixelCount<200)? 5'b00000 : \n                    (PixelCount<240 ? 5'b00001 :    \n                    (PixelCount<280 ? 5'b00010 :    \n                    (PixelCount<320 ? 5'b00100 :    \n                    (PixelCount<360 ? 5'b01000 :    \n                    (PixelCount<400 ? 5'b10000 :  5'b00000 )))));\n\nassign  LCD_G   =   (PixelCount<400)? 6'b000000 : \n                    (PixelCount<440 ? 6'b000001 :    \n                    (PixelCount<480 ? 6'b000010 :    \n                    (PixelCount<520 ? 6'b000100 :    \n                    (PixelCount<560 ? 6'b001000 :    \n                    (PixelCount<600 ? 6'b010000 :  \n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign  LCD_B   =   (PixelCount<640)? 5'b00000 : \n                    (PixelCount<680 ? 5'b00001 :    \n                    (PixelCount<720 ? 5'b00010 :    \n                    (PixelCount<760 ? 5'b00100 :    \n                    (PixelCount<800 ? 5'b01000 :    \n                    (PixelCount<840 ? 5'b10000 :  5'b00000 )))));\n```\n\n\n**当然在最后的驱动文件最后别忘记换行加上 endmodule** \n\n到这里驱动模块的编写已经完成了。\n\n## 在顶层模块中例化\n\n- **这里也是要新建文件的**\n\n```verilog\nmodule TOP //设置顶层模块\n(\n\tinput\t\t\tnRST,\n    input           XTAL_IN,\n\n\toutput\t\t\tLCD_CLK,\n\toutput\t\t\tLCD_HYNC,\n\toutput\t\t\tLCD_SYNC,\n\toutput\t\t\tLCD_DEN,\n\toutput\t[4:0]\tLCD_R,\n\toutput\t[5:0]\tLCD_G,\n\toutput\t[4:0]\tLCD_B\n\n); // 罗列需要的端口\n\n\twire\t\tCLK_SYS;\t\n\twire\t\tCLK_PIX;\n    \n    //例化pll\n    Gowin_rPLL chip_pll(\n        .clkout(CLK_SYS), //output clkout     //200M\n        .clkoutd(CLK_PIX), //output clkoutd   //33.00M\n        .clkin(XTAL_IN)    //input clkin\n    );\t\n\n\tVGAMod\tVGAMod_inst //例化vga驱动\n\t(\n\t\t.CLK\t\t(\tCLK_SYS     ),\n\t\t.nRST\t\t(\tnRST\t\t),\n\n\t\t.PixelClk\t(\tCLK_PIX\t\t),\n\t\t.LCD_DE\t\t(\tLCD_DEN\t \t),\n\t\t.LCD_HSYNC\t(\tLCD_HYNC \t),\n    \t.LCD_VSYNC\t(\tLCD_SYNC \t),\n\n\t\t.LCD_B\t\t(\tLCD_B\t\t),\n\t\t.LCD_G\t\t(\tLCD_G\t\t),\n\t\t.LCD_R\t\t(\tLCD_R\t\t)\n\t);\n\n\tassign\t\tLCD_CLK\t\t=\tCLK_PIX;\n\nendmodule\n```\n\n## 综合、约束、布局布线\n\n### 综合\n\n完成上面步骤后转到“Process”界面下，对编辑好的代码进行综合，即运行“Synthesize” \n![](./../../Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\n运行的结果如下图出现 \n![](./../../Tang-Nano/assets/LED.png) \n\n且下方结果栏不出现任何从报错，说明前面编辑的代码无误，如果有错，根据错误提示进行改正即可。\n\n### 约束 \n\n- 此处仅管脚约束\n\n对应的管脚约束如下表格；\n关于管脚约束可以参考[自建点灯文章(点我)](./led/self_create.html)里面的约束方法\n如果感觉麻烦的话也可以直接复制准备好的[文件(点我)](./lcd_constrains.html)，将页面里的内容复制到工程目录里 .cst 文件中（如果没有.cst 文件那么自己新建一个）**物理管脚约束文件** 即可。\n\n|   PORT   |  PIN  |   PORT   |  PIN  |\n| :------: | :---: | :------: | :---: |\n|  LED_B   |  10   |  LED_G   |  11   |\n|  LED_R   |   9   | LCD_B[4] |  24   |\n| LCD_B[3] |  23   | LCD_B[2] |  22   |\n| LCD_B[1] |  20   | LCD_B[0] |  19   |\n| LCD_G[5] |  18   | LCD_G[4] |  17   |\n| LCD_G[3] |  16   | LCD_G[2] |  15   |\n| LCD_G[1] |  27   | LCD_G[0] |  28   |\n| LCD_R[4] |  29   | LCD_R[3] |  30   |\n| LCD_R[2] |  31   | LCD_R[1] |  34   |\n| LCD_R[0] |  35   | LCD_DEN  |  21   |\n| LCD_SYNC |  32   | LCD_HYNC |  33   |\n| LCD_CLK  |   8   | XTAL_IN  |  47   |\n|   nRST   |  44   |          |       |\n\n\n### 布局布线\n\n管脚约束之后需要在设置里面开启引脚复用才能完成布局布线。\n具体位置在 软件顶部菜单栏 Project -> Configuration -> Place&Route -> Dual-Purpose Pin\n![](./led/assets/enable_io_mux.png)\n\n设置完上面的之后。\n就可以开始布局布线(Place&Route)了。\n完成后就可以给开发板验证代码内容了。\n\n## 烧录\n\n布局布线结束后生成比特流，就可以烧录开发板了。\n\n## 结束\n\n上面差不多叙述了所需要的代码。\n整个工程可以参考 [这里](https://github.com/sipeed/TangNano-1K-examples/tree/main/example_lcd/) \n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-1K/examples/lcd_constrains.html": {"title": "LCD constrain file content", "content": "---\ntitle: LCD constrain file content\n---\n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">Previous page</a>\n</p>\n\n```cst\nIO_LOC \"LCD_B[4]\" 24;\nIO_PORT \"LCD_B[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[3]\" 23;\nIO_PORT \"LCD_B[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[2]\" 22;\nIO_PORT \"LCD_B[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[1]\" 20;\nIO_PORT \"LCD_B[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[0]\" 19;\nIO_PORT \"LCD_B[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[5]\" 18;\nIO_PORT \"LCD_G[5]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[4]\" 17;\nIO_PORT \"LCD_G[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[3]\" 16;\nIO_PORT \"LCD_G[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[2]\" 15;\nIO_PORT \"LCD_G[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[1]\" 27;\nIO_PORT \"LCD_G[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[0]\" 28;\nIO_PORT \"LCD_G[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[4]\" 29;\nIO_PORT \"LCD_R[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[3]\" 30;\nIO_PORT \"LCD_R[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[2]\" 31;\nIO_PORT \"LCD_R[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[1]\" 34;\nIO_PORT \"LCD_R[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[0]\" 35;\nIO_PORT \"LCD_R[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_DEN\" 21;\nIO_PORT \"LCD_DEN\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_SYNC\" 32;\nIO_PORT \"LCD_SYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_HYNC\" 33;\nIO_PORT \"LCD_HYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_CLK\" 8;\nIO_PORT \"LCD_CLK\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"XTAL_IN\" 47;\nIO_PORT \"XTAL_IN\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\nIO_LOC \"nRST\" 44;\nIO_PORT \"nRST\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\n```\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-1K/Nano-1k.html": {"title": "Tang Nano 1K", "content": "# Tang Nano 1K\n\n## 概述\n\nTang Nano 1K 是基于高云半导体的小蜜蜂系列 GW1NZ-LV1 FPGA设计的简约型开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载Type-C、USB-JTAG、有源晶振、RGB(可接LCD屏、VGA等外设)等，并把所有IO资源引出，方便开发者拓展使用，非常适用于小型数字逻辑的设计和实验。\n\n![Nano-1](./../Tang-Nano/assets/1k-1.jpg)\n![Nano-2](./../Tang-Nano/assets/1k-2.jpg)\n\n## 参数\n\nTang Nano 1K 开发板板载的 GW1NZ-LV1 FPGA芯片功能非常强大，具有较丰富的逻辑资源，支持多种 I/O 电平标准，内嵌块状静态随机存储器、锁相环、Flash 等资源，是一款具有非易失性的 FPGA 产品;另外，板载 27MHz 有源晶振，为 FPGA 各种时序操作提供了更精准的频率。\n\n|       项目       |      参数      |\n| :--------------: | :------------: |\n|       核心       | GW1NZ-LV1 FPGA |\n|  逻辑单元(LUT4)  |      1152      |\n|    寄存器(FF)    |      864       |\n| Block SRAM(bits) |      72K       |\n|   B-SRAM块个数   |       4        |\n|  用户闪存(bits)  |      64K       |\n|    锁相环PLL     |       1        |\n|   I/O Bank总数   |       2        |\n|  最多用户I/O数   |       48       |\n|      核电压      |      1.2V      |\n\n### 引脚图\n\n![pin_map](./../Tang-Nano/assets/1k-pin.png)\n\n## 资料\n\n- [相关例程](./../Tang-Nano-Doc/examples.html)\n- [资料下载](https://dl.sipeed.com/shareURL/TANG/Nano%201K)\n- [原理图](https://dl.sipeed.com/shareURL/TANG/Nano%201K/2_Schematic)\n\n## 补充\n\n1. 如果有什么疑问，欢迎加群 `834585530`, 或者去[论坛](bbs.sipeed.com)发帖。\n2. 下载 FPGA 是要求使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件。不然有极大概率不能下载固件到板子。\n3. 有问题的话先去 [常见问题](./../Tang-Nano-Doc/questions.html) 自查，通常来说使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件能解决 99% 问题。"}, "/hardware/zh/tang/Tang-Nano-1K/Tang-nano-1k.html": {"title": "Tang nano 1k 一些例程", "content": "---\ntitle: Tang nano 1k 一些例程\n---\n\n\n对于Programmer(下载程序)建议使用 https://dl.sipeed.com/shareURL/TANG/programmer 里面的文件。\n下载后解压替换掉Gowin对应安装目录的Programmer文件夹即可。\n不会替换的话可以在下载解压后的Programmer程序中手动添加对应下载文件来进行烧录。\n\n\n- [点灯例程](./examples/LED.html)\n- [驱屏教程](./examples/LCD.html)"}, "/hardware/zh/tang/tang-primer-20k/examples/led.html": {"title": "Tang Primer 20K Dock 点一个灯", "content": "---\ntitle: Tang Primer 20K Dock 点一个灯\ntags: Tang Primer 20K Dock，上手\nkeywords: Primer, Tang, Dock， 入门，20K\ndesc: Tang Primer 20K Dock 简单上手\nupdate:\n  - date: 2022-09-21\n    version: v0.1\n    author: wonder\n    content:\n      - 初稿\n  - date: 2022-09-29\n    version: v0.2\n    author: wonder\n    content:\n      - 修复部分错误\n---\n\n对于软件开发来说，输出 `hello world` 就是入门了。对于硬件相关的开发而言，点灯就是同款入门。\n\n之前的点灯操作在 FPGA 里面都是简单的，困难的恰恰是时序优化等问题。\n\n<!-- \nDock 底板上有 6 个普通的 LED 可以自定义功能。用户可以使用这六个灯来组合成不同的状态来判断自己当前代码的运行情况，在此仅以最简单的流水灯为例，且对他进行简单的抓波。 -->\n\n## 安装 IDE\n\n参考 [安装IDE](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/get_started/install-the-ide.html) 来完成我们需要准备的软件环境。\n\nWindows 用户建议额外下载一次高云教育版的编程器软件，这样可以避免烧录时因为 Programmer 软件版本不兼容 BL702 下载器而导致的奇怪问题。\n\n对于 Linux 用户的话建议使用 [openfpgaLoader](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/get_started/flash_in_linux.html) 这软件来烧录这款设备。\n\n## 新建工程\n\n文件 -> 新建 -> FPGA Design -> Project\n\n<div>\n    <img src=\"./assets/led_assets/new_project.png\" width=58% alt=\"new_project\">\n    <img src=\"./assets/led_assets/fpga_project.png\" width=35% alt=\"fpga_project\">\n</div>\n\n设置工程名称，要求只用英文的下划线命名，存放路径中不要有中文字符或者空格等。\n\n![project_path](./assets/led_assets/project_path.png)\n\n然后在下面的芯片型号中选择 GW2A-LV18PG256C8/I7，使用上面的筛选能够更快地选择到正确的型号。注意 Device 那一栏为 GW2A-18C\n![device_choose](./assets/led_assets/device_choose.png)\n\n然后点击确定后就可以进行最终项目预览了。确认无误后就完成工程创建了。\n\n## 编写代码\n\n### 新建文件\n\n高云半导体 IDE 提供了三种新建文件的方法。在此我们直接使用快捷键 `Ctrl + N` 来新建文件，其他两种不在此讲述。\n\n在弹出的窗口中选择 `Verilog File`，会 VHDL 的也可以选择下面的 `VHDL File`，这篇文章只用 Verilog 来做点灯示例。\n\n<img src=\"./assets/led_assets/new_verilog_file.png\" width=50% alt=\"new_verilog_file\">\n    \n点击 OK 之后会提示让我们输入文件名称，此处以 `led` 为文件名做示范。\n\n<img src=\"./assets/led_assets/file_name.png\" width=75% alt=\"file_name\">\n\n到这里我们就完成文件的创建了，可以直接编写代码了。\n\n![created_file](./assets/led_assets/created_file.png)\n\n### Verilog 简单说明\n\nVerilog 是一种硬件描述语言，用来对数字电路进行抽象化描述。\n\nVerilog 的基本设计单元是“模块”(module)。\n\n一个模块是由两部分组成的：一部分描述接口，另一部分描述内部逻辑功能，即定义输入是如何影响输出的。\n\n一个模块长成这样：\n\n```v\nmodule module_name\n#(parameter)\n(port) ;\n    function   \nendmodule\n```\n\n模块整体结构由 module 和 endmodule 组成，module 后面跟着的是模块的名称(module_name)，可传递变量参数(parameter)，端口及其方向的申明(port)，紧接着就是内部逻辑功能描述(function) ,最后用 endmodule 来表示这一个模块，描述完毕。\n\n内部逻辑功能通常由 assign 和 always 块完成；其中 assign 语句描述逻辑功能，always 块常用于描述时序功能。\n\n### 阻塞赋值与非阻塞赋值\n\n在时序逻辑描述中，赋值符号有 `=` 和 `<=` 两种。注意 `<=` 在 if 判断语句中为小于或等于，不是赋值符号。\n\n详细解释查看底部的 [阻塞赋值与非阻塞赋值区别](#阻塞赋值与非阻塞赋值区别)\n\n\n### 代码思路\n\n写代码前我们需要先想清楚代码目的：每隔 0.5S 灯闪一次。\n\n对此所画的需求框图如下：\n\n![block_method](./assets/led_assets/block_method.png)\n\n然后对于 0.5S 我们需要一个计数器来计时，LED 灯闪就是 IO 翻转\n\n![count_block](./assets/led_assets/time_count.png)\n\n把上面的思维框图具体到实际使用的话，就变成下面的样式了:\n\n![clock_time_count](./assets/led_assets/clock_time_count.png)\n\n其中 Clock 为时钟源，用来给计时器提供准确的时间。\n\n### 代码描述\n\n根据上文 Verilog 简单说明和所描述的框图，可以所要编写 Verilog 模块有 Clock 和 IO电平 两个端口；\n\n```v\nmodule led(\n    input  Clock,\n    output IO_voltage\n);\n\nendmodule\n```\n\n对于内部的计时模块，Primer 20K 核心板上的晶振为 27MHZ，因此我们每秒钟会有 27000000 个时钟上升沿，想要 0.5S 计数的话那么只需要计数 13500000 次上升沿就好。计数是从 0 开始的，数 13500000 的话就是从 0 数到 13499999。计数完后我们需要设置一个标志位，来通知 LED 的 IO 翻转一下电平。整体计数代码如下：\n\n```v\n//parameter Clock_frequency = 27_000_000; // 时钟频率为27Mhz\nparameter count_value       = 13_499_999; // 计时 0.5S 所需要的计数次数\n\nreg [23:0]  count_value_reg ; // 计数器\nreg         count_value_flag; // IO 电平翻转标志\n\nalways @(posedge Clock) begin\n    if ( count_value_reg <= count_value ) begin //没有计数到 0.5S\n        count_value_reg  <= count_value_reg + 1'b1; // 继续计数\n        count_value_flag <= 1'b0 ; // 不产生翻转标志\n    end\n    else begin //计数到 0.5S 了\n        count_value_reg  <= 23'b0; // 清零计数器，为重新计数最准备\n        count_value_flag <= 1'b1 ; // 产生翻转标志\n    end\nend\n```\n\n对于 LED IO 电平翻转代码如下：\n\n```v\nreg IO_voltage_reg = 1'b0; // 声明 IO 电平状态用于达到计时时间后的翻转，并赋予一个低电平初始态\n\nalways @(posedge Clock) begin\n    if ( count_value_flag )  //  电平翻转标志有效\n        IO_voltage_reg <= ~IO_voltage_reg; // IO 电平翻转\n    else //  电平翻转标志无效\n        IO_voltage_reg <= IO_voltage_reg; // IO 电平不变\nend\n```\n\n\n将上面的代码整合后就变成了下面的内容:\n\n```v\nmodule led(\n    input  Clock,\n    output IO_voltage\n);\n\n/**********计时部分**********/\n//parameter Clock_frequency = 27_000_000; // 时钟频率为27Mhz\nparameter count_value       = 13_499_999; // 计时 0.5S 所需要的计数次数\n\nreg [23:0]  count_value_reg ; // 计数器\nreg         count_value_flag; // IO 电平翻转标志\n\nalways @(posedge Clock) begin\n    if ( count_value_reg <= count_value ) begin //没有计数到 0.5S\n        count_value_reg  <= count_value_reg + 1'b1; // 继续计数\n        count_value_flag <= 1'b0 ; // 不产生翻转标志\n    end\n    else begin //计数到 0.5S 了\n        count_value_reg  <= 23'b0; // 清零计数器，为重新计数最准备\n        count_value_flag <= 1'b1 ; // 产生翻转标志\n    end\nend\nreg IO_voltage_reg = 1'b0; // 声明 IO 电平状态用于达到计时时间后的翻转，并赋予一个低电平初始态\n\n/**********电平翻转部分**********/\nalways @(posedge Clock) begin\n    if ( count_value_flag )  //  电平翻转标志有效\n        IO_voltage_reg <= ~IO_voltage_reg; // IO 电平翻转\n    else //  电平翻转标志无效\n        IO_voltage_reg <= IO_voltage_reg; // IO 电平不变\nend\n\n\n/**********补充一行代码**********/\nassign IO_voltage = IO_voltage_reg;\n\nendmodule\n```\n\n上面代码最后面补充了一行代码，是因为 IO_voltage 声明在了 port 位置，默认为 wire 型，想要将它与 reg 变量 IO_voltage_reg 连接起来，需要用到 assign 语句。\n\n## 综合，约束，布局布线\n\n### 综合\n\n代码保存后，可以双击 IDE 内部的 Process -> Synthesize 来进行代码综合，将 verilog 代码内容转换为综合网表。\n\n![synthesize](./assets/led_assets/synthesize.png)\n\n关于网表有兴趣的可以自己去查阅相关资料，此处不再额外说明。\n\n### 约束\n\n综合完之后我们需要进行管脚约束，才能将所编写的模块端口与 FPGA 引脚相对应，并且实现模块的功能。\n\n点击上图 Synthesize 上面的 FloorPlanner 来进行管脚约束。\n\n![floorplanner](./assets/led_assets/floorplanner.png)\n\n由于是首次创建，所以会弹出下面的对话框，点击 OK 后就弹出了图形化约束交互界面。\n\n![create_constrain_file](./assets/led_assets/create_constrain_file.png)\n\n![floorplanner_intreface](./assets/led_assets/floorplanner_interface.png)\n\n关于约束的方法可以查看 [SUG935-1.3_Gowin设计物理约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG935-1.3_Gowin%E8%AE%BE%E8%AE%A1%E7%89%A9%E7%90%86%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n\n此处因个人喜所以仅使用下图中 IO Constranins 方法来约束引脚：\n\n![floor_planner_ioconstrain](./assets/led_assets/floor_planner_ioconstrain.png)\n\n根据[核心板原理图](https://dl.sipeed.com/fileList/TANG/Primer_20K/02_Schematic/)，我们可以知道晶振所输入的引脚为 H11。\n\n<img src=\"./assets/led_assets/crystal_port.png\" alt=\"crystal_port\" width=45%>\n\n然后结合底板上的 IO 丝印，决定用底板上的 FPGA 的 L14 引脚进行点灯，对应的 LED 编号为 LED4。\n\n![led_port](./assets/led_assets/led_port.png)\n\n因此对于在 FloorPlanner 交互窗口下面的 IO Constranins 中将 PORT（端口）与 Location（引脚） 分别填入下面的值：\n\n![io_constrain_value](./assets/led_assets/io_constrain_value.png)\n\n输入完毕后快捷键 Ctrl + S 来保存一下引脚约束，然后接可以关闭 FloorPlanner 的交互图形界面了。\n\n接着发现在工程项目里面多出来刚刚创建的 cst 文件了，里面的内容也比较好理解。\n\n![cst_content](./assets/led_assets/cst_content.png)\n\n### 布局布线\n\n完成约束后就要开始运行布局布线了，目的是为了把综合所生成的网表与我们自己定义的约束来通过 IDE 算出最优解然后将资源合理地分配在 FPGA 芯片上。\n\n双击下体红框处的 Place&Route 就开始运行了。\n\n![place_route](./assets/led_assets/place_route.png)。\n\n紧接着没有报错，全部通过。就可以开始进行烧录了。\n\n## 烧录固件\n\nDock 板载了下载器，在 [安装IDE](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/get_started/install-the-ide.html) 地时候我们已经安装了驱动。因此我们将板子与电脑连接起来就行。\n\n![connected](./assets/led_assets/connected.png)\n\n对于 Programmer 软件建议使用高云官网下载到 [点我跳转](http://www.gowinsemi.com.cn/faq.aspx) ，下载下图所示的 Programmer 软件即可。\n\n![educational_edition_programmer](./assets/led_assets/educational_edition_programmer.png)\n\n### 扫描设备\n\n在使用 Dock 底板的时候不要忘记使能核心板，按下 1 号拨码开关即可。\n\n![Enable_core_board](./../assets/start/switch_1_on.png)\n\n双击下图中的下载程序(Program Device) 来运行 Programmer 软件\n\n![open_programmer](./assets/led_assets/open_programmer.png)\n\n然后在打开的页面中点击一下 scan_device 来扫描到我们的设备。\n\n![scan_device](./assets/led_assets/scan_device.png)\n\n点击 OK 后就可以进行烧录操作了。\n\n烧录相关的文档可以参考 [SUG502-1.3_Gowin_Programmer用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG502-1.3_Gowin_Programmer%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n\n### 下载到 SRAM\n\n一般来说这个模式是以用来快速验证所生成的固件是否满足自己目的的。\n\n因为其烧录快的特性所以使用的较多，然是当然断电会丢失数据，所以如果想上电运行程序的话是不能选这个的。\n\n点击 Operation 下面的功能框来打开设备设置界面，接着在 Operation 框中选择 SRAM Program 选项来设置为下载到 SRAM ，最后点击下面的那三个点点框来选择我们所生成的 .fs 下载固件。通常来说下载固件生成与工程文件目录下的 impl -> pnr 目录下。\n\n![sram_mode](./assets/led_assets/sram_mode.png)\n\n接着来点击红框处开始进行烧录 \n\n![sram_download](./assets/led_assets/sram_download.png)\n\n有问题的话可以前往 [常见问题](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/questions.html) 自行排查。\n\n到这里就下载完成了。\n\n### 下载到 Flash\n\n上面说过下载到 SRAM 是为了快速验证，但是不能上电运行程序。\n所以想要上电运行的话我们需要设置下载到 Flash。\n\n和上面下载到 SRAM 的步骤几乎类似，先点开 Operation 下面的功能框来打开设备设置界面，接着在 Operation 框中选择 External Flash Mode 选项来设置为下载到外部 Flash ，最后点击下面的那三个点点框来选择我们所生成的 .fs 下载固件，通常来说下载固件生成与工程文件目录下的 impl -> pnr 目录下。最后在下面的外部 Flash 选项中选择设备为 Generic Flash 。\n\n![flash_mode](./assets/led_assets/flash_mode.png)\n\n接着来点击红框处开始进行烧录 \n\n![flash_download](./assets/led_assets/flash_download.png)\n\n然后我们的程序重新上电也能照样运行了。\n\n## 代码结果\n\n如图所示，只有一个灯在闪。\n\n![led_blink](./assets/led_assets/led_blink.gif)\n\n## 结语\n\n到这里我们就已经完成了 FPGA 的 “Hello world” 了。以后的示例工程不会再叙述新建文件等操作了。\n\n## 阻塞赋值与非阻塞赋值区别\n\n以下内容搬运自 `大猪蹄子` （有改动）：\n\n编写一段简单的代码，对它进行简单的仿真：\n\n```v\nmodule test(\n    input      CLK,\n    input      [3:0] A,\n    output reg [3:0] B,C,D,E\n);\n\nalways@(posedge CLK)\nbegin\n    B <= A;\n    C <= B;\n\n    D  = A;\n    E  = D;\nend\nendmodule\n```\n\n![simulation_result](./assets/led_assets/simulation_result.png)\n\n根据仿真结果我们可以看出阻塞和非阻塞赋值的差别。这里对比 `B` `C` `D` `E` 四种结果。`<=` 叫做非阻塞赋值，同一个 `always` 中的 `<=` 会同时执行。这就造成了绿框内的情况：`B` 直接被赋予 `A` 的值同时 `C` 被赋予 `B` 的值。由于这两步是同时进行的，就导致 `C` 被赋予的值是 `B` 的旧值，也就造成了图中所示，`C` 的数据变化时钟要慢 `B` 一个时钟周期。再说阻塞赋值 `=`，也就是说同一个 `always` 中上一个 `=` 语句执行完才会执行下一个 `=` 语句。在这个代码中，上一个语句 `D` 已经被赋予了 `A` 的值，才执行把 `D` 的值赋给 `E`，所以 `D` 、`E` 的值在仿真中始终保持一致。\n\n> 不过一般来说，不建议在时序逻辑中使用阻塞赋值 `=`。\n\n也得出了额外两个结论：\n- 第一，输入的数据不是完全有效，以时钟边沿时刻的输入数据为准。`posedge` 就是以上升沿执行，`negedge` 就是以下降沿执行。如果数据维持的时间小于一个时钟周期，就很有可能采集不到（如红框所示）。\n- 第二、每次触发特定时钟边沿，对应的 `always` 块就会从头到尾执行一次代码（如绿框所示），而不是从中间某处执行。\n\n## 常见问题\n\n### No Cable found\n\n检查设备管理器里有没有下图这两个，没有的话需要安装 Programmer 驱动。\n\n![converter](./../../assets/questions/converter.png)\n\n确定有 converter 设备的话在确认用的是不是所要求使用的 Programmer, 本文[这里](#烧录固件)有写过。\n\n### No gowin device found\n\n确认自己使能了核心板。\n\n### 其他问题\n\n前往 [Gowin 板卡常见问题查看](./../../Tang-Nano-Doc/questions.html)"}, "/hardware/zh/tang/tang-primer-20k/examples/gao.html": {"title": "Tang Primer 20K Dock 点一个灯仿真", "content": "---\ntitle: Tang Primer 20K Dock 点一个灯仿真\ntags: Tang Primer 20K Dock，上手\nkeywords: Primer, Tang, Dock，入门，20K, GAO\ndesc: 使用 GAO\nupdate:\n  - date: 2022-09-22\n    version: v0.1\n    author: wonder\n    content:\n      - 初稿\n---"}, "/hardware/zh/tang/tang-primer-20k/examples/xor_led_on.html": {"title": "异或逻辑亮灯", "content": "---\ntitle: 异或逻辑亮灯\nkeywords: Tang Primer 20K ,例程, 上手\nupdate:\n  - date: 2022-10-11\n    version: v0.1\n    author: wonder\n    content:\n      - 初次编辑\n---\n\n## 原理\n\n### 异或逻辑介绍\n\n异或（xor）是一个数学运算符。它应用于逻辑运算。异或的数学符号为“⊕”，计算机符号为“xor”。\n其运算法则为：$$C = A\\oplus B = (\\overline{A}\\cdot B) | (A\\cdot \\overline{B}) $$\n\n真值表为:\n\n<table>\n<tr>\n  <td>变量 A</td>\n  <td>0</td>\n  <td>0</td>\n  <td>1</td>\n  <td>1</td>\n</tr>\n<tr>\n  <td>变量 B</td>\n  <td>0</td>\n  <td>1</td>\n  <td>0</td>\n  <td>1</td>\n</tr>\n<tr>\n  <td>结果 B</td>\n  <td>0</td>\n  <td>1</td>\n  <td>1</td>\n  <td>0</td>\n</tr>\n</table>\n\n\n在 verilog 中，可以使用 `^` 来表示异或运算，所以可以写成$$C = A\\oplus B = A\\wedge B $$\n\n同理容易算出，四个信号的异或运算结果如下：\n\n$$E = A\\oplus B\\oplus C\\oplus D = A\\wedge B \\wedge C\\wedge D= (((A\\wedge B )\\wedge C)\\wedge D)$$\n\n根据两项输入的运算方式来计算四项输入运算方法，不难得出以下真值表结果：\n\n<table><tr>\n        <td>变量 A</td>\n        <td>0</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td>\n        <td>0</td> <td>1</td> <td>1</td> <td>1</td> <td>1</td> <td>1</td> <td>1</td>\n        <td>1</td> <td>1</td>\n    </tr>\n    <tr>\n        <td>变量 B</td>\n        <td>0</td> <td>0</td> <td>0</td> <td>0</td> <td>1</td> <td>1</td> <td>1</td>\n        <td>1</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> <td>1</td> <td>1</td>\n        <td>1</td> <td>1</td>\n    </tr>\n    <tr>\n        <td>变量 C</td>\n        <td>0</td> <td>0</td> <td>1</td> <td>1</td> <td>0</td> <td>0</td> <td>1</td>\n        <td>1</td> <td>0</td> <td>0</td> <td>1</td> <td>1</td> <td>0</td> <td>0</td>\n        <td>1</td> <td>1</td>\n    </tr>\n    <tr>\n        <td>变量 D</td>\n        <td>0</td> <td>1</td> <td>0</td> <td>1</td> <td>0</td> <td>1</td> <td>0</td>\n        <td>1</td> <td>0</td> <td>1</td> <td>0</td> <td>1</td> <td>0</td> <td>1</td>\n        <td>0</td> <td>1</td>\n    </tr>\n    <tr>\n        <td>结果 E</td>\n        <td>0</td> <td>1</td> <td>1</td> <td>0</td> <td>1</td> <td>0</td> <td>0</td>\n        <td>1</td> <td>1</td> <td>0</td> <td>0</td> <td>1</td> <td>0</td> <td>1</td>\n        <td>1</td> <td>0</td>\n    </tr>\n</table>\n\n### 拨码开关说明\n\nTang Primer 20K DOCK 底板配备有一个 5P 的拨码开关。其中一号拨码开关被设计成核心板卡使能位；剩下四个拨码开关用于用户自定义编程功能。\n\n| 拨码开关原理图 | 拨码开关与 FPGA 连接引脚图 |\n|---|---|\n| ![dip_switch](./assets/xor_led_on/dip_switch.png) | ![dip_switch_pin](./assets/xor_led_on/dip_switch_pin.png) |\n\n从上图 [原理图](https://dl.sipeed.com/shareURL/TANG/Primer_20K/02_Schematic) 可以知道，拨码开关连通时对应 FPGA 引脚为高电平输入。\n\n将拨码开关四个角均作输入信号，并将其异或运算，得出一位结果。最终拨码开关状态与输出信号如下表：\n\n<table><tr>\n    <td>开关 2</td>\n    <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td> <td> </td>\n    <td> </td> <td>1</td> <td>1</td> <td>1</td> <td>1</td> <td>1</td> <td>1</td>\n    <td>1</td> <td>1</td>\n</tr>\n<tr>\n    <td>开关 3</td>\n    <td> </td> <td> </td> <td> </td> <td> </td> <td>1</td> <td>1</td> <td>1</td>\n    <td>1</td> <td> </td> <td> </td> <td> </td> <td> </td> <td>1</td> <td>1</td>\n    <td>1</td> <td>1</td>\n</tr>\n<tr>\n    <td>开关 4</td>\n    <td> </td> <td> </td> <td>1</td> <td>1</td> <td> </td> <td> </td> <td>1</td>\n    <td>1</td> <td> </td> <td> </td> <td>1</td> <td>1</td> <td> </td> <td> </td>\n    <td>1</td> <td>1</td>\n</tr>\n<tr>\n    <td>开关 5</td>\n    <td> </td> <td>1</td> <td> </td> <td>1</td> <td> </td> <td>1</td> <td> </td>\n    <td>1</td> <td> </td> <td>1</td> <td> </td> <td>1</td> <td> </td> <td>1</td>\n    <td> </td> <td>1</td>\n</tr>\n<tr>\n    <td>输出结果</td>\n     <td><font color=\"#4F84FF\">0</font></td>  <td><font color=\"#4F84FF\">1</font></td>  <td><font color=\"#4F84FF\">1</font></td>  <td><font color=\"#4F84FF\">0</font></td>  <td><font color=\"#4F84FF\">1</font></td>  <td><font color=\"#4F84FF\">0</font></td>  <td><font color=\"#4F84FF\">0</font></td>\n     <td><font color=\"#4F84FF\">1</font></td>  <td><font color=\"#4F84FF\">1</font></td>  <td><font color=\"#4F84FF\">0</font></td>  <td><font color=\"#4F84FF\">0</font></td>  <td><font color=\"#4F84FF\">1</font></td>  <td><font color=\"#4F84FF\">0</font></td>  <td><font color=\"#4F84FF\">1</font></td>\n     <td><font color=\"#4F84FF\">1</font></td>  <td><font color=\"#4F84FF\">0</font></td>\n</tr>\n</table>\n\n上表中，开关那一行中的空白表示开关断开，`1` 表示开关拨下。\n\n### 板载 LED 说明\n\n根据 LED 电路，可以知道当 FPGA 引脚为低电平的时候对应连接的 LED 会亮起来。\n\n| 板载自定义 LED 电路原理图                               | 板载自定义 LED 与 FPGA 连接引脚图           |\n| ------------------------------------------------------- | ------------------------------------------- |\n| ![key_schematic](./assets/key_led_on/led_schematic.png) | ![key_pin](./assets/key_led_on/led_pin.png) |\n\n这里选择 LED0 作为结果引脚来验证代码现象。\n\n## 操作\n\n### 引脚复用\n\n- DONE\n\n### 端口和引脚\n\n| Port | Direction | Location |\n| --- | --- | --- |\n| dip_switch[2] | input | E9 |\n| dip_switch[3] | input | E8 |\n| dip_switch[4] | output | T4 |\n| dip_switch[5] | output | T5 |\n| led[0] | output | C13 |\n\n### 代码\n\n.. tabset::\n\n    ## xor_led_on.v\n    Verilog文件；\n    定义了 4 个拨码开关输入端口，和 1 个 LED 输出端口。根据拨码开关输入的状态，异或运算后输出到对应的端口。\n    ```verilog\n    module xor_led_on(\n      input [5:2] dip_switch,\n      output led\n    );\n      assign led = dip_switch[5] ^ dip_switch[4] ^dip_switch[3] ^ dip_switch[2] ;\n    endmodule\n    ```\n\n    ## xor_led_on.cst\n    物理约束文件；\n    将 verilog 代码里的端口绑定到 FPGA 引脚上面\n    ```txt\n    IO_LOC \"led\" C13;\n    IO_LOC \"dip_switch[5]\" T5;\n    IO_LOC \"dip_switch[4]\" T4;\n    IO_LOC \"dip_switch[3]\" E8;\n    IO_LOC \"dip_switch[2]\" E9;\n    IO_PORT \"led\" PULL_MODE=UP DRIVE=8;\n    IO_PORT \"dip_switch[5]\" PULL_MODE=DOWN;\n    IO_PORT \"dip_switch[4]\" PULL_MODE=DOWN;\n    IO_PORT \"dip_switch[3]\" PULL_MODE=DOWN;\n    IO_PORT \"dip_switch[2]\" PULL_MODE=DOWN;\n    ```\n\n## 效果\n\n四个拨码开关 2、3、4、5 位有奇数个开关拨下是；LED0 熄灭，偶数个开关拨下时，LED0 点亮。\n\n## 补充说明\n\n在高云 IDE 中，我们可以看到自己代码综合后所消耗芯片资源数量以及占比。\n\n![used_resource](./assets/xor_led_on/used_resource.png)\n\n从这里面可以看到这次编写的代码消耗量 1 个 LUT，5 个 IO。\n\n对于 CLS 的解释可以查看高云半导体官方文档 [UG288](http://cdn.gowinsemi.com.cn/UG288.pdf) 中的第二章。\n\nTang Primer 20K 的主控芯片 [GW2A-V18PG256C8IC8I7](http://www.gowinsemi.com.cn/prod_view.aspx?TypeId=10&amp;FId=t3:10:3&amp;Id=167#GW2A) 内部基本逻辑单元为 LUT4。LUT 即为查找表（Look-Up-Table)，本质上就是一个 RAM。它将数据事先写入 RAM 后，每个输入信号就相当于目标内容地址，找出地址对应的内容，然后输出。LUT4 指的是 4 个输入信号的查找表。其简单解释图如下：\n\n> 这里用一个4输入与门为例\n\n<table>\n<tr>\n<td><img src=\"./assets/xor_led_on/lut_actual.jpeg\"></td>\n<td><img src=\"./assets/xor_led_on/lut_actual.jpeg\"></td>\n</tr>\n<table>\n\n本地代码中，我们恰好 4 个输入和 1 个输出。所以使用 1 个 lut4 就够了。\n\n## 相关问题\n\n### 烧录代码后拨动拨码开关 LED 状态没有改变\n\n这是因为拨码开关引脚上拉了，自己将物理约束文件 (.cst) 文件里面的 `PULL_MODE=UP` 改成 `PULL_MODE=DOWN`\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/tang-primer-20k/examples/water_led.html": {"title": "Tang Primer 20K 流水灯", "content": "---\ntitle: Tang Primer 20K 流水灯\nkeywords: Tang Primer 20K ,例程, 上手\nupdate:\n  - date: 2022-09-30\n    version: v0.1\n    author: wonder\n    content:\n      - 初稿\n---\n\n## 说明\n\n本例程使用 Dock 底板上 LED0、LED1、LED2、LED3、LED4、LED5 共六个 LED 灯。\n\n依次只点亮底板上一个 LED 灯，LED 灯切换间隔为 0.5S。\n\n在前面的 [计数器亮灯中](./led.html)，已经点亮了一个灯了。这次只是将所点亮的灯的状态 “转移” 到别的灯上，这里使用环形 [移位寄存器](https://baike.baidu.com/item/%E7%A7%BB%E4%BD%8D%E5%AF%84%E5%AD%98%E5%99%A8%E5%AD%98%E5%82%A8%E5%99%A8/22232752) 就可以完成灯的效果转移目标。本篇文章使用位拼接运算符 `{` `}` 来进行简单的移位示范。\n\n### 移位寄存器\n\n移位寄存器是一种时序逻辑电路，能够存储和传输数据。它们由触发器组成，这些触发器的连接方式使得一个触发器的输出可以作为另一个触发器的输入，具体取决于所创建的移位寄存器的类型。"}, "/hardware/zh/tang/tang-primer-20k/examples/lcd.html": {"title": "", "content": "# 施工中"}, "/hardware/zh/tang/tang-primer-20k/examples/decode_led_on.html": {"title": "Tang Primer 20K 译码器亮灯", "content": "---\ntitle: Tang Primer 20K 译码器亮灯\nkeywords: Tang Primer 20K ,例程, 上手\nupdate:\n  - date: 2022-09-30\n    version: v0.1\n    author: wonder\n    content:\n      - 初稿\n---\n\n## 说明\n\n本例程使用 Dock 底板上的 S0、S1 按键，和 LED0、LED1、LED2、LED3 四个 LED 灯。\n\n使用两个按键来控制 4 个LED灯的状态，进行的操作与对应的结果如下：\n\n<table>\n    <tr>       \n        <th colspan=\"2\" >按键</th>\n        <th colspan=\"4\">LED 状态</th>\n        <th >真值表达式</th>\n    </tr>\n    <tr>\n        <td>S0</td>\n        <td>S1</td>\n        <td>LED0</td>\n        <td>LED1</td>\n        <td>LED2</td>\n        <td>LED3</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td>$$ LED0 = S0\\cdot S1 $$</td>\n    </tr>\n    <tr>\n        <td>按下</td>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n        <td></td>\n        <td></td>\n        <td>$$ LED1 = \\overline{S0}\\cdot S1 $$</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>按下</td>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n        <td></td>\n        <td>$$ LED2 = S0\\cdot \\overline{S1} $$</td>\n    </tr>\n    <tr>\n        <td>按下</td>\n        <td>按下</td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n        <td>$$ LED3 = \\overline{S0}\\cdot \\overline{S1} $$</td>\n    </tr>\n</table>\n\n从前面的 [按键亮灯](./examples/key_led_on.html) 已知：当 FPGA 与 LED 所连接的引脚为低电平时，对应的 LED 灯会亮；按下按键，对应的 FPGA 引脚为低电平状态。\n\n上面那个表格的输出是以 1 为结果，为了根据原理图来点灯，需要将上面的真值表结果取反来实现最终的效果：\n\n<table>\n    <tr>       \n        <th colspan=\"2\">  按键  </th>\n        <th colspan=\"4\">LED 电平状态</th>\n        <th > 真值表达式 </th>\n    </tr>\n    <tr>\n        <td>S0</td>\n        <td>S1</td>\n        <td>LED0</td>\n        <td>LED1</td>\n        <td>LED2</td>\n        <td>LED3</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td>0</td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td>$$ LED0= \\overline{S0\\cdot S1} $$</td>\n        <!-- <td> LED1 = ! ( S0 & S1 ) </td> -->\n    </tr>\n    <tr>\n        <td>0</td>\n        <td></td>\n        <td></td>\n        <td>0</td>\n        <td></td>\n        <td></td>\n        <td>$$ LED1 = \\overline{\\overline{S0}\\cdot S1} $$</td>\n        <!-- <td> LED1 = ! (!S0 & S1 ) </td> -->\n    </tr>\n    <tr>\n        <td></td>\n        <td>0</td>\n        <td></td>\n        <td></td>\n        <td>0</td>\n        <td></td>\n        <td>$$ LED2 = \\overline{S0\\cdot \\overline{S1}} $$</td>\n        <!-- <td> LED2 = ! ( S0 & !S1) </td> -->\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>0</td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td>0</td>\n        <td>$$ LED3 = \\overline{\\overline{S0}\\cdot \\overline{S1}} = S0 | S1 $$</td>\n        <!-- <td> LED3 =   ( S0 | S1 )  </td> -->\n    </tr>\n</table>\n\n## 操作\n\n### 引脚复用\n\n- READY\n- DONE\n- SSPI\n\n### 端口和引脚\n\n| Port | Direction | Location |\n| --- | --- | --- |\n| key[0] | input | T10 |\n| key[1] | input | T3 |\n| led[0] | output | C13 |\n| led[1] | output | A13 |\n| led[2] | output | N16 |\n| led[3] | output | N14 |\n\n### 代码\n\n.. tabset::\n\n    ## decode_led_on.v\n    Verilog文件；\n    定义了两个按键输入端口，和四个输出端口。根据按键输入的状态，译码输出到对应的端口。\n    ```verilog\n    module decode_led_on(\n        input  [1:0] key,\n        output [3:0] led\n    );\n        assign led[0] = !( key[0] & key[1] ) ;\n        assign led[1] = !(!key[0] & key[1] ) ;\n        assign led[2] = !( key[0] &!key[1] ) ;\n        assign led[3] =  ( key[0] | key[1] ) ;\n    endmodule\n    ```\n\n    ## decode_led_on.cst\n    物理约束文件；\n    将 verilog 代码里的端口绑定到 FPGA 引脚上面\n    ```txt\n    IO_LOC \"led[3]\" N14;\n    IO_LOC \"led[2]\" N16;\n    IO_LOC \"led[1]\" A13;\n    IO_LOC \"led[0]\" C13;\n    IO_LOC \"key[1]\" T3;\n    IO_LOC \"key[0]\" T10;\n    IO_PORT \"led[3]\" PULL_MODE=UP DRIVE=8;\n    IO_PORT \"led[2]\" PULL_MODE=UP DRIVE=8;\n    IO_PORT \"led[1]\" PULL_MODE=UP DRIVE=8;\n    IO_PORT \"led[0]\" PULL_MODE=UP DRIVE=8;\n    IO_PORT \"key[1]\" PULL_MODE=UP;\n    IO_PORT \"key[0]\" PULL_MODE=UP;\n    ```\n\n## 效果\n\n默认只有 LED0 亮；按下 S0 按键 LED1 亮；按下 S1 按键 LED1 亮；按下 S0 和 S2 按键 LED3 亮；\n\n<table>\n    <tr>       \n        <th colspan=\"2\" >按键</th>\n        <th colspan=\"4\">LED 状态</th>\n    </tr>\n    <tr>\n        <td>S0</td>\n        <td>S1</td>\n        <td>LED0</td>\n        <td>LED1</td>\n        <td>LED2</td>\n        <td>LED3</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>按下</td>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>按下</td>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>按下</td>\n        <td>按下</td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n    </tr>\n</table>\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/tang-primer-20k/examples/assign_led.html": {"title": "Tang Primer 20K Dock 亮一个灯", "content": "---\ntitle: Tang Primer 20K Dock 亮一个灯\ntags: Tang Primer 20K Dock，上手\nkeywords: Primer, Tang, Dock， 入门，20K\ndesc: Tang Primer 20K Dock 简单上手\nupdate:\n  - date: 2022-09-29\n    version: v0.1\n    author: wonder\n    content:\n      - 初稿\n---\n\n## 安装 IDE\n\n参考 [安装IDE](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/get_started/install-the-ide.html) 来完成我们需要准备的软件环境。\n\nWindows 用户建议额外下载一次高云教育版的编程器软件，这样可以避免烧录时因为 Programmer 软件版本不兼容 BL702 下载器而导致的奇怪问题。\n\n对于 Linux 用户的话建议使用 [openfpgaLoader](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/get_started/flash_in_linux.html) 这软件来烧录这款板子。\n\n## 新建工程\n\n文件 -> 新建 -> FPGA Design -> Project\n\n<div>\n    <img src=\"./assets/led_assets/new_project.png\" width=58% alt=\"new_project\">\n    <img src=\"./assets/led_assets/fpga_project.png\" width=35% alt=\"fpga_project\">\n</div>\n\n设置工程名称，要求只用英文的下划线命名，存放路径中不要有中文字符或者空格等。\n\n![project_path](./assets/assign_led_assets/assign_led_on.png)\n\n然后在下面的芯片型号中选择 GW2A-LV18PG256C8/I7，使用上面的筛选能够更快地选择到正确的型号。注意 Device 那一栏为 GW2A-18C\n![device_choose](./assets/led_assets/device_choose.png)\n\n然后点击确定后就可以进行最终项目预览了。确认无误后就完成工程创建了。\n\n## 编写代码\n\n### 新建文件\n\n高云半导体 IDE 提供了三种新建文件的方法。在此我们直接使用快捷键 `Ctrl + N` 来新建文件，其他两种不在此讲述。\n\n在弹出的窗口中选择 `Verilog File`，会 VHDL 的也可以选择下面的 `VHDL File`，这篇文章只用 Verilog 来做点灯示例。\n\n<img src=\"./assets/led_assets/new_verilog_file.png\" width=50% alt=\"new_verilog_file\">\n    \n点击 OK 之后会提示让我们输入文件名称，此处以 `led` 为文件名做示范。\n\n<img src=\"./assets/led_assets/file_name.png\" width=75% alt=\"file_name\">\n\n到这里我们就完成文件的创建了，可以直接编写代码了。\n\n![created_file](./assets/led_assets/created_file.png)\n\n### Verilog 简单说明\n\nVerilog 是一种硬件描述语言，用来对数字电路进行抽象化描述。\n\nVerilog 的基本设计单元是“模块”(module)。\n\n一个模块是由两部分组成的：一部分描述接口，另一部分描述内部逻辑功能，即定义输入是如何影响输出的。\n\n一个模块长成这样：\n\n```v\nmodule module_name\n#(parameter)\n(port) ;\n    function   \nendmodule\n```\n\n模块整体结构由 module 和 endmodule 组成，module 后面跟着的是模块的名称(module_name)，可传递变量参数(parameter)，端口及其方向的申明(port)，紧接着就是内部逻辑功能描述(function) ,最后用 endmodule 来表示这一个模块，描述完毕。\n\n内部逻辑功能通常由 assign 和 always 块完成；其中 assign 语句描述逻辑功能，always 块常用于描述时序功能。\n\n### 代码思路\n\n根据我们的 Dock 底板 [原理图](https://dl.sipeed.com/shareURL/TANG/Primer_20K/02_Schematic)，可以看到我们将 IO 控制为底的时候，LED 会亮起来。\n\n![led_schematic](./assets/assign_led_assets/led_schematic.png)\n\n知道怎么样能让灯亮起来后，就快点编写代码吧\n\n### 代码描述\n\n```v\nmodule assign_led_on(\n    output led_voltage_level\n);\n    assign led_voltage_level = 1'b0 ;\nendmodule\n```\n\n上面的代码，定义了一个名为 assign_led_on 得模块，一个名为 led_voltage_level 的输出端口。 `assign` 语句约束了 led_voltage_level 的值，使其值保持为 0。后面再将这个端口绑定到 FPGA 芯片的引脚上后，就可以得到一个电平状态为低电平的引脚，借此来使 LED 亮起来。\n\n## 综合、约束、布局布线\n\n### 综合\n\n代码保存后，可以双击 IDE 内部的 Process -> Synthesize 来进行代码综合，将 verilog 代码内容转换为综合网表。\n\n![synthesize](./assets/assign_led_assets/synthesize.png)\n\n关于网表有兴趣的可以自己去查阅相关资料，此处不再额外说明。\n\n### 约束\n\n综合完之后我们需要进行管脚约束，才能将所编写的模块端口与 FPGA 引脚相对应，并且实现模块的功能。\n\n点击上图 Synthesize 上面的 FloorPlanner 来进行管脚约束。\n\n![floorplanner](./assets/led_assets/floorplanner.png)\n\n由于是首次创建，所以会弹出下面的对话框，点击 OK 后就弹出了图形化约束交互界面。\n\n![create_constrain_file](./assets/led_assets/create_constrain_file.png)\n\n![floorplanner_intreface](./assets/led_assets/floorplanner_interface.png)\n\n关于约束的方法可以查看 [SUG935-1.3_Gowin设计物理约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG935-1.3_Gowin%E8%AE%BE%E8%AE%A1%E7%89%A9%E7%90%86%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n\n此处因个人喜所以仅使用下图中 IO Constranins 方法来约束引脚：\n\n![floor_planner_ioconstrain](./assets/assign_led_assets/floor_planner_ioconstrain.png)\n\n根据下面 Dock 底板原理图，决定点亮 LED4，对应在 FPGA 上的引脚为 L14。\n\n![led_port](./assets/assign_led_assets/led_port.png)\n\n因此对于在 FloorPlanner 交互窗口下面的 IO Constranins 中将 PORT（端口）与 Location（引脚） 分别填入下面的值：\n\n![io_constrain_value](./assets/assign_led_assets/io_constrain_value.png)\n\n输入完毕后快捷键 Ctrl + S 来保存一下引脚约束，然后接可以关闭 FloorPlanner 的交互图形界面了。\n\n接着发现在工程项目里面多出来刚刚创建的 cst 文件了，里面的内容也比较好理解。\n\n![cst_content](./assets/assign_led_assets/cst_content.png)\n\n### 布局布线\n\n完成约束后就要开始运行布局布线了，目的是为了把综合所生成的网表与我们自己定义的约束来通过 IDE 算出最优解然后将资源合理地分配在 FPGA 芯片上。\n\n双击下体红框处的 Place&Route 就开始运行了。\n\n![place_route](./assets/assign_led_assets/place_route.png)\n\n紧接着没有报错，全部通过。就可以开始进行烧录了。\n\n## 烧录固件\n\nDock 板载了下载器，在 [安装IDE](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/get_started/install-the-ide.html) 地时候我们已经安装了驱动。因此我们将板子与电脑连接起来就行。\n\n![connected](./assets/led_assets/connected.png)\n\n对于 Programmer 软件建议使用高云官网下载到 [点我跳转](http://www.gowinsemi.com.cn/faq.aspx) ，下载下图所示的高云云源编程器软件即可。\n\n![educational_edition_programmer](./assets/led_assets/educational_edition_programmer.png)\n\n### 扫描设备\n\n在使用 Dock 底板的时候不要忘记使能核心板，按下 1 号拨码开关即可。\n\n![Enable_core_board](./../assets/start/switch_1_on.png)\n\n双击下图中的下载程序(Program Device) 来运行 Programmer 软件\n\n![open_programmer](./assets/led_assets/open_programmer.png)\n\n然后在打开的页面中点击一下 scan_device 来扫描到我们的设备。\n\n![scan_device](./assets/led_assets/scan_device.png)\n\n点击 OK 后就可以进行烧录操作了。\n\n烧录相关的文档可以参考 [SUG502-1.3_Gowin_Programmer用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG502-1.3_Gowin_Programmer%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n\n有问题的话可以前往 [常见问题](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/questions.html) 自行排查。\n\n### 下载到 SRAM\n\n一般来说这个模式是以用来快速验证所生成的固件是否满足自己目的的。\n\n因为其烧录快的特性所以使用的较多，然是当然断电会丢失数据，所以如果想上电运行程序的话是不能选这个的。\n\n点击 Operation 下面的功能框来打开设备设置界面，接着在 Operation 框中选择 SRAM Program 选项来设置为下载到 SRAM ，最后点击下面的那三个点点框来选择我们所生成的 .fs 下载固件。通常来说下载固件生成与工程文件目录下的 impl -> pnr 目录下。\n\n![sram_mode](./assets/led_assets/sram_mode.png)\n\n接着来点击红框处开始进行烧录 \n\n![sram_download](./assets/led_assets/sram_download.png)\n\n有问题的话可以前往 [常见问题](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/questions.html) 自行排查。\n\n到这里就下载完成了。\n\n### 下载到 Flash\n\n上面说过下载到 SRAM 是为了快速验证，但是不能上电运行程序。\n所以想要上电运行的话我们需要设置下载到 Flash。\n\n和上面下载到 SRAM 的步骤几乎类似，先点开 Operation 下面的功能框来打开设备设置界面，接着在 Operation 框中选择 External Flash Mode 选项来设置为下载到外部 Flash ，最后点击下面的那三个点点框来选择我们所生成的 .fs 下载固件，通常来说下载固件生成与工程文件目录下的 impl -> pnr 目录下。最后在下面的外部 Flash 选项中选择设备为 Generic Flash 。\n\n![flash_mode](./assets/led_assets/flash_mode.png)\n\n接着来点击红框处开始进行烧录 \n\n![flash_download](./assets/led_assets/flash_download.png)\n\n然后我们的程序重新上电也能照样运行了。\n\n有问题的话可以前往 [常见问题](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/questions.html) 自行排查。\n\n## 代码结果\n\n如图所示，只有 LED4 亮着。\n\n![led_blink](./assets/assign_led_assets/led4_on.png)\n\n## 结语\n\n到这里我们就已经完成了 FPGA 的 “Hello world” 了。以后的示例工程不会再叙述新建文件等操作了。\n\n## 常见问题\n\n### No Cable found\n\n检查设备管理器里有没有下图这两个，没有的话需要安装 Programmer 驱动。\n\n![converter](./../../assets/questions/converter.png)\n\n确定有 converter 设备的话在确认用的是不是所要求使用的 Programmer, 本文[这里](#烧录固件)有写过。\n\n### No gowin device found\n\n确认自己使能了核心板。\n\n### 成功烧录过一次外部 Flash 后 Programmer 软件无法再烧录\n\n注意描述是成功烧录过一次 Flash。\n这种情况默认为启用了错误的引脚复用而导致下载器不能再识别到 FPGA 的 JTAG。可以短接 Flash 的 1、4 引脚，让芯片上电时不能正常读 FLASH 。\n\n![flash_cs](./../assets/flash_cs.png)\n\n### 更多问题及其解决办法前往[相关问题](./../Tang-Nano-Doc/questions.html)查看"}, "/hardware/zh/tang/tang-primer-20k/examples/key_6leds_on.md.html": {"title": "Tang Primer 20K Dock 按键点六个灯", "content": "---\ntitle: Tang Primer 20K Dock 按键点六个灯\ntags: Tang Primer 20K Dock，上手\nkeywords: Primer, Tang, Dock， 入门，20K\ndesc: Tang Primer 20K Dock 基础进阶\nupdate:\n  - date: 2022-10-27\n    version: v0.1\n    author: wonder\n    content:\n      - 初稿\n---\n\n前面已经完成按键亮一个灯操作了，板子上还剩下五个 LED 可自定义操作，这次可以使用位拼接运算符 `{` `}` 来一起控制六个 LED。\n\n## 位拼接运算符\n\n### 例子①\n\n语法：\n\n`assign c[5:0] = {{3{1'b1}},{3{1'b0}}};`\n\n等效于 \n\n`assign c[5:0] = 6'b111000 ;`\n\n### 例子②\n\n语法：\n\n```verilog\nwire [2:0] a = 3'b000;\nwire [2:0] b = 3'b000;\nwire [5:0] c = {a,b} ;\n```\n\n## 硬件电路说明\n\n从 [原理图](https://dl.sipeed.com/shareURL/TANG/Primer_20K/02_Schematic) 中，可以知道以下信息：\n\n### 按键电路：\n\n根据 DOCK 底板原理图，可以看出当板载按键按下时，对应的 FPGA 引脚会为低电平输入。\n\n| 板载按键电路原理图 | 板载按键与 FPGA 连接引脚图 |\n|---|---|\n| ![key_schematic](./assets/key_led_on/key_schematic.png)| ![key_pin](./assets/key_led_on/key_pin.png) |\n\n### LED 电路:\n\n根据 LED 电路，可以知道当 FPGA 引脚为低电平的时候对应连接的 LED 会亮起来。\n\n| 板载自定义 LED 电路原理图 | 板载自定义 LED 与 FPGA 连接引脚图 |\n|---|---|\n| ![key_schematic](./assets/key_led_on/led_schematic.png)| ![key_pin](./assets/key_led_on/led_pin.png) |\n\n所以直接将按键引脚的逻辑电平输出为 LED 的引脚逻辑电平就可以点亮 LED 灯。"}, "/hardware/zh/tang/tang-primer-20k/examples/key_led_on.html": {"title": "Tang Primer 20K 按键亮灯", "content": "---\ntitle: Tang Primer 20K 按键亮灯\nkeywords: Tang Primer 20K ,例程, 上手\nupdate:\n  - date: 2022-09-29\n    version: v0.1\n    author: wonder\n    content:\n      - 初稿\n---\n\n## 原理\n\n从 [原理图](https://dl.sipeed.com/shareURL/TANG/Primer_20K/02_Schematic) 中，可以知道以下信息：\n\n### 按键电路：\n\n根据 DOCK 底板原理图，可以看出当板载按键按下时，对应的 FPGA 引脚会为低电平输入。\n\n| 板载按键电路原理图 | 板载按键与 FPGA 连接引脚图 |\n|---|---|\n| ![key_schematic](./assets/key_led_on/key_schematic.png)| ![key_pin](./assets/key_led_on/key_pin.png) |\n\n### LED 电路:\n\n根据 LED 电路，可以知道当 FPGA 引脚为低电平的时候对应连接的 LED 会亮起来。\n\n| 板载自定义 LED 电路原理图 | 板载自定义 LED 与 FPGA 连接引脚图 |\n|---|---|\n| ![key_schematic](./assets/key_led_on/led_schematic.png)| ![key_pin](./assets/key_led_on/led_pin.png) |\n\n所以直接将按键引脚的逻辑电平输出为 LED 的引脚裸机电平就可以点亮 LED 灯。\n\n## 操作\n\n### 引脚复用\n\nLED5 复用了 SSPI 引脚，需要手动前往 Project->Configuration->Place&Route->Dual-Purpose Pin 中，勾选 `Use SSPI as regular IO`\n![dual_purpose_pin](./assets/key_led_on/dual_purpose_pin.png)\n\n**后续文章中不再重复描述步骤，仅说明复用管脚，用户自行前往设置启用管脚复用。**\n\n### 端口和引脚\n\n| Port | Direction | Location |\n| --- | --- | --- |\n| key | input | T10 |\n| led[5] | output | L16 |\n| led[4] | output | L14 |\n\n### 代码\n\n.. tabset::\n\n    ## key_led_on.v\n    Verilog文件；\n    定义了一个按键输入端口，和两个输出端口。将输入端口的 IO 电平状态输出到两个输出端口。 \n    此处使用了位拓展语法。   \n    ```verilog\n    module key_led_on(\n        input key,\n        output [5:4] led\n    );\n        assign led[5:4] = {2{key}};\n    endmodule\n    ```\n\n    ## key_led_on.cst\n    物理约束文件；\n    将 verilog 代码里的端口绑定到 FPGA 引脚上面\n    ```txt\n    IO_LOC \"led[5]\" L16;\n    IO_PORT \"led[5]\" PULL_MODE=UP DRIVE=8;\n    IO_LOC \"led[4]\" L14;\n    IO_PORT \"led[4]\" PULL_MODE=UP DRIVE=8;\n    IO_LOC \"key\" T10;\n    IO_PORT \"key\" PULL_MODE=UP;\n    ```\n\n#### 代码用法\n\n**仅本次说明，后续章节除了特定内容外，不再做说明。**\n\n根据文件里所描述的文件类型，创建对应的文件，并且把文件内容复制进去。\n\n---\n\n发现这是一个 `物理约束文件`\n![物理约束文件](./assets/key_led_on/cst_file.png)\n新建一个 `物理约束文件`\n![file_kind](./assets/key_led_on/file_kind.png)\n将文件内容内容复制进去\n![file_content](./assets/key_led_on/file_content.png)\n接着保存这个文件。\n\n---\n\n将所有代码中涉及到的文件创建、复制内容且保存后，就可以进行综合、布局布线操作来生成下载固件了。\n\n具体创建工程操作参考 [Tang Primer 20K Dock 亮一个灯](./assign_led.html)\n\n## 效果\n\n按下 S0 按键，LED4 和 LED5 亮。松开 S0 按键，LED4 和 LED5 灭。\n\n|松开 S0 按键|按下 S0 按键|\n|---|---|\n|<img src=\"./assets/key_led_on/led_off.png\" alt=\"led_off\">|<img src=\"./assets/key_led_on/led_on.png\" alt=\"led_on\">|\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/tang-primer-20k/examples/timing_decode_led_on.html": {"title": "Tang Primer 20K 译码器亮灯", "content": "---\ntitle: Tang Primer 20K 译码器亮灯\nkeywords: Tang Primer 20K ,例程, 上手\nupdate:\n  - date: 2022-11-03\n    version: v0.1\n    author: wonder\n    content:\n      - 初稿\n---\n\n## 说明\n\n在前面的 [译码器亮灯](./decode_led_on.html) 中，使用 verilog 语句来写出真值表达式来达到译码器的目的。这里介绍使用 case 语句来实现译码器功能。\n\n在前面的 [译码器亮灯](./decode_led_on.html) 中，我们所需要的最终结果如下：\n\n<table>\n    <tr>       \n        <th colspan=\"2\">  按键  </th>\n        <th colspan=\"4\">LED 电平状态</th>\n    </tr>\n    <tr>\n        <td>S0</td>\n        <td>S1</td>\n        <td>LED0</td>\n        <td>LED1</td>\n        <td>LED2</td>\n        <td>LED3</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td>0</td>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td></td>\n        <td></td>\n        <td>0</td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>0</td>\n        <td></td>\n        <td></td>\n        <td>0</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>0</td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td>0</td>\n    </tr>\n</table>\n\n### case 语法\n\n\n\n## 操作\n\n### 引脚复用\n\n- READY\n- DONE\n- SSPI\n\n### 端口和引脚\n\n| Port | Direction | Location |\n| --- | --- | --- |\n| key[0] | input | T10 |\n| key[1] | input | T3 |\n| led[0] | output | C13 |\n| led[1] | output | A13 |\n| led[2] | output | N16 |\n| led[3] | output | N14 |\n\n### 代码\n\n.. tabset::\n\n    ## decode_led_on.v\n    Verilog文件；\n    定义了两个按键输入端口，和四个输出端口。根据按键输入的状态，译码输出到对应的端口。\n    ```verilog\n    module decode_led_on(\n        input  [1:0] key,\n        output [3:0] led\n    );\n        assign led[0] = !( key[0] & key[1] ) ;\n        assign led[1] = !(!key[0] & key[1] ) ;\n        assign led[2] = !( key[0] &!key[1] ) ;\n        assign led[3] =  ( key[0] | key[1] ) ;\n    endmodule\n    ```\n\n    ## decode_led_on.cst\n    物理约束文件；\n    将 verilog 代码里的端口绑定到 FPGA 引脚上面\n    ```txt\n    IO_LOC \"led[3]\" N14;\n    IO_LOC \"led[2]\" N16;\n    IO_LOC \"led[1]\" A13;\n    IO_LOC \"led[0]\" C13;\n    IO_LOC \"key[1]\" T3;\n    IO_LOC \"key[0]\" T10;\n    IO_PORT \"led[3]\" PULL_MODE=UP DRIVE=8;\n    IO_PORT \"led[2]\" PULL_MODE=UP DRIVE=8;\n    IO_PORT \"led[1]\" PULL_MODE=UP DRIVE=8;\n    IO_PORT \"led[0]\" PULL_MODE=UP DRIVE=8;\n    IO_PORT \"key[1]\" PULL_MODE=UP;\n    IO_PORT \"key[0]\" PULL_MODE=UP;\n    ```\n\n## 效果\n\n默认只有 LED0 亮；按下 S0 按键 LED1 亮；按下 S1 按键 LED1 亮；按下 S0 和 S2 按键 LED3 亮；\n\n<table>\n    <tr>       \n        <th colspan=\"2\" >按键</th>\n        <th colspan=\"4\">LED 状态</th>\n    </tr>\n    <tr>\n        <td>S0</td>\n        <td>S1</td>\n        <td>LED0</td>\n        <td>LED1</td>\n        <td>LED2</td>\n        <td>LED3</td>\n    </tr>\n    <tr>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n        <td></td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>按下</td>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n        <td></td>\n        <td></td>\n    </tr>\n    <tr>\n        <td></td>\n        <td>按下</td>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n        <td></td>\n    </tr>\n    <tr>\n        <td>按下</td>\n        <td>按下</td>\n        <td></td>\n        <td></td>\n        <td></td>\n        <td>亮</td>\n    </tr>\n</table>\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/tang-primer-20k/primer-20k.html": {"title": "Tang Primer 20K", "content": "# Tang Primer 20K\n\n## 概述\n\nTang Primer 20K 是基于 [GW2A-V18PG256C8IC8I7](http://www.gowinsemi.com.cn/prod_view.aspx?TypeId=10&amp;FId=t3:10:3&amp;Id=167#GW2A) 所设计的一款 DDR3 sodimm 封装的核心板，额外准备了两个底板，分别为 Dock 底板和 Lite 底板。\n\n## 核心板\n\n### 外设框图\n\n<div>\n    <img src=\"./assets/20k_front.png\" width=45%>\n    <img src=\"./assets/20k_back.png\" width=45%>\n</div>\n\n### 相关参数\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center\">项目</th>\n\t\t\t<th style=\"text-align:center\">参数</th>\n\t\t\t<th style=\"text-align:center\">补充</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">主控</td>\n\t\t\t<td style=\"text-align:left\"><a href=\"http://www.gowinsemi.com.cn/prod_view.aspx?TypeId=10&amp;FId=t3:10:3&amp;Id=167#GW2A\">GW2A-LV18PG256C8IC8I7</a>\n\t\t\t</td>\n\t\t\t<td style=\"text-align:left\">\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>逻辑单元(LUT4)</td>\n\t\t\t\t\t\t<td>20736</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>寄存器(FF)</td>\n\t\t\t\t\t\t<td>15552</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>分布式静态随机存储器S-SRAM(bits)</td>\n\t\t\t\t\t\t<td>41472</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>块状静态随机存储器B-SRAM(bits)</td>\n\t\t\t\t\t\t<td>828K</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>块状静态随机存储器数目B-SRAM(个)</td>\n\t\t\t\t\t\t<td>46</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>乘法器(18x18 Multiplier)</td>\n\t\t\t\t\t\t<td>48</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>锁相环(PLLs)</td>\n\t\t\t\t\t\t<td>4</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>I/O Bank 总数</td>\n\t\t\t\t\t\t<td>8</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">内存</td>\n\t\t\t<td style=\"text-align:left\">128M DDR3</td>\n\t\t\t<td style=\"text-align:left\">128Meg x 16</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">Flash</td>\n\t\t\t<td style=\"text-align:left\">32Mbits NOR Flash</td>\n\t\t\t<td style=\"text-align:left\">下载方式参考底部相关问题</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">调试接口</td>\n\t\t\t<td style=\"text-align:left\">Jtag + Uart</td>\n\t\t\t<td style=\"text-align:left\">JST SH1.0 8Pins 连接器</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">SD 卡槽</td>\n\t\t\t<td style=\"text-align:left\">一个</td>\n\t\t\t<td style=\"text-align:left\">推拉式</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">显示接口</td>\n\t\t\t<td style=\"text-align:left\">8Pins spi lcd 连接器</td>\n\t\t\t<td style=\"text-align:left\"></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">整体封装</td>\n\t\t\t<td style=\"text-align:left\">204P DDR3 Sodimm 金手指</td>\n\t\t\t<td style=\"text-align:left\"></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">可用 IO</td>\n\t\t\t<td style=\"text-align:left\">一共 117 个</td>\n\t\t\t<td style=\"text-align:left\"></td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n## 底板对比\n\n### Dock 底板产品图\n\n其中 LED2 和 LED3 所对应的引脚编号为 N16 和 N14。查阅右图左方，已标明。\n\n<div>\n<img src=\"./assets/dock-up.png\" alt=\"dock-up\" width=45%>\n<img src=\"./assets/dock-back.png\" alt=\"dock-back\" width=45%>\n</div>\n\n### Lite 底板产品图\n\n底板 R8 与 P9 之间为 P8 引脚。参考右图左上方，已标明\n\n<div>\n<img src=\"./assets/lite-up.png\" alt=\"lite-up\" width=45%>\n<img src=\"./assets/lite-back.png\" alt=\"lite-back\" width=45%>\n</div>\n\n### 外设参数对比\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th rowspan=\"2\" colspan=\"2\">项目</th>\n\t\t\t<th colspan=\"2\">Dock</th>\n\t\t\t<th colspan=\"2\">Lite</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>数量</th>\n\t\t\t<th>补充说明</th>\n\t\t\t<th>数量</th>\n\t\t\t<th>补充说明</th>\n\t\t</tr>\n\t</thead>\n\t<body>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">RGB 接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>RGB565 40P FPC 连接器</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">DVP 接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>24P FPC 连接器</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">麦克风阵列接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>10P FPC 连接器</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">触摸接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>4P FPC 连接器</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">PMOD 接口</td>\n\t\t\t<td>4</td>\n\t\t\t<td></td>\n\t\t\t<td>4</td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">3.5mm 耳机接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>使用 LPA4809MSF 驱动</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">拨码开关</td>\n\t\t\t<td>1</td>\n\t\t\t<td>5P 拨码开关</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">滑动开关</td>\n\t\t\t<td>1</td>\n\t\t\t<td>切换板载 USB 功能</td>\n\t\t\t<td>2</td>\n\t\t\t<td>用户自定义功能</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"white-space:nowrap\" rowspan=\"2\">Type-C 接口</td>\n\t\t\t<td style=\"white-space:nowrap\">USB-JTAG&UART</td>\n\t\t\t<td>1</td>\n\t\t\t<td>板载 BL702 芯片用来<br>下载比特流并提供串口功能</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>自定义 USB</td>\n\t\t\t<td>1</td>\n\t\t\t<td>USB3317 芯片与滑动开关<br>来自定义该 USB 接口功能</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">无线天线</td>\n\t\t\t<td>1</td>\n\t\t\t<td>使用 BL702 芯片的无线功能</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">按键</td>\n\t\t\t<td>6</td>\n\t\t\t<td>一个用来烧录 BL702,<br>剩下五个用户自定义功能</td>\n\t\t\t<td>2</td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">LED</td>\n\t\t\t<td>6</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">HDMI 接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">以太网接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>TL8201F 芯片实现以太网功能</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<!-- <tr>\n\t\t\t<td colspan=\"2\">RGB LED</td>\n\t\t\t<td>1</td>\n\t\t\t<td>WS2812 灯珠</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr> -->\n\t</body>\n</table>\n\n## 硬件资料汇总\n\n规格书、原理图、尺寸图等均可在这里找到：[点击这里](https://dl.sipeed.com/shareURL/TANG/Primer_20K)\n\n## 上手指引\n   \n1. 安装 IDE ：[点击这里](./../Tang-Nano-Doc/get_started/install-the-ide.html)\n\n2. 查看 [上手指南](./start.html) 来避免一些问题，并且从那里面可以开始进行代码实战。\n\n3. 如果进行完上面的点灯操作后后感觉有压力，可以自己查漏补缺：\n   可以在下面的这些网站学习 Verilog:\n\t+ 在线免费教程：[Verilog 教程](https://www.runoob.com/w3cnote/verilog-tutorial.html)（学习Verilog）\n\t+ 在线免费 FPGA 教程：[Verilog](https://www.asic-world.com/verilog/index.html) （英文网站）\n\t+ Verilog 刷题网站：[HDLBits](https://hdlbits.01xz.net/wiki/Main_Page)（英文网站）\n\t+ 在线高云半导体视频教程：[点击这里](http://www.gowinsemi.com.cn/video_complex.aspx?FId=n15:15:26)\n\n   对 IDE 使用有疑问的话，可以查看官方的一些文档来熟悉相关内容\n   - [SUG100-2.6_Gowin云源软件用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG100-2.6_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG949-1.1_Gowin_HDL编码风格用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG949-1.1_Gowin_HDL%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - <a href=\"http://cdn.gowinsemi.com.cn/UG286-1.9.1_Gowin%E6%97%B6%E9%92%9F%E8%B5%84%E6%BA%90(Clock)%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\">UG286-1.9.1_Gowin时钟资源(Clock)用户指南.pdf</a>\n   - [SUG940-1.3_Gowin设计时序约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG940-1.3_Gowin%E8%AE%BE%E8%AE%A1%E6%97%B6%E5%BA%8F%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG502-1.3_Gowin_Programmer用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG502-1.3_Gowin_Programmer%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG114-2.5_Gowin在线逻辑分析仪用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG114-2.5_Gowin%E5%9C%A8%E7%BA%BF%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90%E4%BB%AA%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n\n   上面的所有文档都已经打包进了下载站[点我跳转](https://dl.sipeed.com/shareURL/TANG/Primer_20K/07_Chip_manual/CN/%E9%80%9A%E7%94%A8%E6%8C%87%E5%BC%95)，需要的话可以点击压缩包全都下载下来。\n\n## 例程汇总\n\n### 公开例程\n\ngithub 链接： https://github.com/sipeed/TangPrimer-20K-example\n\n### 部分教程\n\n- Lite 底板点灯 ：<a href=\"https://wiki.sipeed.com/news/others/20k_lite_start/20k_lite_start.html\" target=\"blank\">点我跳转</a>\n- Dock 底板例程指南: [点我跳转](./example.html)\n\n## 交流方式\n\n- **交流论坛: [bbs.sipeed.com](https://bbs.sipeed.com)**\n- **QQ 交流群：[834585530](https://jq.qq.com/?_wv=1027&k=wBb8XUan)**\n- 直接本页下方留言\n- 商业邮箱 : [support@sipeed.com](support@sipeed.com)\n\n## 补充说明\n\n对于板子上的 bank 0、bank 1、bank 7 这 3 个 bank 电压，默认所接的是 3.3V，对应的 bank IO 会对外输出 3.3V 电压。如果需要输入自定义的 IO bank 电压，请拆除 R5 和 R9，请参考对应 Assembly [点我跳转](https://dl.sipeed.com/shareURL/TANG/Primer_20K/03_Bit_number_map) 图来确定 R5 和 R9 的位置。\n\n![io_vltage](./assets/io_vltage.png)\n\n对应核心板原理图上在金手指处的说明如下\n\n![sodimm_voltage](./assets/sodimm_voltage.png)\n\n## 相关问题\n\n### Dock 底板不工作\n\n拨下 1 号拨码开关以使能核心板，不然底板会不工作且 LED0 和 LED1 常亮。\n\n| 使能核心板 | 未使能核心板 |\n| --- | --- |\n| ![switch_1_on](./assets/start/switch_1_on.png) | ![reset_led_on](./assets/start/reset_led_on.png)  |\n\n<!-- <img src=\"./assets/start/switch_1_on.png\" alt=\"switch_1_on\" width=20%> -->\n\n### 如何下载到外部 FLASH\n\n进行如下选项设置：\n\n<img src=\"./assets/flash_mode.png\" alt=\"flash_mode\" width=75%>\n\n### 烧录后没反应或者引脚现象不对\n\n首先确定选择了正确的型号，下图中的每一个参数都要求一致\n\n<img src=\"./assets/device_choose.png\" alt=\"device_choose\" width=75%>\n\n然后检查自己的代码和对应的仿真波形是否满足要求\n\n### 成功烧录过一次外部 Flash 后 Programmer 软件无法再烧录\n\n注意描述是成功烧录过一次 Flash。\n\n这种情况默认为启用了错误的引脚复用而导致下载器不能再识别到 FPGA 的 JTAG。可以短接 Flash 的 1、4 引脚，让芯片上电时不能正常读 FLASH 。\n\n![flash_cs](./assets/flash_cs.png)\n\n### 更多问题及其解决办法前往[相关问题](./../Tang-Nano-Doc/questions.html)查看"}, "/hardware/zh/tang/tang-primer-20k/start.html": {"title": "Tang Primer 20K 开箱指南", "content": "---\ntitle: Tang Primer 20K 开箱指南\nkeywords: FPGA, Primer, Tang, 20K\nupdate:\n  - date: 2022-09-16\n    version: v0.1\n    author: wonder\n    content:\n      - 首次编辑\n---\n\n持续施工中\n\n----\n\nPrimer 20K 底板有 Lite 和 Dock 两款，这里分开说明一下\n\n## Dock 开箱指南\n\n### 注意事项\n\n首先列出相关注意事项，来避免因为操作不当所产生的问题却花费大量时间但又未解决。\n\n#### 使能核心板\n\n对于 Dock 板，使用的时候需要注意将拨码开关 1 号位开启，以此来使能核心板。\n\n| 使能核心板 | 未使能状态 | 补充说明 |\n| --- | --- | --- |\n|<img src=\"./assets/start/switch_1_on.png\" alt=\"switch_1_on\" width=100%>|<img src=\"./assets/start/reset_led_on.png\" alt=\"reset_led_on\" width=100%> | 未使能核心板的话板子上的 0、1 号 LED 会一直亮着，且核心板不会正常启动。|\n\n#### 设备不工作\n\n默认的包装盒里已经将核心板组装在底板上面了，但是有时候因为一些必要操作需要取下核心板。\n然后再次组装回去后发现设备不再工作了，这个时候我们需要确认一下核心板与底板是否连接好。\n\n正确的连接顺序是先将核心板斜插入到底板中，倾斜角度大概如如下图左图所示。确定从上面看到斜插入的核心板与底板均匀接触，可以从金手指裸露出来的均匀程度来判断。\n\n<img src=\"./assets/start/edge_view.png\" alt=\"edge_view\" width=45%>\n<img src=\"./assets/start/top_view.png\" alt=\"top_view\" width=35%>\n\n然后轻压翘起来的那一头，可以清脆的听见核心板被底板插槽固定住的声音。\n\n如果按压时候觉得困难的话，可以尝试将核心板两侧稍微打磨一下，来消除由于生产工艺所带来的尺寸误差。\n\n<img src=\"./assets/start/clean_core_board.png\" alt=\"clean_core_board\" width=20%>\n\n将上图红框的两处侧边稍微打磨一下，来减少配合时的困难。\n\n#### 硬件改版说明\n\n对于 Dock 底板，可以从如下图所指的位置来了解当前自己所使用的板子版本。\n\n![version](./assets/start/dock-version.png)\n\n比如上面这张图的板子的版本号为 V3708\n\n下面是有问题的版本修正：\n\n##### V3708\n\nLED2 与 LED3 的丝印错误，应当为：\n\n| 外设 | 正确引脚 | 错误丝印 |\n| ---  | --- | --- |\n| LED2 | N16 | B14 |\n| LED3 | N14 | N16 |\n\n### 开始使用\n\n对于 Dock 底板，默认固件可进行如下操作：\n- 按下 S0 按键，复位 RGB 屏幕、摄像头、HDMI 信号复位，且 3、4、5 号三个 LED 会常亮。\n- S2 到 S5 按键及 2 号到 5 号拨码开关控制 0、1、2 三个 LED 灯的状态\n- 将 OV5640 摄像头与 4.3寸 RGB 屏幕连接到板子上（连接时注意断开板子电源），屏幕上面会显示摄像头所捕获到的画面。如果屏幕显示有撕裂现象的话，可以按下 S0 按键来同步一下输出画面。\n\n默认固件中，将 3、4 号两个灯设置为时钟检测信号，可以通过这两个灯的状态来鉴别设备是否工作。\n\n### 实战使用\n\n[点一个灯](./examples/led.html)\n\n### 相关问题\n\n使用中碰到问题可以先前往 [常见问题](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/questions.html) 来查看解决方法。\n\n## Lite 开箱说明\n\n### 硬件版本说明\n\n对于 Lite 底板，可以从如下图所指的位置来了解当前自己所使用的板子版本。\n\n![lite-version](./assets/start/lite-version.png)\n\n比如上面这张图的板子的版本号为 3710\n\n下面是有问题的版本修正：\n\n#### 3710\n\n底板 R8 与 P9 之间为 P8 引脚。参考右图左上方，已标明\n\n<div>\n<img src=\"./assets/lite-up.png\" alt=\"lite-up\" width=45%>\n<img src=\"./assets/lite-back.png\" alt=\"lite-back\" width=45%>\n</div>\n\n### 实战使用\n\n[点一个灯](https://wiki.sipeed.com/news/others/20k_lite_start/20k_lite_start.html)\n\n### 相关问题\n\n使用中碰到问题可以先前往 [常见问题](https://wiki.sipeed.com/hardware/zh/tang/Tang-Nano-Doc/questions.html) 来查看解决方法。"}, "/hardware/zh/tang/tang-primer-20k/example.html": {"title": "Tang Primer 20K 例程指南", "content": "---\ntitle: Tang Primer 20K 例程指南\nkeywords: Tang Primer 20K ,例程, 上手\nupdate:\n  - date: 2022-09-29\n    version: v0.1\n    author: wonder\n    content:\n      - 目录确定\n---\n\n## LED 篇\n\nDock 底板上六个 LED 可以拿来做不少新手实验\n\n- 组合逻辑操作：\n  - [约束亮灯](./examples/assign_led.html)（快速熟悉 IDE，必看）\n  - [按键亮灯](./examples/key_led_on.html) (后续文档规范，必看)\n  - [译码器亮灯](./examples/decode_led_on.html)\n- 时序逻辑操作：\n  - [计数器亮灯](./examples/led.html) \n  - [流水灯](./examples/water_led.html)\n  - 呼吸灯\n\n## RGB LCD 篇\n\n## SPI LCD 篇\n\n## CAM LCD 篇\n\n## 余下工程\n\n- HDMI\n- USB 示例\n- 以太网"}, "/hardware/zh/tang/Tang-Nano-9K/examples/spi_lcd/spi_lcd.html": {"title": "Spi lcd", "content": "---\ntitle: Spi lcd \nkeywords: Tang Nano 9K, spi, lcd\nupdate:\n  - date: 2022-10-25\n    version: v0.1\n    author: wonder\n    content:\n      - 内容编写\n---\n\n## 前言\n\nTang Nano 9K 板卡上有一个 8P 的 spi lcd 连接器，可以用来去驱动配套的 spi lcd 屏幕。\n\n<img src=\"./../nano_9k/spi_lcd.jpg\" alt=\"spi_lcd\" width=48%>\n\n配套 SPI 屏幕可以在淘宝店询问客服购买：[点我跳转到淘宝页面](https://sipeed.taobao.com/)\n\n## 分析\n\nSPI 屏幕的数据手册在这里：[点我跳转到下载页面](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet)\n\n从数据手册中可以看到以下信息：\n\n| NO. | Item              | Contents                   | Unit       |\n| --- | ----------------- | -------------------------- | ---------- |\n| 1   | LCD Size          | 1.14                       | inch       |\n| 2   | Display Mode      | Normally black             | -          |\n| 3   | Resolution        | 135(H)RGB x240(V)          | pixels     |\n| 4   | Pixel pitch       | 0.1101(H) x 0.1038(V)      | mm         |\n| 5   | Active area       | 14.864(H) x 24.912(V)      | mm         |\n| 6   | Module size       | 17.6(H) x 31.0(V) x1.6 (D) | mm         |\n| 7   | Pixel arrangement | RGB Vertical stripe        | -          |\n| 8   | Interface         | 4 Line SPI                 | -          |\n| 9   | Display Colors    | 262K                       | colors     |\n| 10  | Drive IC          | ST7789V3                   | -          |\n| 11  | Luminance(cd/m2)  | 400 (TYP)                  | Cd/m2      |\n| 12  | Viewing Direction | All View                   | Best image |\n| 13  | Backlight         | 1 White LED                | -          |\n| 14  | Operating Temp.   | -20℃~ + 70℃              | ℃         |\n| 15  | Storage Temp.     | -30℃~ + 80℃              | ℃         |\n| 16  | Weight            | 1.8                        | g          |\n\n在里面我们主要需要知道以下信息：\n- 分辨率 (Resolution)：135(H)RGB x240(V)\n- 接口 (Interface)：4 Line SPI \n- 驱动 (Drive IC)：ST7789V3 [点我下载相关数据手册](https://dl.sipeed.com/fileList/MAIX/HDK/Chip_DS/ST7789V3_SPEC_Preliminary_V0.0_200102.pdf)\n\n\n感谢群友提供的代码，前往 https://github.com/sipeed/TangNano-9K-example/tree/main/spi_lcd 查看详情，相关说明会在整理之后展示。\n\n![spi_lcd](./../nano_9k/spi_lcd.jpg)"}, "/hardware/zh/tang/Tang-Nano-9K/examples/picorv.html": {"title": "Tang Nano 9K picoRV 简单示例", "content": "---\ntitle: Tang Nano 9K picoRV 简单示例\n---\n> 编辑于2022年3月28日\n\n## 前言\n\n在Tang Nano 9K [例程仓库](https://github.com/sipeed/TangNano-9K-example/tree/main/picotiny)里面有一个picoRV的例程。\n本篇文章仅简单叙述如何使用例程，无其他内容。\n\n## 相关环境\n\n- Python\n- Gowin IDE\n\n## 相关步骤\n\n### 烧录Bitstream\n\n- 打开 TangNano-9K-example\\picotiny\\project 目录下的 picotiny.gprj 文件\n- 在顶部菜单栏 Project->Configuration->Place&Route->Dual-Purpose Pin 里面勾选 Use MSPI as regular IO\n- 在 IDE 的 Process 窗口右键 Place&Route 选择 Clean＆Rerun All \n- 将生成的文件下载到 Nano 9K 的 Embedded Flash\n\n完成上面步骤后我们已经成功将PicoRV固化到FPGA里面了\n\n### 烧录例程文件\n\n- 在 TangNano-9K-example\\picotiny 目录下执行\n\n```python\npython .\\sw\\pico-programmer.py .\\example-fw-flash.v COM13\n```\n\n上面命令行中最后的 COM13 指的是开发板在系统中的串口编号，\n比如在系统中显示为COM14的话就需要将它改成对应的COM14。\n\n成功执行上面命令后会出现 `- Waiting for reset -` 的计时，\n这时候按下开发板的S1按键就可以完成烧录。\n附带完成的烧录log：\n\n```powershell\n\\TangNano-9K-example\\picotiny> python .\\sw\\pico-programmer.py .\\example-fw-flash.v COM13\nRead program with 11760 bytes\n  - Waiting for reset -\n    ...\nTotal sectors 3\nTotal pages 46\nFlashing 1 / 3\nFlashing 2 / 3\nFlashing 3 / 3\n\nFlashing completed\n```\n\n然后就可以使用在串口工具来执行我们的代码了，当然也可以用HDMI来显示代码界面\n![](./../nano_9k/picorv.jpg)\n\n## 其他事项\n\n- 本文仅提供一种运行方法，无其他作用\n- 交叉编译等高阶玩法自己参考项目目录的makefile修改，无其他支持\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-9K/examples/softcore-1/softcore-1.html": {"title": "移植FatFS，为RISCV添加FAT32文件系统", "content": "# 移植FatFS，为RISCV添加FAT32文件系统\n\n> 编辑于2022.05.26\n\n- 原文链接:https://bbs.sipeed.com/thread/1482\n\n搬运有改动。\n\n首先新建一个项目工程，选型时不要选错型号。\n\n## Gowin 相关设置\n\n在 IP generator 生成中选择 Gowin_PicoRV32，软核最大可以跑到50MHz，这个频率做一些基本控制是绰绰有余的。\n\n打开IP后，双击要修改的模块进行设置。\n\n此处去掉了 RV32C 和 RV32M 指令集的扩展，关闭了Jtag debug功能。\n\n然后是定制ITCM和DTCM，由于我选择将程序编译后直接放到ITCM中运行（MCU boot and run in ITCM），并且编译后的文件大约需要22KB，所以分给了ITCM 32KB的空间，DTCM保持默认16KB。\n\n外设方面，启用UART来输出打印信息，SPI Master用于与SD卡通信，GPIO用来点灯。我还打开了AHB扩展，并在上面挂载了一片内存用于后续LCD的显存。\n\n还需要调用PLL，为CPU提供50MHz的时钟，SD卡的读写速度也是50MHz，最后绑定好pin脚，生成FPGA的下载文件。\n\n## GMD 相关的操作\n\n接下去的工作就要转到[GMD](http://www.gowinsemi.com.cn/prodshow.aspx)中了。参考半导体官方文档[IPUG910](http://cdn.gowinsemi.com.cn/IPUG910-1.4_Gowin_PicoRV32_IDE%E8%BD%AF%E4%BB%B6%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C.pdf)进行开发环境搭建和程序编译，外设的驱动编写可以参考[IPUG911](http://cdn.gowinsemi.com.cn/IPUG911-1.3_Gowin_PicoRV32%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C.pdf)，最后程序的下载可以参考[IPUG913](http://cdn.gowinsemi.com.cn/IPUG913-1.4_Gowin_PicoRV32%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C.pdf)。\n\nC的开发环境搭建完成后，就开始进行SD卡驱动和fatfs的移植，这里我将SD卡作为只读设备，编写了相应的驱动。\n\n### SD Command\n\nSD卡的通信，主要是通过Matser发送CMD命令进行的，驱动见下面代码。\n\n```c\n#define SPI_ID 0\n\nuint8_t sd_sendcmd(uint8_t cmd, uint32_t arg, uint8_t crc)\n{\n        uint8_t r1, cnt;\n\n        cnt = 0;\n\n        wbspi_master_select_slave(PICO_WBSPI_MASTER,SPI_ID);\n\n        wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n\n        wbspi_master_txdata(PICO_WBSPI_MASTER,(cmd | 0x40));\n        wbspi_master_txdata(PICO_WBSPI_MASTER,arg>>24);\n        wbspi_master_txdata(PICO_WBSPI_MASTER,arg>>16);\n        wbspi_master_txdata(PICO_WBSPI_MASTER,arg>>8);\n        wbspi_master_txdata(PICO_WBSPI_MASTER,arg);\n        wbspi_master_txdata(PICO_WBSPI_MASTER,crc);\n\n        do{\n                r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n                cnt++;\n                if(cnt > 50) break;\n        }while(r1 == 0xFF);\n\n        return r1;\n}\n```\n\n### SD Init\n\n基于上面这个函数，就开始编写SD卡初始化函数，初始化的流程为：\n1、发送大于74个周期的时钟信号，等待SD卡内部逻辑稳定；\n2、发送CMD0，让SD卡进入IDLE状态；\n3、发送CMD8，查询卡的型号是不是支持SD 2.0协议；\n4、这里只处理支持SD 2.0协议的卡，发送CMD55+ACMD41进行初始化；\n5、发送CMD58，查询卡支不支持SDHC；\n6、发送CMD9，CMD10，获取SD卡的CID和OCR信息\n\n```C\nuint8_t sd_init(void)\n{\n        uint32_t i;\n        uint8_t r1;\n        uint8_t buff[16];\n        uint8_t cnt = 0;\n\n        wbspi_master_select_slave(PICO_WBSPI_MASTER,SPI_ID);\n        for(i=0; i<1000; i++);\n\n        for(i=0; i<10; i++)\n                wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n\n        r1 = sd_sendcmd(0,0,0x95);\n\n        r1 = sd_sendcmd(8,0x1aa,0x87);\n        if(r1 == 0x01)\n        {\n                buff[0] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n                buff[1] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n                buff[2] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n                buff[3] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n\n                do{\n                        r1 = sd_sendcmd(55,0,0);\n                        if(r1 != 0x01)\n                                return -1;\n\n                        r1 = sd_sendcmd(41,0x40000000,1);\n                        cnt++;\n                        if(cnt>100) return -1;\n                }while(r1!=0);\n        }\n\n        r1 = sd_sendcmd(58,0,0);\n        if(r1 != 0x00) return -1;\n\n        buff[0] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        buff[1] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        buff[2] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        buff[3] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n\n        if(buff[0]&0x40)\n                printf(\"sdhc rdy\\r\\n\");\n        else\n                printf(\"sd2.0 rdy\\r\\n\");\n\n        r1 = sd_sendcmd(9,0,0xFF);\n        if(r1 != 0x00) return -1;\n        do{\n                r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        }while(r1 != 0xFE);\n\n        for(i=0; i<16; i++)\n        {\n                r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        }\n\n        r1 = sd_sendcmd(10,0,0xFF);\n        if(r1 != 0x00) return -1;\n        do{\n                r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        }while(r1 != 0xFE);\n        for(i=0; i<16; i++)\n        {\n                r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        }\n        return 0;\n}\n```\n\n### SD Read Block\n\n下面是SD卡读单块和多块的驱动。\n\n```C\nBYTE SD_ReadSingleBlock(UINT sector, BYTE *buffer)\n{\n  BYTE r1;\n  WORD i;\n  i=512;\n\n   r1 = sd_sendcmd(17, sector, 1);        //发送CMD17 读命令\n   if(r1 != 0x00)        return r1;\n\n   do{\n                   r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n   }while(r1 != 0xFE);\n\n   while(i!=0)\n   {\n           *buffer = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n           buffer++;\n           i--;\n   }\n   wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n   wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n\n\n   return 0;                 //读取正确，返回0\n}\n\nBYTE SD_ReadMultiBlock(UINT sector, BYTE *buffer, BYTE count)\n{\n  BYTE r1;\n  WORD i;\n\n  r1 = sd_sendcmd(18, sector, 1);                //读多块命令\n  if(r1 != 0x00)        return r1;\n\n  while(count != 0){\n          i = 512;\n          do{\n                        r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n          }while(r1 != 0xFE);\n\n          while(i!=0)\n          {\n                   *buffer = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n                   buffer++;\n                   i--;\n          }\n          buffer+=512;\n          count--;\n          wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n  }\n\n  sd_sendcmd(12, 0, 1);        //全部传输完成，发送停止命令\n  wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n  if(count != 0)\n    return count;   //如果没有传完，返回剩余个数\n  else\n    return 0;\n}\n```\n\n### FatFs File system\n\nSD卡驱动完成后，开始移植FatFs文件系统\n\n源码下载：http://elm-chan.org/fsw/ff/archives.html \n\n选择最新的FatFs R0.14b ，并添加到工程。\n\nFFConf.h用于FatFs的定制，这里需要将FF_FS_READONLY的宏改为1，将SD卡作为只读设备。\n\n还需要改写diskio.c文件，适配SD卡。这里只做了最简单的适配，完成了初始化和读，查询状态和获取时间都是空函数。由于宏设置，这两个函数disk_ioctl和disk_write就不管了\n\n```C\n#define SD_CARD 0\n\nDSTATUS disk_initialize (\n        BYTE pdrv                   /* Physical drive nmuber (0..) */\n)\n{\n        DRESULT status = STA_NOINIT;\n        switch(pdrv)\n        {\n                case SD_CARD://SD卡\n                        status = sd_init();\n                          break;\n                default:\n                        status = STA_NOINIT;\n        }   \n\n        return status;\n}  \n\n//获得磁盘状态\nDSTATUS disk_status (\n        BYTE pdrv                   /* Physical drive nmuber (0..) */\n)\n{\n        return 0;\n}\n\n//读扇区\n//drv:磁盘编号0~9\n//*buff:数据接收缓冲首地址\n//sector:扇区地址\n//count:需要读取的扇区数\nDRESULT disk_read (\n        BYTE pdrv,                  /* Physical drive nmuber (0..) */\n        BYTE *buff,                 /* Data buffer to store read data */\n        DWORD sector,               /* Sector address (LBA) */\n        UINT count                  /* Number of sectors to read (1..128) */\n)\n{\n        DRESULT status = RES_PARERR;\n    if (!count)return RES_PARERR;   //count不能等于0，否则返回参数错误  \n        switch(pdrv)\n        {\n                case SD_CARD://SD卡\n                        if(count == 1)\n                                status=SD_ReadSingleBlock(sector, buff);\n                        else\n                                status=SD_ReadMultiBlock(sector, buff, count);\n                        break;\n                default:\n                        status=RES_PARERR;\n        }\n\n        return status;\n}\nDWORD get_fattime (void)\n{         \n        return 0;\n}\n```\n\n最后进行测试，在SD卡的根目录放一个txt文件，然后RV32 CPU通过串口，将文件大小和内容打印出来。\n\n```C\n        res = f_mount(&fs, \"\", 1);\n        res = f_open(&file, \"top.txt\", FA_READ);\n        printf(\"\\r\\nfile size:%d\\r\\n\", file.obj.objsize);\n        f_read(&file, fbuff, file.obj.objsize, &br);\n        printf(\"%s\\r\\n\",fbuff);\n        f_close(&file);\n```"}, "/hardware/zh/tang/Tang-Nano-9K/examples/softcore-1/softcore-2.html": {"title": "使用PicoRV32软核在lcd屏幕上绘制图形", "content": "# 使用PicoRV32软核在lcd屏幕上绘制图形\n\n> 编辑于2022.06.22\n\n- 原文链接:https://bbs.sipeed.com/thread/1483   有改动\n\n## 摘要\n\n此工程在 LCD 屏幕绘制了两个长方形——一个实心的；另一个空心的。其中空心的边框宽度作为参数可调，并且绘图的颜色还可以通过按钮调整，现已支持红、绿、蓝和白，共四种颜色。\n整体的硬件设计基于半导体提供的 PicoRV32 软核IP，在 OPEN AHB INTERFACE 的处，挂载了 128Kbits 的 BSRAM 用作显存。\n该 128Kbits 的显存，本质上是一颗双端口的 SRAM ，使得 CPU 和自定义的 LCD IP 共同使用该“显存”。LCD IP 独立于CPU工作，节省 CPU 资源，达到 FPGA 加速的效果。\n\n## 设计\n\n### AHB 接口例化\n\nAHB接口用于与CPU交互，LCD接口与LCD IP交互。代码接口如下：\n\n```verilog\nahb2bram ahb2bram(\n    .clk_i(clk50),\n    .reset_i(~sys_rstn),\n\n    .hrdata_o(hrdata),\n    .hresp_o(hresp),\n    .hready_o(hready),\n    .haddr_i(haddr),\n    .hwrite_i(hwrite),\n    .hsize_i(hsize),\n    .hburst_i(hburst),\n    .hwdata_i(hwdata),\n    .hsel_i(hsel),\n    .htrans_i(htrans),\n\n    .lcd_clk_i(clk10),\n    .lcd_rd_i(lcd_rd),\n    .lcd_addr_i(lcd_addr),\n    .lcd_data_o(lcd_data)\n);\n```\n\n### 生成长方形\n\n在这个系统中，CPU主要负责图形的“渲染”，这个在大型系统中常常是GPU来做的。\n这里描述有点夸张了，其实所谓的“渲染”就是画个长方形，CPU 根据 C代码中的顶点坐标，把对应的显存地址填入1或者0。所封装的画实心的API如下\n\n```c\nvoid draw_rectangle(uint8_t top_x, uint8_t top_y, uint8_t btm_x, uint8_t btm_y)\n{\n        uint8_t i,j;\n        uint8_t calc_x;\n        uint8_t calc_y;\n\n        calc_x = top_x/32;\n        calc_y = top_y/32;\n  \n        for(i=0; i<Y_MAX; i++)\n                for(j=0; j<X_MAX; j++)\n                {\n                        if(j>=calc_x && j<=calc_y && i>=top_y && i<=btm_y)\n                                PCIO_AHBSRAM->SRAM[i*X_MAX+j] = RGB;\n                }\n}\n```\n\n### 例化 LCD \n\nCPU 运行起来后，会根据 C代码 访问 AHB总线，发出读写命令。自定义的 AHB2BRAM 模块，会将总线地址转换成显存地址进行数据读写。将绘制的图形保存在显存中，只要不掉电，就不会丢失。同时，LCD IP 只负责从显存中取数据，按照行场扫描的时序，就可以完完整整的将图形显示在LCD屏幕上了，LCD IP 的接口如下。\n\n```verilog\nVGAMod VGAMod\n(\n    .nRST(sys_rstn),\n    .PixelClk(clk10),\n\n    .lcd_rd_o(lcd_rd),\n    .lcd_addr_o(lcd_addr),\n    .lcd_data_i(lcd_data),\n\n    .LCD_DE(LCD_DE),\n    .LCD_HSYNC(LCD_HSYNC),\n    .LCD_VSYNC(LCD_VSYNC),\n\n    .LCD_B(LCD_B_t),\n    .LCD_G(LCD_G_t),\n    .LCD_R(LCD_R_t)\n);\n```\n\n### 结语\n\n受限于资源，此文实现的系统只有 128Kbits 的显存，而笔者使用的 LCD 的分辨率是480*272，RGB565。如果需要存一幅完整图形需要将显存扩大16倍，似乎超过了Nano 9K板载的这颗FPGA极限。因此，选择折中，不去保存RGB565，而是简单的复制扩展保存的1bit信息到RGB565中，这样颜色深度无法达到65536，只支持红、绿、蓝和白四种颜色。\n\n其实FPGA内封的PSRAM有 64Mbits，足够这块LCD的显存了。以后有机会可以尝试着用这些内存来运行一下 lvgl。\n\n!"}, "/hardware/zh/tang/Tang-Nano-9K/examples/LED.html": {"title": "点灯LED", "content": "---\ntitle: 点灯LED\n---\n\n> 编辑于2022年7月13日\n\n这里我们用点亮板子上的LED来作为例程来快速熟悉一下高云半导体 IDE 的使用流程\n\n## 创建工程\n\n新建工程：File-->NEW-->FPGA Dsign Project-->OK\n![创建工程](./../../Tang-Nano/assets/LED-1.png)\n\n弹出的选项框设置工程名称和路径（路径和文件名称要求是英文路径）\n![设置名称](./../../Tang-Nano/assets/LED-2.png)\n\n选择正确的型号：\n![选择设备](./../nano_9k/Tang_nano_9k_Device_choose.png)\n\n## 准备代码\n    \n新建好工程之后接下来进行代码编辑，可以在下图箭头指示的地方新建 “Verilog File”\n![](./../../Tang-Nano/assets/LED-5.png)\n\n给文件命名（要求写英文名，不然后续综合很容易报错）\n![](./../../Tang-Nano/assets/LED-6.png)\n\n双击文件，可以在右侧的编辑框中进行代码的编写。\n![](./../../Tang-Nano/assets/LED-7.png)\n\n以流水灯为例，将下方的 “LED例程代码” 复制并粘贴到自己创建的文件中，也可以自己编写代码，例程代码地址：\n<https://github.com/sipeed/TangNano-9K-example>\n使用 git clone 后可以在 led/src/LED.v 文件夹内找到代码\n\n```verilog\nmodule led (\n    input sys_clk,          // clk input\n    input sys_rst_n,        // reset input\n    output reg [5:0] led    // 6 LEDS pin\n);\n\nreg [23:0] counter;\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1349_9999)       // 0.5s delay\n        counter <= counter + 1'b1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 6'b111110;\n    else if (counter == 24'd1349_9999)       // 0.5s delay\n        led[5:0] <= {led[4:0],led[5]};\n    else\n        led <= led;\nend\n\nendmodule\n\n ```\n\n上面代码完成后需要在 Project->Configuration->Place&Route->Dual-Purpose Pin 中将 `Use DONE as regular IO` 勾选上，不然下面的综合会报错。\n![img_configuration](./../nano_9k/LED_Configuration.png)\n\n## 综合、约束、布局布线\n\n### 综合\n\n保存编辑的代码后转到 “Process” 界面，双击 “Synthesize” 来对我们所编写的代码进行综合。也可以鼠标右键点击看看有啥功能\n![Synthesize](./../nano_9k/nano_9k_synthsize.png)\n\n运行的结果如下图一样 \n![Finish_Synthesize](./../../Tang-Nano/assets/LED.png) \n\n且下方结果栏不出现任何从报错，说明前面编辑的代码无误，如果有错，根据错误提示进行改正即可。\n\n### 约束\n\n- 此处没有涉及时钟约束\n\n想让 Fpga 实现代码的功能，必须将代码中涉及的端口绑定到 Fpga 实际的引脚上。\n\n如下图，在左边的工作区点击 process，然后双击 FloorPlanner （前面的综合如果运行失败，这一步无法进行）\n\n![FloorPlanner](./../../assets/examples/led_pjt_2.png)\n\n第一次打开会弹出缺少 .cst 文件.选择 “OK” 即可；\n![.cst_file](./../../Tang-Nano/assets/LED-9.png)\n\n可以在这里下载到 Nano 9K 的原理图 [这里](https://dl.sipeed.com/shareURL/TANG/Nano%209K/2_Schematic)\nNano 9K 的 led 部分的原理图如下所示\n![led原理图](./../nano_9k/LED_Pins.png \"nano 9k led pins\")\n\n对于交互式管脚约束有两种方法\n- 将对应的端口拖拽到芯片引脚上\n- 在 IO 约束中输入端口对应的引脚编号\n\n管教绑定的具体方法可以参考 [SUG935-1.3_Gowin设计物理约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG935-1.3_Gowin%E8%AE%BE%E8%AE%A1%E7%89%A9%E7%90%86%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)。\n\n当然别忘了对着原理图把晶振引脚和全局复位按键引脚也绑定一下\n\n下图是本例程管脚约束示例\n![引脚约束](./../nano_9k/LED_FloorPlanner.png)\n\n### 布局布线\n\n> 未开启管脚复用会提示 error2017， 前文提到过启用方法 [准备代码](#准备代码)\n\n到 Process 下运行布局布线，即双击 `Place&Route` ，结果将如下所示：\n![Place&Route](./../nano_9k/LED_Place&Route.png)\n\n## 下载到设备\n\n### 开始下载\n\n双击 Program Device 打开下载软件\n![Programmer](./../../Tang-Nano-4K/assets/Open_Programmer.png)\n\n接下来是连接芯片型号，烧录固件，可参照下图选择芯片(注意这里是9C)：\n![选择](./../nano_9k/nano_9k_device_scan.png)\n\n以烧录进SRAM为例进行说明，如下图：\n设置下载方式：\n![设置sram下载方式](./../nano_9k/nano_9k_sram_program.png \"设置sram下载方式\")\n进行下载：\n![进行sram下载](./../nano_9k/nano_9k_sram_download.png \"进行sram下载\")\n\n### 结果展示\n\n结果显示：\n![流水灯](./../nano_9k/blink.gif)\n\n## 其他\n\n有固化需求的话设置下载到 flash 即可\n![固化](./../nano_9k/access_mode.png)\n\n有问题可以前往[相关问题](./../../Tang-Nano-Doc/questions.html)\n\n当然也欢迎在下面留言\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-9K/examples/LCD.html": {"title": "驱动RGB屏幕", "content": "---\ntitle: 驱动RGB屏幕\n---\n\n> 编辑于2022.04.12\n\n## 先介绍时序\n\nRGB LCD 显示协议和 VGA 类似，通信都有专用的行同步、场同步信号线。它们的主要区别是前者传输用的是数字信号，后者传输走的是模拟信号。\n\n下面就介绍 VGA 的时序\n\n![](./../../assets/examples/lcd_pjt_1.png)\n\n上图分别是 VGA 在数据传输中的行同步、场同步时序\n\n从时序图中可以看出，不论是显示一行数据还是一列数据，都需要一个同步(sync)信号，数据的传输需要在两个同步信号的脉冲之间完成\n\n每一行的数据包括显示前沿(back porch)、有效数据(active video)、显示后沿(front porch)\n\n其中的有效数据就是我们常说的分辨率，而显示前后沿的参数需要参考具体的分辨率与帧数进行设置，相关参数可以参考典型参数，链接在此： http://www.tinyvga.com/vga-timing\n\n这块5寸屏幕的控制时序略有不同，相关参数的设置可以查看[规格书](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet/5.0inch_LCD_Datashet%20RGB.pdf)\n\n其他尺寸的屏幕相关规格书均可以在这里下载 [点我](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet)\n\n下面提供了 LCD 相关时序的截图\n\n![](./../../assets/examples/lcd_pjt_2.png)\n\n![](./../../assets/examples/lcd_pjt_3.png)\n\n上面一张图是时序中的参数表，下面的图是时序图\n\n从时序图中看出，这块屏幕可以不用设置前后沿，可以只设置消影(blanking)时间，通过实际的程序证明，两种方式都是可以的\n\n## 新建工程\n\n具体新建工程的方法可以参考[点灯文章](LED.html)\n\n## 生成屏幕时钟\n\n- 这里需要用到高云半导体官方的IP核\n\n### rPll\n\n板载的晶振时钟为 27MHz ，但是我们的屏幕要求 33.3MHZ 的时钟，所以我们需要使用对应的ip核来生成相应的时钟\n\n这里需要使用到 `IP Core Generate` ，位置在 Tools -> IP Core Generate\n\n![](./../../Tang-Nano-1K/assets/Gowin_IP_rpll.png)\n\n双击 `rpll` ，在弹出窗口 language 选择 Verilog ，CLKIN 为 27MHz ，CLKOUT 为  33.00MHz。\n\n![](./../../Tang-Nano-1K/assets/lcd_rpll.png)\n\n点击ok后提示是否需要添加到当前工程，此时应当选择确定\n\n![](./../../Tang-Nano-1K/Nano_1K_examples/led/assets/add_ip_file_in_project.png)\n\n接着会出现一个例化的tmp文件，用来例化所设置的ip。比如下图中例子\n\n![](./../../Tang-Nano/examples/led/assets/ip_examples.png)\n\n## 屏幕驱动代码\n\n- **首先新建一个额外的verilog文件来保存下面要编写的代码**\n\n### 端口定义\n\n首先需要先定义出驱动屏幕所需要的端口\n\n```verilog\nmodule VGAMod\n(\n    input                   CLK,\n    input                   nRST,\n\n    input                   PixelClk,\n\n    output                  LCD_DE,\n    output                  LCD_HSYNC,\n    output                  LCD_VSYNC,\n\n\toutput          [4:0]   LCD_B,\n\toutput          [5:0]   LCD_G,\n\toutput          [4:0]   LCD_R\n);\n```\n\n本例程使用RGB565作为驱动方式；\n\n### 时序常量\n\n接着定义出时序图上所要求的常量\n\n```verilog\n\nlocalparam      V_BackPorch = 16'd6; //0 or 45\nlocalparam      V_Pluse \t= 16'd5; \nlocalparam      HightPixel  = 16'd480;\nlocalparam      V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam      H_BackPorch = 16'd182; \t\nlocalparam      H_Pluse \t= 16'd1; \nlocalparam      WidthPixel  = 16'd800;\nlocalparam      H_FrontPorch= 16'd210;\n\nlocalparam      PixelForHS  =   WidthPixel + H_BackPorch + H_FrontPorch;  \t\nlocalparam      LineForVS   =   HightPixel + V_BackPorch + V_FrontPorch;\n\n```\n\n首先是设置时序相关的参数：前沿、后沿、有效像素\n\n关于显示前沿、后沿，前面也说了，可以合并为一个消影时间，就是可以把其中一个设置为0，另一个设置为消影时间。反正前后沿的时间加起来符合表中的时间要求就可以\n\n### 定义变量\n\n- 定义一些变量能够容易编写程序\n  \n```verilog\n\nreg [15:0] LineCount;\nreg [15:0] PixelCount;\n\nreg\t[9:0]  Data_R;\nreg\t[9:0]  Data_G;\nreg\t[9:0]  Data_B;\n\n```\n\n### 同步信号\n\n这段代码产生同步信号，需要注意的是，这块屏幕的同步信号是负极性使能\n\n```verilog\n    always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n            LineCount       <=  16'b0;    \n            PixelCount      <=  16'b0;\n            end\n        else if(  PixelCount  ==  PixelForHS ) begin\n            PixelCount      <=  16'b0;\n            LineCount       <=  LineCount + 1'b1;\n            end\n        else if(  LineCount  == LineForVS  ) begin\n            LineCount       <=  16'b0;\n            PixelCount      <=  16'b0;\n            end\n        else\n            PixelCount      <=  PixelCount + 1'b1;\n    end\n\n   always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n\t\t\tData_R <= 9'b0;\n\t\t\tData_G <= 9'b0;\n\t\t\tData_B <= 9'b0;\n            end\n        else begin\n\t\t\tend\n\tend\n\n//注意这里HSYNC和VSYNC负极性\nassign  LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) ? 1'b0 : 1'b1;\nassign  LCD_VSYNC = ((( LineCount  >= V_Pluse )&&( LineCount  <= (LineForVS-0) )) ) ? 1'b0 : 1'b1;\n```\n\n### 使能信号\n\n这段代码设置 LCD 使能图像显示，这块屏幕需要控制一个管脚用作显示开关，实际这个信号就是传输图像有效的那 800*480 的数据时置 1\n  \n```verilog\nassign  LCD_DE = (  ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 ))  ? 1'b1 : 1'b0;\n                    //这里不减一，会抖动\n```\n\n### 测试彩条\n\n- 这段代码用来产生 LCD 的测试数据，产生彩条显示\n\n```verilog\nassign  LCD_R   =   (PixelCount<200)? 5'b00000 : \n                    (PixelCount<240 ? 5'b00001 :    \n                    (PixelCount<280 ? 5'b00010 :    \n                    (PixelCount<320 ? 5'b00100 :    \n                    (PixelCount<360 ? 5'b01000 :    \n                    (PixelCount<400 ? 5'b10000 :  5'b00000 )))));\n\nassign  LCD_G   =   (PixelCount<400)? 6'b000000 : \n                    (PixelCount<440 ? 6'b000001 :    \n                    (PixelCount<480 ? 6'b000010 :    \n                    (PixelCount<520 ? 6'b000100 :    \n                    (PixelCount<560 ? 6'b001000 :    \n                    (PixelCount<600 ? 6'b010000 :  \n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign  LCD_B   =   (PixelCount<640)? 5'b00000 : \n                    (PixelCount<680 ? 5'b00001 :    \n                    (PixelCount<720 ? 5'b00010 :    \n                    (PixelCount<760 ? 5'b00100 :    \n                    (PixelCount<800 ? 5'b01000 :    \n                    (PixelCount<840 ? 5'b10000 :  5'b00000 )))));\n```\n\n**当然在最后的驱动文件最后别忘记换行加上 endmodule** \n\n到这里驱动模块的编写已经完成了。\n\n## 在顶层模块中例化\n\n- **这里也是要新建verilog文件的**\n- 新建文件之后直接把下面的内容复制进去保存即可\n\n```verilog\nmodule TOP //设置顶层模块\n(\n\tinput\t\t\tnRST,\n    input           XTAL_IN,\n\n\toutput\t\t\tLCD_CLK,\n\toutput\t\t\tLCD_HYNC,\n\toutput\t\t\tLCD_SYNC,\n\toutput\t\t\tLCD_DEN,\n\toutput\t[4:0]\tLCD_R,\n\toutput\t[5:0]\tLCD_G,\n\toutput\t[4:0]\tLCD_B\n\n); // 列出需要的端口\n\n\twire\t\tCLK_SYS;\t\n\twire\t\tCLK_PIX;\n    \n    //例化pll\n    Gowin_rPLL chip_pll(\n        .clkout(CLK_SYS), //output clkout     //200M\n        .clkoutd(CLK_PIX), //output clkoutd   //33.00M\n        .clkin(XTAL_IN)    //input clkin\n    );\t\n\n\tVGAMod\tVGAMod_inst //例化vga驱动\n\t(\n\t\t.CLK\t\t(\tCLK_SYS     ),\n\t\t.nRST\t\t(\tnRST\t\t),\n\n\t\t.PixelClk\t(\tCLK_PIX\t\t),\n\t\t.LCD_DE\t\t(\tLCD_DEN\t \t),\n\t\t.LCD_HSYNC\t(\tLCD_HYNC \t),\n    \t.LCD_VSYNC\t(\tLCD_SYNC \t),\n\n\t\t.LCD_B\t\t(\tLCD_B\t\t),\n\t\t.LCD_G\t\t(\tLCD_G\t\t),\n\t\t.LCD_R\t\t(\tLCD_R\t\t)\n\t);\n\n\tassign\t\tLCD_CLK\t\t=\tCLK_PIX;\n\nendmodule\n```\n\n## 综合、约束、布局布线\n\n### 综合\n\n完成上面步骤后转到“Process”界面下，对编辑好的代码进行综合，即运行“Synthesize” \n![](./../nano_9k/nano_9k_synthsize.png)\n\n运行的结果如下图出现 \n![](./../../Tang-Nano/assets/LED.png) \n\n且下方结果栏不出现任何从报错，说明前面编辑的代码无误，如果有错，根据错误提示进行改正即可。\n\n### 约束\n\n- 此处仅管脚约束\n\n对应的管脚约束如下表格所示；\n关于管脚约束方法可以参考[点灯文章(点我)](./LED.html)里面的约束方法。\n感觉麻烦的话也可以直接复制准备好的[文件(点我)](./lcd_constrains.html)，将页面里的内容复制到工程目录里 .cst 文件中（如果没有.cst 文件那么自己新建一个**物理管脚约束文件**） 即可。\n\n| PORT        | I/O    | PIN | PORT         | I/O    | PIN |\n| ----------- | ------ | --- | ------------ | ------ | --- |\n| LCD_B[4]    | output | 41  | LCD_B[3]     | output | 42  |\n| LCD_B[2]    | output | 51  | LCD_B[1]     | output | 53  |\n| LCD_B[0]    | output | 54  | LCD_G[5]     | output | 55  |\n| LCD_G[4]    | output | 56  | LCD_G[3]     | output | 57  |\n| LCD_G[2]    | output | 68  | LCD_G[1]     | output | 69  |\n| LCD_G[0]    | output | 70  | LCD_R[4]     | output | 71  |\n| LCD_R[3]    | output | 72  | LCD_R[2]     | output | 73  |\n| LCD_R[1]    | output | 74  | LCD_R[0]     | output | 75  |\n| LCD_DEN     | output | 33  | LCD_SYNC     | output | 34  |\n| LCD_HYNC    | output | 40  | LCD_CLK      | output | 35  |\n| XTAL_IN     | input  | 52  | nRST         | input  | 4   |\n\n\n### 布局布线\n\n管脚约束之后需要在设置里面开启引脚复用才能完成布局布线。\n\n具体位置在 软件顶部菜单栏 Project -> Configuration -> Place&Route -> Dual-Purpose Pin\n![](./../../Tang-Nano/examples/led/assets/enable_io_mux.png)\n\n设置完上面的之后。\n就可以进行布局布线(Place&Route)了。\n结束后就可以给开发板验证代码内容了。\n\n## 烧录\n\n布局布线结束后生成比特流，就可以烧录开发板了。\n\n\n## 结束\n\n上面差不多叙述了所有代码。\n整个工程可以在参考 [这里](https://github.com/sipeed/TangNano-9K-example) ，对应在lcd_led目录下。\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-9K/examples/spi_lcd.html": {"title": "Spi_lcd", "content": "# Spi_lcd\n\n感谢群友提供的代码，前往 https://github.com/sipeed/TangNano-9K-example/tree/main/spi_lcd 查看详情，相关说明会在整理之后展示。\n\n![spi_lcd](./../nano_9k/spi_lcd.jpg)"}, "/hardware/zh/tang/Tang-Nano-9K/examples/lcd_constrains.html": {"title": "LCD Pin Constrain content", "content": "# LCD Pin Constrain content\n\n- 直接把下面的内容复制进\".cst\"文件即可\n- Copt the following content into the \".cst\" file\n\n```\n\nIO_LOC \"LCD_B[4]\" 41;\nIO_PORT \"LCD_B[4]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_B[3]\" 42;\nIO_PORT \"LCD_B[3]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_B[2]\" 51;\nIO_PORT \"LCD_B[2]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_B[1]\" 53;\nIO_PORT \"LCD_B[1]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_B[0]\" 54;\nIO_PORT \"LCD_B[0]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[5]\" 55;\nIO_PORT \"LCD_G[5]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[4]\" 56;\nIO_PORT \"LCD_G[4]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[3]\" 57;\nIO_PORT \"LCD_G[3]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[2]\" 68;\nIO_PORT \"LCD_G[2]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[1]\" 69;\nIO_PORT \"LCD_G[1]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[0]\" 70;\nIO_PORT \"LCD_G[0]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_R[4]\" 71;\nIO_PORT \"LCD_R[4]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_R[3]\" 72;\nIO_PORT \"LCD_R[3]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_R[2]\" 73;\nIO_PORT \"LCD_R[2]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_R[1]\" 74;\nIO_PORT \"LCD_R[1]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_R[0]\" 75;\nIO_PORT \"LCD_R[0]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_DEN\" 33;\nIO_PORT \"LCD_DEN\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_SYNC\" 34;\nIO_PORT \"LCD_SYNC\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_HYNC\" 40;\nIO_PORT \"LCD_HYNC\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_CLK\" 35;\nIO_PORT \"LCD_CLK\" IO_TYPE=LVCMOS33;\nIO_LOC \"XTAL_IN\" 52;\nIO_PORT \"XTAL_IN\" IO_TYPE=LVCMOS33 PULL_MODE=NONE;\nIO_LOC \"nRST\" 4;\n\n```"}, "/hardware/zh/tang/Tang-Nano-9K/Nano-9K.html": {"title": "Tang Nano 9K", "content": "# Tang Nano 9K\n\n>  编辑时间 2022年1月13日\n\n## 简介\n\nTang Nano 9K 是基于高云半导体 GW1NR-9 FPGA芯片设计的精简型开发板。它搭载的HDMI连接器、RGB接口屏幕连接器、SPI屏幕连接器、SPI FLASH和6个LED使得用户可以方便且快速地进行FPGA验证，RISC-V软核验证和功能样机验证。GW1NR-9拥有的8640 LUT4 逻辑单元除了可以用来设计各种复杂的逻辑电路，还可以运行完整的PicoRV软核，满足了用户学习FPGA、验证软核和深度设计的各种需求。\n\n## 产品参数\n\n| 类别 |数值 |\n| --------------------------------- | ------------------------------------------------------------ |\n| 逻辑单元(LUT4)                    | 8640                                                         |\n| 寄存器(FF)                        | 6480                                                         |\n| 分布式静态随机存储器  <br>SSRAM(bits) | 17280                                                        |\n| 块状静态随机存储器  <br>B-SRAM(bits)  | 468K                                                         |\n| 块状静态随机存储器数目<br>BSRAM（个） | 26                                                           |\n| 用户闪存(bits)                    | 608K                                                         |\n| PSRAM(bits)                       | 64M                                                          |\n| 高性能DSP模块                     | 支持9x9,18x18,36x36bit的乘法运算和54bit累加器                |\n| 乘法器  <br>(18 x 18 Multiplier)      | 20                                                           |\n| SPI FLASH                         | 32M-bits                                                  |\n| 灵活的PLL资源                     | 2个锁相环（PLLs）                                            |\n| 显示屏幕接口                      | HDMI接口, SPI屏幕接口和RGB屏幕接口                           |\n| 调试器                            | 板载BL702芯片，为GW1NR-9提供USB-JTAG下载和USB-UART串口打印功能 |\n| IO                                | • 支持4mA、8mA、16mA、24mA等驱动能力   <br>• 对每个I/O提供独立的Bus Keeper、上拉/下拉电阻及Open Drain输出选项 |\n| 连接器                            | TF卡座子, 2x24P  2.54mm 排针焊盘                             |\n| 按键                              | 2个用户可编程按键                                            |\n| LED                               | 板载6个可编程LED                                             |\n\n### 板载功能框图\n\n![Generated](./assets/clip_image008.jpg)\n\n### 板子引脚图\n\n![Generated](./assets/clip_image010.gif)\n\n## 前代对比\n\nTang Nano 9K 是 Sipeed 所推出的第五款 FPGA 开发板，与在售前代产品参数对比如下：\n\n| 版型               | Tang Nano 1K                             | Tang Nano 4K                             | Tang Nano 9K                                            |\n| :------------------ | :--------------------------------------- | :--------------------------------------- | :------------------------------------------------------ |\n| 外观图          | <img src=\"./../../../zh/tang/Tang-Nano/assets/clip_image002.gif\" width=\"180\" > | <img src=\"./../../../zh/tang/Tang-Nano/assets/clip_image004.gif\" width=\"180\" > | <img src=\"./../../../zh/tang/Tang-Nano/assets/clip_image006.gif\" width=\"180\" >                |\n| 逻辑单元 (LUT4)  | 1152                                     | 4608                                     | 8640                                                    |\n| 硬核处理器 |                                         | Cortex M3                                |                                                        |\n| 板载晶振  | 27MHZ                                    | 27MHZ                                    | 27MHZ                                                   |\n| 屏幕接口   | RGB 屏幕接口                   | HDMI 接口                                    | HDMI 接口, <br>RGB 屏幕接口,<br>SPI 屏幕接口 |\n| 摄像头接口              |                                        | 默认 OV2640                           |                                                        |\n| 外部存储  | 仅预留焊盘                       | 32Mbits SPI flash                        | 32Mbits SPI flash                                       |\n| TF 卡槽        |                                         |                                         | 有                                                     |\n| 下载器            | 板载 USB-JTAG                         | 板载 USB-JTAG                         | 板载 USB-JTAG & USB-UART                             |\n\n## 适用人群\n\n| 用法     | FPGA                             | MCU                                | FPGA+MCU                     |\n| :---- | :---------- | :------------- | :----------------- |\n| 语言     | Verilog HDL/Verilog         | C/C++               | Verilog HDL/Verilog ，  C/C++                |\n| 简介     | 上板验证用户HDL | 用户将软核的比特流文件下载到芯片后可将<br>GW1NR-9当做普通的MCU来使用  | 烧入软核后可以进行双核开发 |\n| 适用人群 | 初学者，FPGA开发者        | RISC-V开发者，Cortex-M开发者          | 资深软硬件工程师             |\n\n## 上手指引\n\n1. 安装IDE和填写正确的License：[点击这里](https://wiki.sipeed.com/soft/Tang/zh/Tang-Nano-Doc/get_started/install-the-ide.html)\n\n2. 阅读：[SUG100-2.6_Gowin云源软件用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG100-2.5_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n\n3. 阅读这个[教程](./examples/LED.html)完成点灯实验。\n\n    建议新手在完成这一步之后，自己重新独立新建项目、编写代码，完成这个实验，并且按自己的想法修改点灯程序，增强对FPGA和硬件描述语言的理解。\n    建议在这个过程阅读以下内容，阅读完才进入下一步：\n    - Verilog代码规范（自行搜索，从初学就培养良好的代码规范是非常必要的）\n\n下面的这些内容对于初学者来说是非常有用的，对未来深入学习 FPGA 很有帮助。\n\n   - [SUG100-2.6_Gowin云源软件用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG100-2.6_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG949-1.1_Gowin_HDL编码风格用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG949-1.1_Gowin_HDL%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - <a href=\"http://cdn.gowinsemi.com.cn/UG286-1.9.1_Gowin%E6%97%B6%E9%92%9F%E8%B5%84%E6%BA%90(Clock)%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\">UG286-1.9.1_Gowin时钟资源(Clock)用户指南.pdf</a>\n   - [SUG940-1.3_Gowin设计时序约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG940-1.3_Gowin%E8%AE%BE%E8%AE%A1%E6%97%B6%E5%BA%8F%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG502-1.3_Gowin_Programmer用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG502-1.3_Gowin_Programmer%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG114-2.5_Gowin在线逻辑分析仪用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG114-2.5_Gowin%E5%9C%A8%E7%BA%BF%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90%E4%BB%AA%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n\n上面的都已经打包进了下载站[点我跳转](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/CN/%E9%80%9A%E7%94%A8%E6%8C%87%E5%BC%95)。可以点击压缩包全都下载下来\n\n其他学习链接：\n+ 在线免费教程：[菜鸟教程](https://www.runoob.com/w3cnote/verilog-tutorial.html)（学习Verilog）\n+ 在线免费FPGA教程：[Verilog](https://www.asic-world.com/verilog/index.html)\n+ 在线高云半导体官方视频教程：[点击这里](http://www.gowinsemi.com.cn/video_complex.aspx?FId=n15:15:26)\n\n1. 按照这个[教程](./examples/LCD.html)进行5寸RGB屏驱动实验（其他尺寸屏幕自行修改一下）。\n   如果用户自行无法完成这个实验，可以下载我们[9K例程](https://github.com/sipeed/TangNano-9K-example)（适配9K板子+5寸屏）查看哪个步骤没做正确\n\n    注意：屏幕接线时需要注意排线的1脚对应连接器旁的1脚丝印\n\n    需要阅读的文档：\n    - rPLL IP核的说明文档：在IDE里>Tools>IP Core Generator>Hard Module>CLOCK>rPLL>点击弹出界面右下角的Help按键就会弹出说明文档\n        <details>\n        <summary><font color=\"#4F84FF\">点开查看说明位置</font></summary>\n        <img src=\"./../assets/ip-reference.png\">\n        </details>\n    - SUG284-2.1E_Gowin IP Core Generator User Guide.pdf \n    - [5寸屏规格书](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf)：(主要是获取CLK是33.3Mhz这个信息)\n\n## 例程汇总\n\n访问 [相关例程](./../Tang-Nano-Doc/examples.html)\n\n## 硬件资料汇总\n\n规格书、原理图、尺寸图、3D文件等均可在这里找到：[点击这里](https://dl.sipeed.com/shareURL/TANG/Nano%209K)\n\n## 注意事项\n\n1. 如果有什么疑问，欢迎加群 `834585530`, 或者去[论坛](bbs.sipeed.com)发帖\n   \n2. 下载 FPGA 是要求使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件。不然有极大概率不能下载固件到板子。\n   \n3. 有问题的话先去 [常见问题](./../Tang-Nano-Doc/questions.html) 自查，通常来说使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件能解决 99% 问题。\n\n4. 避免使用JTAG、MODE、DONE等引脚。如果一定要使用这些引脚，请查看 [UG292-1.0原理图指导手册](http://cdn.gowinsemi.com.cn/UG293-1.0_GW1NZ%E7%B3%BB%E5%88%97FPGA%E4%BA%A7%E5%93%81%E5%8E%9F%E7%90%86%E5%9B%BE%E6%8C%87%E5%AF%BC%E6%89%8B%E5%86%8C.pdf)\n\n5. 请注意避免静电打到PCBA上；接触PCBA之前请把手的静电释放掉\n\n6. 每个GPIO的工作电压已经在原理图中标注出来，请不要让GPIO的实际工作的电压超过额定值，否则会引起PCBA的永久性损坏\n\n7. 在连接FPC软排线的时候，请确保排线无偏移、完整地插入到排线中，且线序正确没有接反\n\n8. 请在上电过程中，避免任何液体和金属触碰到PCBA上的元件的焊盘，否则会导致短路，烧毁PCBA"}, "/hardware/zh/tang/Tang-Nano-9K/Tang-nano-9k.html": {"title": "Tang nano 9k 一些例程", "content": "---\ntitle: Tang nano 9k 一些例程\n---\n\n对于Programmer(下载程序)建议使用 https://dl.sipeed.com/shareURL/TANG/programmer 里面的文件。\n下载后解压替换掉Gowin对应安装目录的Programmer文件夹即可。\n不会替换的话可以在下载解压后的Programmer程序中手动添加对应下载文件来进行烧录。\n\n- [点灯例程](./examples/LED.html)\n- [驱RGB屏教程](./examples/LCD.html)\n- [PicoRV 在9K上运行的示例](./examples/picorv.html)\n- litex在9K上使用示例：即将更新\n- 使用软核驱动SPI屏幕：待更新\n- ~~FPGA驱动1.14寸SPI屏幕：待更新~~\n- HDMI显示例程：即将更新\n- 驱动MIPI接口屏幕：待更新\n- 其他（有什么想法可以提出来，可行的话或许会被采纳）"}, "/hardware/zh/maixface/mfst40/mfst40.html": {"title": "MF-ST40 人脸识别模块", "content": "---\ntitle: MF-ST40 人脸识别模块\nkeywords: M1s DOCK ,BL808, M1s\nupdate:\n  - date: 2022-11-07\n    version: v0.1\n    author: wonder\n    content:\n      - 初次编写\n---\n\n> 本产品不对个人技术支持，个人需求请购买 [M1s 模组](./../../maix/m1s/m1s_module.html)\n\n## 产品概述\n\nMF-ST40 人脸识别模组基于博流 BL808 芯片设计，模组内部预留了 WIFI 功能、 SPI 屏幕接口、多路 UART 接口和 RTC 电路，较大地提高了用户整机产品的集成度。\n\n购买链接：[淘宝](https://item.taobao.com/item.htm?id=690754113762)\n\n---\n\n产品图片：\n\n<table>\n    <tr>\n    <th align=\"center\">模组图片</th>\n    <th align=\"center\">演示机图片</th>\n    </tr>\n    <tr>\n    <td>\n    <table>\n        <tr>\n        <td align=\"center\">正面图</td>\n        <td align=\"center\">背部图</td>\n        </tr>\n        <tr>\n        <td><img alt=\"product_top\" src=\"./assets/product_top.jpg\"></td>\n        <td><img alt=\"product_bottom\" src=\"./assets/product_bottom.jpg\"></td>\n        </tr>\n    </table>\n    </td>\n    <td>\n    <table>\n      <tr>\n      <td align=\"center\">正面图</td>\n      <td align=\"center\">背部图</td>\n      </tr>\n      <tr>\n      <td><img alt=\"product_top_screen\" src=\"./assets/product_top_screen.jpg\"></td>\n      <td><img alt=\"product_bottom_screen\" src=\"./assets/product_bottom_screen.jpg\"></td>\n      </tr>\n    </table>\n    </td>\n    </tr>\n<table>\n\n## 关键特性\n\n- 主处理器：博流 808 双核 AI 芯片\n- 核心算法：活体人脸识别\n- 识别距离：0.35-0.9m\n- 识别速度：上电到解锁 1.0 秒内\n- 识别角度：H50° V70°\n- 识别环境：无环境光也可以识别\n- 功耗：单次解锁 0.36mWh\n- 兼容主流锁孔、可选电子猫眼、可选音视频对讲\n- 应用：门锁、考勤机、其他人脸识别终端产品\n\n## 相关资料\n\n详细说明请查阅下方的 [规格书](https://dl.sipeed.com/shareURL/MaixFace/MF-SF40/1_Specification)\n\n- [规格书](https://dl.sipeed.com/shareURL/MaixFace/MF-SF40/1_Specification)\n- [原理图](https://dl.sipeed.com/shareURL/MaixFace/MF-SF40/2_Schematic)\n- [点位图](https://dl.sipeed.com/shareURL/MaixFace/MF-SF40/3_Bit_number_map)\n- [尺寸图](https://dl.sipeed.com/shareURL/MaixFace/MF-SF40/4_Dimensional_drawing)\n- [3D 模型文件](https://dl.sipeed.com/shareURL/MaixFace/MF-SF40/5_3D_file)\n- [芯片手册](https://dl.sipeed.com/shareURL/MaixFace/MF-SF40/6_Chip_Manual)\n\n## 注意事项\n\n<table>\n    <tr>\n        <th>项目</th>\n        <th>注意事项</th>\n    </tr>\n    <tr>\n        <td>静电防护</td>\n        <td>请避免静电打到 PCBA 上；接触 PCBA 之前请把手的静电释放掉</td>\n    </tr>\n    <tr>\n        <td>容忍电压</td>\n        <td> 每个 GPIO 的工作电压已经在原理图中标注出来，请不要让 GPIO 的实际工作的电压超过额定值，否则会引起 PCBA 的永久性损坏 </td>\n    </tr>\n    <tr>\n        <td>FPC 座子</td>\n        <td>在连接 FPC 软排线的时候，谲确保排线无偏侈地完整地插入到排线中</td>\n    </tr>\n    <tr>\n        <td>插拔</td>\n        <td>请完全断电后才进行插拔操作</td>\n    </tr>\n    <tr>\n        <td>避免短路</td>\n        <td>请在上电过程中，避免任何液体和金属触碰到 PCBA 上的元件的焊盘，否则会导致路，烧毁 PCBA</td>\n    </tr>\n</table>\n\n## 技术支持\n\nMF-ST40 为商业合作产品，不对个人用户进行技术支持，个人用户建议使用 [M1s 模组](./../../maix/m1s/m1s_module.html)。\n联系邮箱: `support@sipeed.com`"}, "/hardware/zh/maixface/core_modules/k210_core_modules.html": {"title": "K210 核心模块", "content": "# K210 核心模块\n\n现有四款基于 K210 开发的 AIOT 模块：M1, M1w, M1n, MF0\n\n- 特性说明：\n\n这四款模块都是基于嘉楠堪智科技的边缘智能计算芯片K210（RISC-V架构）设计的。主控芯片内置64位双核高性能低功耗处理器，每个核都有浮点运算单元（FPU），具备卷积人工神经网络智能硬件加速器（KPU）和快速傅里叶变换加速器（FFT）、搭载现场可编程IO阵列（FPIOA），支持多种主流AI编程框架。\n\n\n### Maix AIOT 模块差异对比\n\n|                            | M1                                                           | M1w                                                         | M1n                                                          | MF0                                                          |\n| -------------------------- | ------------------------------------------------------------ | ----------------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 外观                       | ![M1 模组](./../assets/mf_module/m1_m1w/sipeed_m1_module.png) | ![M1W 模组](./../assets/mf_module/m1_m1w/sipeed_m1w_module.png) | ![M1n 模组](./../assets/mf_module/m1n/sipeed_m1n_module.png) | ![MF0 模组](./../assets/mf_module/mf0_mf0dock/sipeed_mf0_module.png) |\n| 尺寸                       | 25.4x25.4x3.3（mm）                                          | 25.4x25.4x3.3（mm）                                         | 25.0x22.0x2.7（mm）                                          | 20.0x20.0x4.5（mm）                                          |\n| 电压输出（提供给底板使用） | 1.8V和3.3V                                                   | 1.8V和3.3V                                                  | 1.8V和3.3V                                                   | 3.3V                                                         |\n| 最大功耗（非瞬态）         | 1.5W                                                         | 3W                                                          | 1.5W                                                         | 1.5W                                                         |\n| WIFI功能                   | 无                                                           | 有（K210与ESP8285通过SPI接口和串口连接）                    | 无                                                           | 无                                                           |\n| 板载摄像头连接器           | 无                                                           | 无                                                          | 有（仅兼容单摄像头）                                         | 有（仅兼容单摄像头）                                         |\n| 引脚形式                   | 邮票孔                                                       | 邮票孔                                                      | NGFF金手指 B-KEY                                             | 2.54mm间距直插焊盘+SMD焊盘                                   |\n| 是否引出摄像头信号         | 全引出                                                       | 全引出                                                      | 全引出                                                       | 无                                                           |\n| 是否引出屏幕信号           | 全引出                                                       | 全引出                                                      | 全引出                                                       | 无                                                           |\n| 引出普通IO口数量           | 48个（全引出）                                               | 48个（全引出）                                              | 44个（IO0-3没引出）                                          | 9个                                                          |\n\n\n\n## 模块引脚定义\n\n具体可下载规格书\n\nM1/M1w: https://dl.sipeed.com/MAIX/HDK/Sipeed-M1&M1W/Specifications\n\nM1n: https://dl.sipeed.com/MAIX/HDK/Sipeed-M1n\n\nMF0: https://dl.sipeed.com/MAIX/HDK/Sipeed-MF0/MF0-2802\n\n## M1/M1W(k210) ISP 模式(烧录模式)\n\n更新 K210 时，需要让 K210 进入 ISP 模式，相关信息如下：\n\n- ISP 引脚\n\n  | ISP 引脚 | 描述       | 备注     |\n  | ------------- | ---------- | -------- |\n  | BOOT (IO_16)         | 启动模式选择 | 低电平进入，ISP 模式 |\n  | ISP_RX (IO_4)         | ISP 串口数据接收 |  |\n  | ISP_TX (IO_5)         | ISP 串口数据发送 |  |\n\n- Boot 选择\n\n **IO_16** 用于 **boot** 模式选择，上电时，拉高进入 **Flash** 启动，拉低进入 **ISP** 模式\n\n  | Boot 选择引脚 | 拉高       | 拉低     |\n  | ------------- | ---------- | -------- |\n  | IO_16         | Flash 启动 | ISP 模式 |\n\n> K210 ISP 模式下，串口波特率建议配置为: 115200，1 停止位，8 数据位，不校验。\n\n- 参考自动进入下载模式电路：\n\n![](../../assets/mf_module/m1_m1w/K210_boot_reference.png)\n\n\n参考来源：\n\n> 《K210技术规格书 v0.1.5》\n> - 2.5 特殊引脚:\n    IO_16 用于 boot 模式选择，上电复位时，拉高进入 FLASH 启动，拉低进入 ISP 模式。复位后，IO_0、\n    IO_1、IO_2、IO_3 为 JTAG 引脚。IO_4、IO_5 为 ISP 引脚。\n\n## MF PCB 注意事项\n\n使用 K210(M1/M1W) 自行设计人脸识别产品，请参考 [《MF 人脸识别模块 PCB 设计注意事项》](../mf_ml_module/mf_precautions.html)"}, "/hardware/zh/maixface/mf_ml_module/mf_precautions.html": {"title": "MF PCB 设计注意事项", "content": "# MF PCB 设计注意事项\n\n## 补光灯：\n\n1、850nm 红外补光灯可以考虑选用 1W 或者 3W 功率的灯珠，因为更大功率的灯珠可以延长使用寿命、减少故障率和提高识别效果\n\n2、红外灯珠和白光灯珠的驱动电路和元件参数，一定要根据实际灯珠选型和数量决定。因为不同的电路成本不一样，亮度感觉不一样，不同客户的需求不一样，因此客户需要根据实际情况选择和调整参数。强烈建议使用光度计去控制整个设计调试和批量生产的红外灯珠亮度的一致性\n\n3、850nm 光线具有一定的穿透性。 目前已证实红外补光灯的 850nm 光线会从摄像头模组的四周和后背穿透进去，影响成像，进而影响屏幕画面或者影响识别效果。 因此必须在摄像头和补光灯之间，用 850nm 无法穿透的材料/喷漆/胶布等阻隔从灯珠散射到摄像头内部的红外光线。 另外，也可以通过拉开红外灯珠与摄像头的距离，距离保持 15mm 以上就能减少 80% 的负面影响，距离保持 20mm 以上，红外线就基本不会透射进摄像头了\n\n4、红外补光灯与外壳前盖板（亚克力/塑料等材质）之间的距离应尽量少，即补光灯与盖板尽量紧贴。如果补光灯与盖板距离较大，会严重影响识别效果\n\n5、在白光补光灯方面，尽量放置多个LED，使用均光板做柔光处理。均光板的面积尽量大。目前市面上的方案有圆圈跑道式的均光板，有小范围片状式的均光板，这个请客户的结构工程师在使用体验和外观设计上对此进行设计。如果不做柔光处理，白光补光灯会刺眼，并且使用户眼睛有十几秒的残影，使用体验不好\n\n6、白光灯珠和红外灯珠的焊盘，需要连接到尽可能大的铜皮，以此提高散热性能\n\n7、白光补光灯对地的电容应该去掉，否则会导致开灯的时候复位\n\n\n\n## 基本信息：\n\n1、M1/M1w 模块底部的散热焊盘，需要连接到尽可能大的铜皮，以此提高散热性能\n\n2、模块的 5V 是输入，外部给模块供电的；模块的 1.8V 和 3.3V 是模块内部 DC-DC 生成的，主要是给模块内部核心元件使用的，其次是给模块外部的小电流元件使用（比如作为屏幕和摄像头的 1.8V 参考电压等小电流需求。不建议提供给模块外部的大电流元件使用）\n\n3、如果需要做电容触摸，尽量把触摸芯片放到靠近手指触摸的位置之下。因为触摸芯片到触摸面板之间的走线长度，长度越长越难把握灵敏度、越容易受干扰\n\n4、如果使用 M1w 模块，则需要遵守天线的摆放原则来摆放 IPEX 2.4G 天线，否则信号会有较大程度的损失\n\n5、M1/M1w 模块的 RST、BANK6/7、摄像头 8 位数据和屏幕 8 位数据的工作电压和容忍电压都是 1.8V，BANK0/1/2/3/4/5 的工作电压和容忍电压都是 3.3V 耐压，一定不能超出耐压范围使用。如果要把 RST 引脚引出使用，强烈建议增加保护电路，以下两种电路都可以起到保护/兼容更高电平的作用：\n\n![](./../assets/other/mf_precautions.png)\n\n6、IO16（BOOT）要在底板加 10K 上拉电阻到 3.3V\n\n7、FPIOA 允许用户将 255 个内部功能映射到芯片外围的 48 个自由 IO 上\n\n8、M1 和 M1w 的区别是：M1 没有 WIFI，M1w 有 WIFI，M1w 模块的 IO0-IO3 这 4 个引脚是 K210 与 WIFI(ESP8285) 芯片之间的 SPI 连接，因此不能用作其他用途\n\n9、请一定要在 PCB 上预留 M1/M1w 模块的 K210 和 WIFI 的下载接口，具体可以参考我们提供的标案原理图\n\n### 认证方面：\n\n1、所有信号都要在靠近源端的地方预留串联磁珠或者RC 低通滤波电路，用来消除过冲和振铃。\n    RC 参数是 100R+100PF（这是屏幕信号的参数，其他信号必须根据实际测试决定，不能影响正常功能）。\n    低通 RC 形式是指：信号从源端输出先经过电阻/磁珠后经过电容，RC 元件靠近源端放置。\n\n2、尽量在各路电源VCC预留串联焊盘，可能需要焊接磁珠或者电感，注意磁珠需要选择额定电流大于实际工作电流的\n\n3、尽量在每个可能泄漏的位置、使用到的IO和电源线路等地方加上 ESD 二极管。ESD 二极管放置的位置根据ESD设计原则摆放\n\n4、为了提高ESD防护性能，应该在屏幕到主板之间预留足够的位置放置导电泡棉。主板在该位置阻焊开窗。该位置应尽量接近供电电源的GND\n\n5、PCB四周尽量打过孔，让过孔包围着PCB，元件需要远离可能的静电泄露点"}, "/hardware/zh/maixface/mf_ml_module/mf0_ml_module.html": {"title": "MF0 机器学习核心模组", "content": "# MF0 机器学习核心模组\n\n## 软硬件概述\n\nMF0 人脸识别模块外观一览\n\n<table border=\"3\">\n    <tr>\n        <th colspan=3>MF0</th>\n    </tr>\n    <tr>\n        <td width=\"100\">描述</td>\n        <td>正面视图</td>\n        <td>背面视图</td>\n    </tr>\n    <tr>\n        <td  width=\"100\">MF0</td>\n        <td>\n            <img src=\"./../assets/mf_module/mf0_mf0dock/mf0_pin_map.png\" width=\"600\" alt=\"MF0 正面\">\n            Pin Map</br>\n        </td>\n        <td>\n            <img src=\"./../assets/mf_module/mf0_mf0dock/mf0_buttom.png\" width=\"600\" alt=\"MF0 背面视图\">\n        </td>\n    </tr>\n    <tr>\n        <td>MF0 Dock</td>\n        <td>\n            <!-- <img src=\"../assets/mf_module/mf1_bottom_v2(nand).png\" width=\"600\" alt=\"MF1(NAND Flash) 背面视图\"> -->\n        </td>\n        <td>\n        </td>\n    </tr>\n</table>\n\n### 模块特性：\n\n- CPU ：RISC-V 64bit 双核处理器, 400Mhz 标准频率（可超频）\n- 图像识别：QVGA@60FPS/VGA@30FPS\n- 深度学习框架：TensorFlow/Keras/Darknet\n- 外设：FPIOA、UART、GPIO、SPI、I²C、I²S、WDT、TIMER、etc\n- 2.54mm 间距 DIP/SMT 焊盘\n- 能连接到面包板\n- 板载摄像头连接器\n- ROM：4MByte\n- RAM：6MByte （通用） + 2MByte （ KPU 专用）\n\n### 硬件 pin\n\n| No. | 描述 |\n| --- | --- |\n| 24 | 用户 IO24 |\n| 25 | 用户 IO25 |\n| 26 | 用户 IO26，MF0_Dock(LCD_RST) |\n| 27 | 用户 IO27，MF0_Dock(LCD_CLK) |\n| 28 | 用户 IO28，MF0_Dock(LCD_DC) |\n| 29 | 用户 IO29，MF0_Dock(LCD_SDA) |\n| ---  | --- |\n| BOOT | 上电 boot 模式选择（用户 IO16，不建议用户使用） |\n| IO5  | 用户 IO5（ISP_TX） |\n| IO4  | 用户 IO4（ISP_RX） |\n| EN   | MF0 电源使能引脚, 默认高电平使能 |\n| RST  | K210 复位引脚 |\n| VIN  | 外部供电电源 3.4-5.9V（推荐 5.0V） |\n| GND  | 外部供电电源地 |\n| 3V3  | 模块电源 3.3V 输出 |\n\n## 协议\n\n串口协议：\n\nMFO 默认烧录 HEX 协议固件\nMF0 有两种协议固件，方便用户根据具体需求使用\n\n- HEX 格式串口协议固件\n- JSON 格式串口协议固件\n\nHEX 例程\n\n### 串口协议助手\n\n## 更新 MF0 固件\n\nMF0 硬件连接：\n\n| No. | USB 转串口模块 | MF0 IO | 备注 |\n| --- | --- | --- | --- |\n| 1 | 5V | VIN | --- |\n| 2 | GND | GND | --- |\n| 3 | TX | IO4 | --- |\n| 4 | RX | IO5 | --- |\n| 5 | DTR | BOOT | --- |\n| 6 | RTS | RST | --- |\n\n![](./../assets/mf_module/mf0_mf0dock/mf0_flash.png)\n\nMF0 Dock 硬件连接：\n\n根据下表连接之后，使用 kflash_gui 下载时，需要按下 boot 和 rst 按键，并先松开 rst 再松开 boot 按键，确保 K210 进入下载模式（ISP 模式）\n\n| No. | USB 转串口模块 | MF0 Dock IO | 备注 |\n| --- | --- | --- | --- |\n| 1 | 5V | VIN | --- |\n| 2 | GND | GND | --- |\n| 3 | TX | IO4 | --- |\n| 4 | RX | IO5 | --- |\n\n![](./../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_dock_flash.png)\n\n然后使用 kflash_gui 下载 MF0 固件\n\n![](./../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_upgrade_firmwave.png)"}, "/hardware/zh/maixface/mf_ml_module/mf5_product.html": {"title": "MF5", "content": "# MF5\n\n## MF5 外观一览\n\n\n## MF5 板载接口\n\n<table border=\"2\">\n    <tr>\n        <th colspan=6>MaixFace 5 引脚信息</th>\n    </tr>\n    <tr>\n        <td colspan=3><img src=\"./../assets/mf_module/mf5/mf5_if_1.png\" height=400></td>\n        <td colspan=3><img src=\"./../assets/mf_module/mf5/mf5_if_2.png\" height=400></td>\n    </tr>\n    <tr>\n        <td>Maix Face Slik</td>\n        <td>K210 IO</td>\n        <td>ESP8285 IO</td>\n        <td>Function</td>\n        <td>Remark</td>\n        <td>IO Voltage</td>\n    </tr>\n    <tr>\n        <td>VIN</td>\n        <td>-</td>\n        <td>-</td>\n        <td>电源输入正极</td>\n        <td>12V</td>\n        <td rowspan=22>3.3V</td>\n    </tr>\n    <tr>\n        <td>GND</td>\n        <td>-</td>\n        <td>-</td>\n        <td>电源输入负极</td>\n        <td>电源GND</td>\n    </tr>\n    <tr>\n        <td>NC</td>\n        <td>-</td>\n        <td>-</td>\n        <td>继电器常闭触点</td>\n        <td rowspan=3>继电器</td>\n    </tr>\n    <tr>\n        <td>COM</td>\n        <td>-</td>\n        <td>-</td>\n        <td>继电器公共触点</td>\n    </tr>\n    <tr>\n        <td>NO</td>\n        <td>-</td>\n        <td>-</td>\n        <td>继电器常开触点</td>\n    </tr>\n    <tr>\n        <td>GND</td>\n        <td>-</td>\n        <td>-</td>\n        <td>韦根接口RETURN</td>\n        <td rowspan=3>韦根接口</td>\n    </tr>\n    <tr>\n        <td>WGD0</td>\n        <td>IO14</td>\n        <td>-</td>\n        <td>韦根接口 D0</td>\n    </tr>\n    <tr>\n        <td>WGD1</td>\n        <td>IO15</td>\n        <td>-</td>\n        <td>韦根接口 D1</td>\n    </tr>\n    <tr>\n        <td>GND</td>\n        <td>-</td>\n        <td>-</td>\n        <td>开门信号地</td>\n        <td rowspan=2>开门信号 低电平: Open</td>\n    </tr>\n    <tr>\n        <td>OPEN</td>\n        <td>IO16</td>\n        <td>-</td>\n        <td>开门信号输入</td>\n    </tr>\n    <tr>\n        <td>3V3</td>\n        <td>-</td>\n        <td>-</td>\n        <td>3.3V</td>\n        <td rowspan=6>以太网/刷卡接口</td>\n    </tr>\n    <tr>\n        <td>CS</td>\n        <td>IO24</td>\n        <td>-</td>\n        <td>SPI CS</td>\n    </tr>\n    <tr>\n        <td>MISO</td>\n        <td>IO2</td>\n        <td>-</td>\n        <td>SPI MISO</td>\n    </tr>\n    <tr>\n        <td>SCLK</td>\n        <td>IO1</td>\n        <td>-</td>\n        <td>SPI SCLK</td>\n    </tr>\n    <tr>\n        <td>MOSI</td>\n        <td>IO3</td>\n        <td>-</td>\n        <td>SPI MOSI</td>\n    </tr>\n    <tr>\n        <td>GND</td>\n        <td>-</td>\n        <td>-</td>\n        <td>GND</td>\n    </tr>\n    <tr>\n        <td>5V</td>\n        <td>-</td>\n        <td>-</td>\n        <td>5V</td>\n        <td rowspan=6>串口/K210下载</td>\n    </tr>\n    <tr>\n        <td>RST</td>\n        <td>IO54</td>\n        <td>-</td>\n        <td>K210复位</td>\n    </tr>\n    <tr>\n        <td>BOOT</td>\n        <td>IO16</td>\n        <td>-</td>\n        <td>K210进入ISP模式</td>\n    </tr>\n    <tr>\n        <td>ISPTX</td>\n        <td>IO5</td>\n        <td>-</td>\n        <td>ISPTX</td>\n    </tr>\n    <tr>\n        <td>ISPRX</td>\n        <td>IO4</td>\n        <td>-</td>\n        <td>ISPRX</td>\n    </tr>\n    <tr>\n        <td>GND</td>\n        <td>-</td>\n        <td>-</td>\n        <td>GND</td>\n    </tr>\n</table>\n\n## MF5 固件说明\n\nMF5 为人脸识别门禁成品，默认烧录的固件不支持串口协议；\n\n在烧录串口协议固件之后，协议串口为 WGD0-IO14(RX)，WGD1-1O15(TX)。"}, "/hardware/zh/maixface/mf_ml_module/mf1_ml_module.html": {"title": "MF 人脸识别模块 MF1", "content": "# MF 人脸识别模块 MF1\n\n## **修改记录**\n\n|版本|时间|修改内容|\n|-|-|-|\n|1.0|2019.07.30|初始版本|\n|1.2|2020.08.1| |\n\n## 目录\n\n- [MF 人脸识别模块 MF1](#mf-人脸识别模块-mf1)\n  - [**修改记录**](#修改记录)\n  - [目录](#目录)\n  - [**硬件资源简介**](#硬件资源简介)\n  - [**功能简介**](#功能简介)\n    <!-- - [微信小程序模块](#微信小程序模块) -->\n    <!-- - [二次开发](#二次开发) -->\n<!-- - [**Q&A**](#qa) -->\n\n\n## **硬件资源简介**\n\n<center class=\"half\">\n<img src=\"./../assests/front.png\" width = 50% /><img src=\"assests/bottom.jpg\" width = 50% />\n</center>\n\n* CPU : **RISC-V** 双核 64bit、内置FPU、频率 400Mhz-500Mhz\n* 图像识别：活体识别\n* 双摄像头：红外（IR）+可见光（VIS）\n* 红外填充光：3W 红外发光二极管\n* 显示器：1.33 英寸 IPS、分辨率 240*320显示屏\n* 其他外设：电容触摸按钮/支持 3W 扬声器/MEMS 麦克风/SD NAND/RGB LED\n* 无线功能(可选) : 支持 2.4G 802.11.b/g/n、SPI 连接\n\n* [淘宝购买](https://item.taobao.com/item.htm?spm=a1z10.1-c.w4004-21231188695.25.27ba52b1bsusf7&id=599138281058)\n\n<div STYLE=\"page-break-after: always;\"></div>\n\n## **功能简介**\n\n\n![MF1 引脚图](./../assets/mf_module/mf1/mf1_pin_map.png)"}, "/hardware/zh/maixface/mf_ml_module/mf_update_firmwave.html": {"title": "MF 固件相关升级说明", "content": "# MF 固件相关升级说明\n\n在使用 **MF 人脸识别模块**过程中，如果存在固件存在 bug、有新功能固件 release、误擦除固件、字体资源、图片资源，那么就需要通过烧录还原固件。\n\n## MF 人脸识别模块固件、资源说明\n\n**MF 人脸识别模块** 固件、字体资源、图片资源、说明如下：\n\n\n| 类型     | 烧录地址 | 长度  | 说明 |\n| -------- | -------- | ----- | ---- |\n| 固件     | 0x000000 |       |      |\n| 人脸模型 |          |       |      |\n| 字体资源 |          |       |      |\n| 图片资源 |          |       |      |\n| 板级配置 | 0x7FF000 | 4 KB  |      |\n| 人脸信息 | 0x800000 | 64 KB |      |\n|          |          |       |      |\n\n> 一般开发者在拿到 MF 模块之后，不需要关心该资源分布\n\n- MF 固件说明\n\n| 固件分类        | 方向       | 协议     | 识别方式 | wechat | 固件类型数量 |\n| --------------- | ---------- | -------- | -------- | ------ | ------------ |\n| MF0 体验版模块  | 横版, 竖版 | bin      | vis      |        | 2            |\n| MF1 离线版模块  | 横版，竖版 | bin/json | vis+ir   |        | 8            |\n| MF1_to_MF2  | 横版，竖版 | bin/json | vis+ir   |        | 8            |\n| MF2 微信半成品  | 横版，竖版 | bin      | vis      | 支持   | 2            |\n| MF4 微信 (成品) | 竖版       | bin      | vis      | 支持   | 1            |\n| MF5 微信 (成品) | 竖版       | bin/json | vis      | 支持   | 2            |\n\n- 字体资源\n- 图片资源\n- 清除配信息\n\n## MF1 固件烧录(升级，还原出厂配置)步骤\n\n在使用 **MF 人脸识别模块**过程中，如果存在固件存在 bug、有新功能固件 release、误擦除固件、字体资源、图片资源，那么就需要通过烧录还原固件。\n\n烧录步骤：\n\n1. 烧录 key_gen.bin 获取 key\n\n2. 通过 support@sipeed.com 获取模型文件\n\n3. 烧录模型文件\n\n4. 烧录图片，字体资源，\n\n### 准备：\n\n在升级，还原出厂配置**MF 人脸识别模块** 之前我们需要准备软硬件。\n\n**硬件准备：**\n\n - **MF 人脸识别模块**\n\n - USB Type-C 数据线\n\n**软件准备：**\n\n  - 烧录软件： kflash_gui(这里使用 kflash_gui v1.6.5 版本)\n\n    下载链接:\n    - Github: [kflash_gui](https://github.com/Sipeed/kflash_gui)\n    - Sipeed: [Sipeed 官方下载站 - kflash_gui](https://dl.sipeed.com/MAIX/tools/kflash_gui/kflash_gui_v1.6.5)\n\n  - 烧录资源文件(根据情况烧录)：**MF 人脸识别模块固件**、算法模型文件、字体资源文件、图片资源文件\n\n\n    资源文件获取统一发送邮件到: Email: Support@sipeed.com\n\n      推荐发送邮件格式如下:\n\n      > 问题类型: [MF 固件资源获取/（简短描述你的问题）]\n      >\n      > 使用硬件/固件版本: [MF0/MF1/MF2/MF4/MF5(这里标注使用的究竟是哪个模块、产品)]\n      >\n      > 内容: [最新固件获取/固件丢失/模型丢失(描述相关情况)]\n      >\n      > 机器码: [xxxxxxxxxxxxxxxxxxxxx(只有模型丢失时需要)]\n\n\n### 烧录固件,资源文件\n\n使用USB Type-C 数据线 将**MF 人脸识别模块** 连接 电脑\n\n![MF1 connect USB](./../assets/mf_module/mf1/mf1_view.png)\n\n打开 Kflash_gui 选择需要烧录的文件，选择版型(默认选择`自动选择`， 如果烧录失败则选择 `MaixDuino`)，选择串口号(CH522 有两个串口，失败则尝试另外一个)，配置波特率(默认选择 `150000`, 如果烧录失败则适当减低波特率,如 `115200`)\n\n![image-20200806103433410](./../../maix/assets/kflash_gui/image-20200806103433410.png)\n\n![image-20200806105056527](./../../maix/assets/kflash_gui/image-20200806105056527.png)\n\n## 怎么获取 Key(机器码)\n\n在使用过程中,如果模块的模型丢失或需要更换,需要发送 `Key` 到 <Support@sipeed.com>\n\n推荐发送邮件格式如下:\n\n\n首先下载 [key_gen.bin](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/Sipeed_M1/firmware/key_gen_v1.2.bin)\n\n使用 `kflash_gui` 将固件 `key_gen.bin` 烧录到模块中之后,打开串口,波特率为`115200,8,N,1`\n\n> **[kflash_gui](https://github.com/Sipeed/kflash_gui/releases)** 为 K210 固件烧录工具, 源码: [**Sipeed/kflash_gui**](https://github.com/Sipeed/kflash_gui)\n\n建议使用 [`XCOM`](tools/XCOM_V2.6.exe) 来看串口信息\n\n轻点 `DTR` ,再松开,即可使模块复位,看到启动信息\n\n<center class=\"half\">\n<img src=\"../../../zh/maix/assets/other/how_to_get_key.png\" height = 50% width = 80% />\n</center>\n\n## MF 固件横竖版说明\n\n由于采用的摄像头成像方向不同，相差 90度，摄像头寄存器无法配置旋转（软件旋转降低效率），故有横竖版两种固件；\n\n如何确认摄像头对应的固件：（通过摄像头丝印区分）\n\n| 横板 | 竖版 |\n| --- | --- |\n| ![](./../assets/mf_module/mf1/mf_dual_camera_1.jpg) | ![](./../assets/mf_module/mf1/mf_dual_camera_2.png) |"}, "/hardware/zh/index.html": {"title": "Sipeed 开源产品速览", "content": "---\ntitle: Sipeed 开源产品速览\nkeywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载, 深度学习, 人工智能, K210\ndesc: 矽速科技的开源软硬件 WIKI 资料站\n---\n\n## 总览\n\n- [Maix-I & Zero](#maix-i--zero) 以 MCU 为主控的 AI 开发板\n- [Maix II & III](#maix-ii--iii-系列)： 基于 Linux 系统的 AI 开发板\n- [LicheePI](#licheepi-系列)： Linux 开发板\n- [Tang](#tang-fpga-系列)：FPGA 开发板\n- [MaixSense](#maixsense-系列)：3D TOF 模组\n- [Longon](#longon-系列)：MCU 开发板\n- [MaixFace](#maixface-模组)：商业项目板卡\n- [其他外设](#外设模组)\n\n## Maix-I & Zero \n\n| 项目     | M1/M1w                             | M1n                                | M1s                                                | M0                                          |\n| :------- | :--------------------------------- | :--------------------------------- | :------------------------------------------------- | :------------------------------------------ |\n| 主控     | K210                               | K210                               | BL808                                              | BL702                                       |\n| 核心     | RV64@400MHz * 2                    | RV64@400MHz * 2                    | RV64GCV@480MHz<br>RV32GCP@320MHz<br>RV32EMC@160MHz | RV32@144MHz                                 |\n| RAM      | 8MB                                | 8MB                                | 64MB                                               | 132KB                                       |\n| 无线     | M1w 支持 Wifi                      |                                    | · Wifi<br>· 蓝牙<br>· Zigbee                       | 蓝牙                                        |\n| 封装样式 | 邮票孔                             | 金手指                             | 邮票孔                                             |                                             |\n| 模型平台 | [MaixHub](https://www.maixhub.com) | [MaixHub](https://www.maixhub.com) | [MaixHub](https://www.maixhub.com)                 | [MaixHub](https://www.maixhub.com)          |\n| 尺寸     | 25.4(L)x25.4(W)mm                  | 25.0(L)x22.0(W)mm                  | 31.0(L)x18.0(W)mm                                  |                                             |\n| 详情页   | [点我](./maix/core_module.html)      | [点我](./maix/M1n.html)              | [点我](./maix/m1s/m1s_module.html)                   | [点我](./maixzero/sense/maix_zero_sense.html) |\n\n### Maix-I S\n\n这是一款以博流 808 为主控所制作的 AIOT 模组与核心板\n\n|      | [M1s](./maix/m1s/m1s_module.html)                                                                                                                                                                                   | [M1s Dock](./maix/m1s/m1s_dock.html)                                                                                                                                                                                   |\n| ---- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 图片 | <a href=\"https://wiki.sipeed.com/m1s\"><img src=\"https://gd4.alicdn.com/imgextra/i4/2200606237318/O1CN011g9yY323vhCXEyiKU_!!2200606237318.jpg\" style=\"transform:rotate(270deg);\" alt=\"M1s_module\" width=\"80%\"></a> | <a href=\"https://wiki.sipeed.com/m1s#dock\"><img src=\"https://gd1.alicdn.com/imgextra/i1/2200606237318/O1CN01gE4a1E23vhCV77ggE_!!2200606237318.jpg\" style=\"transform:rotate(270deg);\" alt=\"M1s_Dock\" width=\"80%\"></a> |\n\n<!-- ### Maix-I A -->\n\n### Maix-I\n\n这是 2019 年以 K210 为核心所制作的一系列 AIOT 开发板。\n\n<table role=\"table\" class=\"center_table\">\n    <tbody>\n        <tr>\n            <th scope=\"col\"></th>\n            <th scope=\"col\">Maix Bit</th>\n            <th scope=\"col\">Maix Dock</th>\n            <th scope=\"col\">Maix Duino</th>\n            <th scope=\"col\">Maix nano</th>\n        </tr>\n        <tr>\n             <td style=\"white-space:nowrap\">图片</td>\n            <td> <a href=\"./maix/maixpy_develop_kit_board/maix_bit.html\"\n                    target=\"_blank\"><img\n                        src=\"./maix/assets/dk_board/maix_bit/Bit.png\" ></a> </td>\n            <td><a href=\"./maix/maixpy_develop_kit_board/Maix_dock.html\"\n                    target=\"_blank\"><img\n                        src=\"./maix/assets/dk_board/maix_dock/Dan_Dock.png\" ></a></td>\n            <td><a href=\"./maix/maixpy_develop_kit_board/maix_duino.html\"\n                    target=\"_blank\"><img\n                        src=\"./maix/assets/dk_board/maix_duino/maixduino_0.png\" ></a></td>\n            <td><a href=\"./maix/maixpy_develop_kit_board/maix_nano.html\"><img\n                        src=\"./maix/assets/dk_board/maix_nano/maix_nano.jpg\"  alt=\"Maxi nano\"></a></td>\n        </tr>\n        <tr>\n            <th scope=\"col\"></th>\n            <th scope=\"col\">Maix Cube</th>\n            <th scope=\"col\">Maix Amigo</th>\n            <th scope=\"col\">Maix HAT</th>\n            <th scope=\"col\">Maix Go</th>\n        </tr>\n        <tr>\n             <td style=\"white-space:nowrap\">图片</td>\n            <td><a href=\"./maix/maixpy_develop_kit_board/maix_cube.html\"\n                    target=\"_blank\"><img\n                        src=\"./maix/assets/dk_board/maix_cube/maix_cube.png\" ></a></td>\n            <td><a href=\"./maix/maixpy_develop_kit_board/maix_Amigo.html\"\n                    target=\"_blank\"><img\n                        src=\"./maix/assets/dk_board/maxi_amigo/maix_amigo_0.png\" ></a></td>\n            <td><a href=\"./maix/maixpy_develop_kit_board/maix_go.html\"><img\n                        src=\"./../../soft/maixpy/assets/hardware/grove_ai_hat/grove_ai_hat1.png\"  alt=\"Maix HAT\"></a></td>\n            <td><a href=\"./maix/maixpy_develop_kit_board/maix_go.html\"\n                    target=\"_blank\"><img\n                        src=\"./maix/assets/dk_board/maix_go/Go.jpg\"  ></a></td>\n        </tr>\n    </tbody>\n</table>\n\n### Maix-I S\n\n这是一款以博流 702 为主控所制作的极小开发板\n\n<img src=\"./maixzero/sense/assets/m0sense_1.png\" alt=\"m0sense\" width=35%>\n\n详情页 ：[点我](./maix/../maixzero/sense/maix_zero_sense.html)\n<!-- ![](./maixzero/sense/assets/m0sense_1.png) -->\n\n### 产品支持\n\nMaix 系列产品可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。商业合作可以联系 <support@sipeed.com>。\n\n## Maix-II & III 系列\n\n| 项目     | MaixII-Dock                                                                                                                                                            | MaixII-Sense                                                                                                                                                            | MaixII-S                                                                                                                                                            | MaixIII-axpi                                                                                                                                                            |\n| :------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------ | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 主控     | V831                                                                                                                                                                   | R329                                                                                                                                                                    | V833                                                                                                                                                                | Ax620a                                                                                                                                                                  |\n| 核心     | Cortex A7@800MHz                                                                                                                                                       | Cortex A53\\*2@1.5GHz                                                                                                                                                    | Cortex A7@1.2GHz                                                                                                                                                    | Cortex A7\\*4@1.0GHz                                                                                                                                                     |\n| RAM      | 64MB                                                                                                                                                                   | 256MB                                                                                                                                                                   | 默认128MB                                                                                                                                                           | 默认 1GB                                                                                                                                                                |\n| 无线     | Wifi                                                                                                                                                                   | · Wifi<br>· 蓝牙                                                                                                                                                        | · Wifi                                                                                                                                                              | · Wifi<br>· 蓝牙                                                                                                                                                        |\n| 模型平台 | [MaixHub](https://www.maixhub.com)                                                                                                                                     |                                                                                                                                                                         |                                                                                                                                                                     | [MaixHub](https://www.maixhub.com)                                                                                                                                      |\n| 外观图   | <img src=\"https://gd3.alicdn.com/imgextra/i3/2200606237318/O1CN01dT63dq23vhAOtdtm7_!!2200606237318.png_400x400.jpg\" style=\"transform:rotate(0deg);\" alt=\"MaixII-Dock\"> | <img src=\"https://gd3.alicdn.com/imgextra/i3/2200606237318/O1CN01AJdLYs23vh6b40oy2_!!2200606237318.png_400x400.jpg\" style=\"transform:rotate(0deg);\" alt=\"MaixII-Sense\"> | <img src=\"https://gd2.alicdn.com/imgextra/i2/2200606237318/O1CN01C4iTYi23vh6muQApg_!!2200606237318.png_400x400.jpg\" style=\"transform:rotate(0deg);\" alt=\"MaixII-S\"> | <img src=\"https://gd2.alicdn.com/imgextra/i2/2200606237318/O1CN01AY6Mu123vhBaHWr6H_!!2200606237318.jpg_400x400.jpg\" style=\"transform:rotate(0deg);\" alt=\"MaixIII-Axpi\"> |\n| 详情页   | [点我](./maixii/m2/resources.html)                                                                                                                                       | [点我](./maixii/m2a/maixsense.html)                                                                                                                                       | [点我](./maixii/M2S/V833.html)                                                                                                                                        | [点我](./maixIII/ax-pi/axpi.html)                                                                                                                                         |\n| 备注     |                                                                                                                                                                        |                                                                                                                                                                         | 仅支持商业                                                                                                                                                          |                                                                                                                                                                         |\n\n### Maix-II\n\n<!-- 继经典的 K210 Maix-I 系列 AIOT 板卡之后，Sipeed 继续推出多款可运行完整 Linux 系统的边缘计算板卡，以 MAIX-II，MAIX-III 按照性能依次命名。 -->\n\nMAIX-II 系列包含多款硬件产品，目前有三款产品，分别如下：\n\n<table>\n<thead>\n<tr>\n  <th>产品名称</th>\n  <th>板卡简述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"white-space:nowrap\"><strong>Maix-II Dock</strong></td>\n  <td><strong>推荐产品</strong>，主控芯片为全志 V831, 高性价比能跑 Linux 的SOC，同时支持硬件 AI 加速（0.2Tops 算力），目前软件支持最容易入门，提供 C SDK 和 Python SDK， 以及在线模型训练服务(<a href=\"https://maixhub.com\" target=\"_blank\">MaixHub</a>)</td>\n</tr>\n<tr>\n  <td style=\"white-space:nowrap\"><strong>Maix-II Sense</strong></td>\n  <td>芯片为全志R329，也有提供硬件 AI 加速，0.25Tops 算力。</td>\n</tr>\n<tr>\n  <td style=\"white-space:nowrap\"><strong>Maix-II-S</strong></td>\n  <td>芯片为全志 V833，V831 升级版， 主要用于商业定制用途，个人用户慎重选择。</td>\n</tr>\n</tbody>\n</table>\n\n<!-- * **Maix-II Dock**： **本系列推荐产品**, 芯片为全志 V831, 高性价比能跑 Linux 的SOC，同时支持硬件 AI 加速（0.2Tops 算力），目前软件支持最容易入门，提供 C SDK 和 Python SDK， 以及在线模型训练服务([MaixHub](https://maixhub.com))\n* **Maix-II Sense**： 芯片为全志R329，也有提供硬件 AI 加速，0.25Tops 算力。\n* **Maix-II-S**：芯片为全志 V833，V831 升级版， 主要用于商业定制用途，个人用户慎重选择。 -->\n<!-- \n### MaixII Dock\n\n主控为全志 V831,；单核 Cortex-A7 800MHz， 64MiB 片内 DDR2 内存， 高性价比能跑 Linux 的SOC，同时支持硬件 AI 加速（0.2Tops 算力），可以当成普通 Linux SOC 使用， 也可以用于边缘 AI 应用。\n\n**本系列推荐产品**, 最具性价比， 目前软件支持最容易入门， 支持 C 语言开发，提供 C SDK([libmaix](http://github.com/sipeed/libmaix))； 同时提供 [MaixPy3](/maixpy3) 支持，使用 Python 语言即可开发，可以直接使用大量 Python 库，并且配套 jupyter IDE， 同时 [MaixHub](https://maixhub.com) 完全支持此设备\n\n.. details:: 点开查看产品功能速览视频\n\n    <p align=\"center\">\n        <iframe src=\"//player.bilibili.com/player.html?aid=298543445&bvid=BV1sF411u7xb&cid=586467021&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n    </p>\n\n<table>\n<tr>\n  <td>产品实拍图片</td>\n  <td></td>\n</tr>\n<tr>\n  <td>\n  <img src=\"./../assets/maixII/m2dock.jpg\" alt=\"m2dock\">\n  </td>\n  <td></td>\n</tr>\n</table>\n\n* 购买链接: [sipeed.taobao.com](https://item.taobao.com/item.htm?ft=t&id=635874427363)\n* 详情： [MaixII-Dock](./maixII/M2/resources.html)\n\n### MaixII Sense\n\n其主控芯片为全志 R329，双核 A53@1.5GHz，片内 256MiB DDR3 内存，双核 HiFi4@400MHz 也有提供硬件 AI 加速，0.25Tops 算力， 更加擅长音频领域， 支持 armbian 系统。\n\n官方开放资料很多，目前比较适合动手能力比较强的开发者。\n\n![MaixII-Sense](./maixII/M2A/assets/M2A-1.gif)\n\n* 购买链接: [sipeed.taobao.com](https://sipeed.taobao.com)\n* 详情： [MaixSense](./maixII/M2A/maixsense.html)\n* [极数社区 R329 上手帖](https://aijishu.com/a/1060000000221780)\n* [极数社区 R329 芯片FAQ](https://aijishu.com/a/1060000000291439)\n* [极数社区矽速科技](https://aijishu.com/blog/xisukeji)（很多资料）\n\n### MaixII S\n\n可以理解成 V831 的性能升级版， V831 上的程序可以直接在 V833 上运行；\n此开发板仅支持商业用户，个人用户应当选择 [Maix-II-Dock](./maixII/M2/resources.html) 开发板\n\n<img style=\"max-height: 300px\" src=\"./maixII/M2S/assets/M2s_Dock.jpg\" alt=“M2s_Dock”/>\n\n* 详情： [MaixII S](./M2S/V833.html) -->\n\n### MaixIII\n\n目前 MaixIII axpi 是最新款的 AI 开发板，强烈推荐\n\n![maix-iii-small](./../../soft/ai/assets/maix-iii-small.png)\n\n详情页：[点我跳转](./maixIII/ax-pi/axpi.html)\n\n## LicheePi 系列\n<!-- \nLinux 开发板\n\n![](./lichee/assets/lichee.jpg)\n\n[![lichee](./../assets/lichee.jpg)](./lichee/index.html) -->\n\n<!-- 目前LicheePi相关核心板部分参数对比表格如下： -->\n\n| 类别     | Lichee RV    | Lichee Zero Plus                           | Lichee Zero                    | Lichee nano         |\n| :------- | :----------- | :----------------------------------------- | :----------------------------- | :------------------ |\n| SOC      | Allwinner D1 | Allwinner S3                               | Allwinner V3s                  | Allwinner F1c100s   |\n| CPU架构  | 玄铁 C906    | Cortex™-A7                                 | Cortex™-A7                     | ARM 926EJS          |\n| 运行频率 | 1GHz         | 1.2GHz                                     | 1.2GHz(max)                    | 600MHz(max)         |\n| RAM      | 512MB DDR3   | 128Mbyte DDR3                              | 64MB DRAM                      | 32MB DDR            |\n| FLASH    | 可选SD-nand  | 可选SD Nand、<br>SPI Nor Flash<br>或者eMMC | 预留<br>SOP8 SPI Flash<br>焊盘 | 板载 16MB NOR FLASH |\n| TF连接器 | 有           | 有                                         | 有                             | 有                  |\n\n- LicheePI 是为了能让用户获得优廉的 linux设备，实战linux底层相关的内容的产品。\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Lichee Zero</th>\n<th style=\"text-align:center\">Lichee Nano</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"./lichee/Zero/Zero.html\"><img src=\"./lichee/assets/Zero/Zero_1.png\" alt=\"Lichee Zero\"></a></td>\n<td style=\"text-align:center\"><a href=\"./lichee/Nano/Nano.html\" ><img src=\"./lichee/assets/Nano/Nano_2.png\" alt=\"Lichee Nano\"></a></td>\n</tr>\n</tbody>\n<thead>\n<tr>\n<th style=\"text-align:center\">Lichee Zero Plus</th>\n<th style=\"text-align:center\">Lichee RV</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"./lichee/ZeroPlus/ZeroPlus.html\"><img src=\"./lichee/assets/Zero-Plus/Plus_1.jpg\" alt=\"Tang Nano 4K\"></a></td>\n<td style=\"text-align:center\"><a href=\"./lichee/RV/RV.html\"><img src=\"./lichee/assets/RV/D1-4.png\" alt=\"Lichee RV\"></a></td>\n</tr>\n</tbody>\n</table>\n\n<!-- ### Lichee 核心版照片(Linux)\n\n#### Lichee Zero\n\n<div align=\"center\">\n<a href=\"./Zero/Zero.html\" ><img src=\"./assets/Zero/Zero_1.png\" width=400></a>\n</div>\n\n#### Lichee Nano\n\n<div align=\"center\">\n\n<a href=\"./Nano/Nano.html\" ><img src=\"./assets/Nano/Nano_2.png\" width=400></a>\n\n</div>\n\n#### Lichee Zero Plus\n\n<div align=\"center\">\n\n<a href=\"./ZeroPlus/ZeroPlus.html\"><img src=\"./assets/Zero-Plus/Plus_1.jpg\" width=400></a>\n\n</div>\n\n#### Lichee RV\n\n<div align=\"center\">\n\n<a href=\"./RV/RV.html\"><img src=\"./assets/RV/D1-4.png\" width=400></a>\n\n</div> -->\n\n## Tang FPGA 系列\n\n| 项目            | <p style=\"white-space:nowrap\">Tang Primer 20K</p> | <p style=\"white-space:nowrap\">Tang Nano 9K</p> | <p style=\"white-space:nowrap\">Tang Nano 4K</p> | <p style=\"white-space:nowrap\">Tang Nano 1K</p> |\n| :-------------- | :------------------------------------------------ | :--------------------------------------------- | :--------------------------------------------- | ---------------------------------------------- |\n| 逻辑单元(LUT4)  | 20736                                             | 8640                                           | 4608                                           | 1152                                           |\n| 寄存器（FF）    | 15552                                             | 6480                                           | 3456                                           | 864                                            |\n| S-SRAM (bits)   | 41472                                             | 17280                                          |                                                |                                                |\n| B-SRAM (bits)   | 828K x 46                                         | 468K x 26                                      | 180K x 10                                      | 72K x 4                                        |\n| 用户闪存 (bits) |                                                   | 608K                                           | 256K                                           | 96K                                            |\n| 锁相环 (PLL)    | 4                                                 | 2                                              | 2                                              | 1                                              |\n| 板载 Flash      | 32Mbits NOR Flash                                 | 32Mbits NOR Flash                              | 32Mbits NOR Flash                              | 预留焊盘                                       |\n| 硬核处理器      |                                                   |                                                | Cortex-M3                                      |\n\n- Tang FPGA 系列开发板主要分为 Tang Nano 和 Tang Primer 两个系列。\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tang Primer 20K（核心板）</th>\n<th style=\"text-align:center\">Tang Nano 1K</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"./tang/tang-primer-20k/primer-20k.html\"><img src=\"./tang/../../assets/Tang/primer_20k/primer_20k.png\" alt=\"Tang Primer 20K（核心板）\"></a></td>\n<td style=\"text-align:center\"><a href=\"./tang/Tang-Nano-1K/Nano-1k.html\"><img src=\"./tang/../../assets/Tang/Nano-1K/1K.png\" alt=\"Tang Nano 1K\"></a></td>\n</tr>\n</tbody>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tang Nano 4K</th>\n<th style=\"text-align:center\">Tang Nano 9K</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"./tang/Tang-Nano-4K/Nano-4K.html\"><img src=\"./tang/../../assets/Tang/Nano_4K/Nano_4K.png\" alt=\"Tang Nano 4K\"></a></td>\n<td style=\"text-align:center\"><a href=\"./tang/Tang-Nano-9K/Nano-9K.html\"><img src=\"./tang/../../assets/Tang/Nano-9K/9K.png\" alt=\"Tang Nano 9K\"></a></td>\n</tr>\n</tbody>\n</table>\n\n\n### 售罄产品\n\n|                                       Tang Nano                                       |                                              Tang Primer                                               |\n| :-----------------------------------------------------------------------------------: | :----------------------------------------------------------------------------------------------------: |\n| [![Tang Nano](./tang/../../assets/Tang/Nano/Tang_Nano.jpg)](./tang/Tang-Nano/Nano.html) | [![Tang Primer](./tang/../../assets/Tang/permier/Tang_permier.jpg)](./tang/Tang-primer/Tang-primer.html) |\n\n\n## MaixSense 系列\n<!-- \n3D TOF 模组\n\n[![](./../assets/maixsense.jpg)](./maixsense/index.html) -->\n- 基于 TOF 技术的深度相机\n\n|                                                | Maixsense-a010                               | MaixSense-a075V                             |\n| ---------------------------------------------- | -------------------------------------------- | ------------------------------------------- |\n| 图片                                           | ![me_small](./maixsense/assets/me_small.jpg) | ![me_big](./maixsense/assets/me_big.jpg)    |\n| 接口                                           | 1.25mm 串口连接器 \\*1<br>Type-C USB2.0 \\*1   | 1.25mm 串口连接器 \\*1 <br>Type-C USB2.0 \\*1 |\n| 分辨率                                         | TOF：100x100@30fps                           | RGB：1600x1200@30fps<br>TOF：320x240@60fps  |\n| 视场角                                         | RGB：无<br>TOF：70°(H) * 60°(V)              | RGB：120°<br>TOF：55°(H)*72°(H)             |\n| <p style=\"white-space:nowrap\">TOF 像素尺寸</p> |                                              | 15um                                        |\n| 激光发射器                                     | 40nm VCSEL                                   | 940nm,3W                                    |\n| 测量范围                                       | 0.2-2.5m                                     | 0.15-1.5m                                   |\n| 测量精度                                       | &lt;=1%/cm                                   | &lt;=1%/cm                                  |\n\n## Longon 系列\n\nMCU 开发板\n\n<img src=\"./longan/Nano/assets/longan_nano.jpg\" alt=\"longan_nano\" width=\"40%\">\n\n详情页：[点我](./longan/Nano/assets/index.html)\n\n## MaixFace 模组\n\n- 商业合作模组，无个人支持\n\n前往首页商业方案板块查看对应设备\n\n## 外设模组\n\n前往首页外设模组板块查阅对应设备"}, "/hardware/zh/maixII/index.html": {"title": "Maix-II 系列硬件产品", "content": "Maix-II 系列硬件产品\n===\n\n## Maix-II 简介\n\n继经典的 K210 Maix-I 系列 AIOT 板卡之后，Sipeed 继续推出多款可运行完整 Linux 系统的边缘计算板卡，将以 MAIX-II，MAIX-III 按照性能依次命名。\n\nMAIX-II 系列包含多款硬件产品，目前有:\n* **Maix-II Dock**： **本系列推荐产品**, 芯片为全志 V831, 高性价比能跑 Linux 的SOC，同时支持硬件 AI 加速（0.2Tops 算力），目前软件支持最容易入门，提供 C SDK 和 Python SDK， 以及在线模型训练服务([MaixHub](https://maixhub.com))\n* **MaixSense**： 芯片为全志R329，也有提供硬件 AI 加速，0.25Tops 算力。\n* **Maix-II-S**：芯片为全志 V833，V831 升级版， 主要用于商业定制用途，个人用户慎重选择。\n\n## MaixII Dock\n\n芯片为全志 V831, 单核 Cortex-A7 800MHz， 64MiB 片内 DDR2 内存， 高性价比能跑 Linux 的SOC，同时支持硬件 AI 加速（0.2Tops 算力），可以当成普通 Linux SOC 使用， 也可以用于边缘 AI 应用。\n\n**本系列推荐产品**, 最具性价比， 目前软件支持最容易入门， 支持 C 语言开发，提供 C SDK([libmaix](http://github.com/sipeed/libmaix))； 同时提供 [MaixPy3](/maixpy3) 支持，使用 Python 语言即可开发，可以直接使用大量 Python 库，并且配套 jupyter IDE， 同时 [MaixHub](https://maixhub.com) 完全支持此设备\n\n* 产品功能速览\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=298543445&bvid=BV1sF411u7xb&cid=586467021&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n</p>\n\n* 实拍图：\n![m2dock](../../assets/maixII/m2dock.jpg)\n* 购买链接: [sipeed.taobao.com](https://item.taobao.com/item.htm?ft=t&id=635874427363)\n* 详情： [MaixII-Dock](./M2/resources.html)\n\n## MaixSense\n\n芯片为全志 R329，双核 A53@1.5GHz，片内 256MiB DDR3 内存，双核 HiFi4@400MHz 也有提供硬件 AI 加速，0.25Tops 算力， 更加擅长音频领域， 支持 armbian 系统。\n\n官方开放资料很多，目前比较适合动手能力比较强的开发者。\n\n![](./M2A/assets/M2A-1.gif)\n\n* 购买链接: [sipeed.taobao.com](https://sipeed.taobao.com)\n* 详情： [MaixSense](./M2A/maixsense.html)\n\n\n## MaixII S\n\n可以理解成 V831 的性能升级版， V831 上的程序可以直接在 V833 上运行，此开发板仅支持商业用户，个人用户建议选择 Maix-II-Dock 开发板\n\n<img style=\"max-height: 300px\" src=\"./M2S/assets/M2s_Dock.jpg\" alt=“M2s_Dock”/>\n\n* 详情： [MaixII S](./M2S/V833.html)"}, "/hardware/zh/maixII/M2/flash.html": {"title": "MaixII-Dock 烧录系统", "content": "---\ntitle: MaixII-Dock 烧录系统\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy  MaixII M2dock 烧录系统\n---\n\n> 编辑时间2022.04.27\n\n| 文档更新时间 |    负责人    |        更新内容        |\n| :----------: | :----------: | :--------------------: |\n|  2021.03.20  |    大老鼠    | 新建文档，开始编写内容 |\n|  2021.12.8   | Rui & 点灯鼠 |   整理并更新烧录方式   |\n|   2022.3.8   |     Rui      |   修改烧录的注意事项   |\n\n注意事项！！！\n- 1、非必要的情况下，请不要随意镜像烧录。\n- 2、部分 AMD 平台的电脑存在无法烧录的情况\n- 3、不能保证所有的卡都可以成功的烧录镜像，所以建议用户直接购买官方的镜像卡\n\n## 获取镜像文件\n\n从下载站获取最新的 V831 系统镜像 [SDK_MaixII/release](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/release) ,得到一个压缩包，解压之后就得到一个 .img 文件，这个就是系统镜像文件\n\n> 如果下载站下载的很慢，建议使用百度网盘进行下载，下载站的下载带宽有限。链接：[点我](https://eyun.baidu.com/s/3htTXfaG#sharelink/path=%2F%E4%B8%8B%E8%BD%BD%E7%AB%99%E6%96%87%E4%BB%B6%2FMaixII%2FMaixII-Dock%2FSDK%2Frelease&parent_path=%2F%E6%B7%B1%E5%9C%B3%E7%9F%BD%E9%80%9F%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8)\n\n### 镜像文件命名方式\n\n对于 V831 的镜像文件名字是有对应的规则，以后大家可以根据自己的需求来进行下载\n\n就拿`v831-m2dock-maixhub-0.5.1-20220701.zip`和 ` v831-m2dock-maixpy3-0.5.1-20220701.zip` 这两个镜像文件来说\n\n| 名称          | 含义                                                                                                              |\n| ------------- | ----------------------------------------------------------------------------------------------------------------- |\n| maixpy3-0.5.1 | 此镜像是给 [MaixPy3](https://wiki.sipeed.com/maixpy3) 专用，并内置了`0.5.1`的版本，但其中 **无** 内置 maixhub app |\n| maixhub-0.5.1 | 此镜像是给 [MaixPy3](https://wiki.sipeed.com/maixpy3) 专用，并内置了`0.5.1`的版本，但其中 内置 maixhub app        |\n| m2dock        | 可使用 MaixII-Dock 开发板平台                                                                                     |\n| 20220701      | 镜像更新日期                                                                                                      |\n\n## Windows 上使用 PhoenixCard 烧录镜像\n\nPhoenixSuit 和 PhoenixCard 是常用来烧录全志科技芯片的两种工具，前者通过 USB 烧录到 flash，后者常常用于烧录镜像到 TF 卡中。\n\n### 准备工作\n\n1. 烧录工具 [PhoenixCard](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/tools)\n\n2. 系统 [镜像](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/release)\n\n3. 内存卡格式化工具 [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)\n\n### 系统烧录\n\n1. 将内存卡通过读卡器接到电脑的 USB 口，打开 SD Card Formatter 软件，对内存卡进行格式化。Refresh（刷新）后点击Format（格式化），注意应正确选择选目标SD卡。\n\n     ![image-20210802102810041](./../../../assets/maixII/V831/image-20210802102810041.png)\n\n2. 打开PhoenixCard\n     - 选择 `启动卡` 选项\n     - 选择正确的盘符\n     - 点击 `烧卡`\n     - 根据状态栏的颜色可以判断烧录结果：红色的话说明烧录失败了，建议使用[SD card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)格式化后再重新烧录一次；绿色表示则一切正常。\n\n   ![image-20210802104155132](./../../../assets/maixII/V831/image-20210802104155132.png)\n\n## Linux(Ubuntu) 使用 Livesuit 烧录\n\n### 安装烧录工具 Livesuit \n\n> **每次更新系统 linux kernel 之后需要重新安装软件**\n\n1. 安装依赖 dkms\n\n     ```shell\n     sudo apt install dkms\n     ```\n\n1. 安装 libpng1.2（一定要使用这个版本）\n\n     ```shell\n     wget http://archive.ubuntu.com/ubuntu/pool/main/libp/libpng/libpng_1.2.54.orig.tar.xz\n     tar xvf  libpng_1.2.54.orig.tar.xz\n     ```\n\n     ```shell\n     cd libpng-1.2.54\n     ./autogen.sh\n     ./configure\n     make -j8\n     sudo make install\n     ```\n\n     更新链接库:\n\n     ```shell\n     sudo ldconfig\n     ```\n\n1. 安装 **livesuit**\n\n     ```shell\n     git clone https://github.com/linux-sunxi/sunxi-livesuite.git\n     cd sunxi-livesuite\n     chmod +x LiveSuit.sh\n     sudo ./LiveSuit.sh\n     ```\n\n### 使用 Livesuit 烧录\n\n`sudo livesuit` 打开烧录工具，并点击“固件”选择镜像文件\n\n![](./asserts/flash_15.png)\n\n不插入 SD 卡，将 V831 USB OTG 接口连接到 PC, 提示是否格式化分区，这时候插入 SD 卡，之后点击 `YES`\n\n![](./asserts/flash_17.png)\n\n等待烧录完成，提示“固件升级成功”，即可断开 USB ，至此固件烧录完毕\n\n![](./asserts/flash_19.png)\n\n![](./asserts/flash_21.png)\n\n\n## 附录\n### 烧录系统到 flash 中\n\n[烧录方式](./no_sd_flash.html)\n\n### 无读卡器烧录方式\n\n[烧录方式](./PhoenixSuit.html)\n\n### 使用 dd 烧录\n\n官方没有做 MaixII-Dock 的 dd 镜像相关支持，有需要的可以自行去学习如何制作 dd 镜像的[制作](https://www.cnblogs.com/USTHzhanglu/p/15431249.html)。"}, "/hardware/zh/maixII/M2/no_sd_flash.html": {"title": "无 SD 卡系统烧录方式", "content": "# 无 SD 卡系统烧录方式\n\n- **目前没有在V831上进行过flash系统烧录，V833可以使用一下方式进行烧录，镜像需要发送邮件获取**\n- 如需烧录到V831上，需要自行设计底板，引出fel烧录按键\n\n## 获取烧录工具\n\n- 从网上获取 PhoenixSuit(Windows) 烧录工具。\n  - [baidu-PhoenixSuit](https://www.baidu.com/s?wd=PhoenixSuit)\n  - [bing-PhoenixSuit](https://www.bing.com/search?q=PhoenixSuit&FORM=BESBTB&mkt=zh-CN) \n  - [github-PhoenixSuit](https://github.com/colorfulshark/PhoenixSuit)\n  - [lo4d-PhoenixSuit](https://phoenixsuit.en.lo4d.com/windows)\n\n## Windows 上使用 PhoenixSuit 烧录\n\n获取系统镜像（.img） 和烧录工具（.exe） 。解压到你知道的地方。\n\n![](./../img/no_sd_flash.png)\n\n解压后打开 PhoenixSuit_V1.10 烧录工具 PhoenixSuit.exe 选择烧录的 .img 镜像。\n\n![](./../img/no_sd_flash_1.png)\n\n这时候开始插入硬件， 同时按下硬件的两个按键， 其中一个是 fel 烧录模式的触发， 要注意接线头是否联通。 （若是裸板如右图所示先按 FEL 后按 RST 复位）\n\n![](./../img/no_sd_flash_2.png)\n\n按住后， 此时插入电脑的 USB 口， 相当于上电（RST 复位） 进入烧录模式， 务必注意先按键再通电， 之后需要安装相应的 USB 驱动。\n\n> 如果该电脑插入后设备管理器显示驱动未安装， 请手动指向 PhoenixSuit_V1.10 / Drivers 的驱动文件夹完成安装， 安装完成如下显示 Android ADB Interface ， 如果实在搞不定就使用市面上常见的驱动安装软件（如驱动精灵） 帮助安装。\n\n![](./../img/no_sd_flash_3.png)\n\n这时候 PhoenixSuit 软件会提示是否格式化更新， 一直选是即可， 不成功可以重试或检测接线是否牢固。\n\n![](./../img/no_sd_flash_4.png)\n\n进度状态如下， 直到成功。\n\n![](./../img/no_sd_flash_5.png)\n\n\n<a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>"}, "/hardware/zh/maixII/M2/usage.html": {"title": "进阶使用", "content": "---\ntitle: 进阶使用\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock, Tina, Openwrt\ndesc: maixpy  MaixII M2dock 上手使用\n---\n\n> 没有 Linux 系统使用基础的同学，不推荐以下的使用方式\n\n## 认识 openwrt 系统\n\n> 全志 V831 使用 Tina Linux 系统，移植自 [OpenWrt](https://openwrt.org) 。\n\nOpenWrt 可以被描述为一个嵌入式的 Linux 发行版，详情可看 [官方网址](https://openwrt.org) 和 [官方开源仓库](https://github.com/openwrt/openwrt)。\n\nOpenWRT 是一个高度模块化、高度自动化的嵌入式 Linux 系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及 VOIP 设备中。 同时，它还提供了 100 多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序。\n\nV831 tina 系统支持使用 adb 来操作系统。需要将主机于板子的OTG标识的接口相连。\n\n---\n- Windows 系统需要先下载最新的 adb 然后将其解压并添加到系统路径，接着就可以在命令行中使用 adb shell 连接上 v831.\n- 对于 linux 直接安装 adb 即可，然后在终端执行 adb shell 连接 V831\n---\n\n## 部分常用 Linux 命令\n\n<details>\n  <summary>点击查看部分常用命令</summary>\n   <pre>\nls 查看目录下文件\ncd 打开目录\npwd 打印当前目录\nmv 移动/重命名 文件/文件夹\ncp 复制 文件/文件夹\nrm 删除\nvi 编辑文件内容 #需要使用特定的adb版本能正常显示内容\ntop 查看系统内存\ndf 查看磁盘信息\ntime 查看时间\nifconfig 查看网络信息\nfree 查看剩余内存\nps 查看运行的进程\nkill 终止进程\nkillall 终止所有进程\nchmod 更改 文件/文件夹 权限\npasswd 设置/更改 用户密码\ncat 查看文件内容\nping 检测某网址是否连通\nwget 下载某链接文件\ngrep 搜索文件内容\nln 建立文件链接\n</pre>\n</details>\n\n### Opkg 包管理器\n\nOpkg 是一个轻量快速的套件管理系统，目前已成为 Opensource 界嵌入式系统标准。常用于 路由、 交换机等 嵌入式设备中，用来管理软件包的安装升级与下载。\n\n#### 相关常用命令\n\n- opkg update 更新可以获取的软件包列表\n- opkg upgrade 对已经安装的软件包升级\n- opkg list 获取软件列表\n- opkg install 安装指定的软件包\n- opkg remove 卸载已经安装的指定的软件包\n  \n例如：\n\n```bash\nroot@sipeed:/# opkg list \nMaixPy3 - 0.2.5-1\nalsa-lib - 1.1.4.1-1\nbusybox - 1.27.2-3\nbusybox-init-base-files - 167-1612350358\nca-certificates - 20160104\ncurl - 7.54.1-1\ndropbear - 2015.71-2\ne2fsprogs - 1.42.12-1\neyesee-mpp-external - 1.0-1\neyesee-mpp-middleware - 1.0-1\neyesee-mpp-system - 1.0-1\n```\n\n### pip 包管理器\n\n[pip](https://pypi.org/project/pip/) 是 Python 包管理工具，该工具提供了对 Python 包的查找、下载、安装、卸载的功能。\n\n> 以下讯息由[YanxingLiu](https://github.com/YanxingLiu)提供与测试。\n\n#### pip换源\n\n在安装系统后可以更换镜像源，加速 pip 安装。\n\n#### 临时使用\n\n```python\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\n```\n\nsome-package 请自行更换成你想要安装的包\n\n#### 设为默认\n\n升级 pip 到最新的版本 (>=10.0.0) 后进行配置：\n\n```python\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U\n```\n\n设置清华镜像源为默认：\n\n```python\npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n## 测试屏幕方法\n\n- 请测试前观察系统上电后屏幕是否会闪烁一次；这表示屏幕已经通电、驱动起来，并对其复位（RST）后产生的。\n\n在 Linux Shell 运行 `cat /dev/urandom > /dev/fb0` 就会输入随机数据到 fb0 产生雪花屏了，这表示屏幕显示是正常的。\n\n<center><img src=\"./asserts/lcd_test.jpg\" width=\"400\"></center>\n\n<details>\n  <summary>帧缓冲相关知识</summary>\n   帧缓冲（framebuffer）是 Linux 为显示设备提供的一个接口，把显存抽象后的一种设备。\n   它允许上层应用程序在图形模式下直接对显示缓冲区进行 读写操作。framebuffer 是 LCD 对应的一种 HAL（硬件抽象层），提供抽象的，统一的接口操作，用户不必关心硬件层是怎么实施的。这些都是由 Framebuffer 设备驱动来完成的。帧缓冲设备对应的设备文件为 /dev/fb*，如果系统有多个显示卡，Linux下还可支持多个帧缓冲设备，最多可达 32 个，分别为 /dev/fb0 到 /dev/fb31，而 /dev/fb 则为当前缺省的帧缓冲设备，通常指向 /dev/fb0，在嵌入式系统中支持一个显示设备就够了。帧缓冲设备为标准字 符设备，主设备号为 29 ，次设备号则从 0 到 31 。分别对应 /dev/fb0-/dev/fb31 。\n</details>\n\n## 运行 Python3 解释器\n\n在 Linux 上使用 Python 编程只需要在 adb shell 命令行交互的接口输入 python3 即可启动，可直接复制代码粘贴后按回车键运行。\n\n```python\nimport platform\nprint(platform.uname())\n```\n\n2022年7月6日 实际操作结果：\n\n```bash\n   __   _\n  / /  (_)__  __ ____ __ ------------------------\n / /__/ / _ \\/ // /\\ \\ /  sipeed.com (Neptune)\n/____/_/_//_/\\_,_//_\\_\\  ------------------------\n\nroot@sipeed:/# python3\nPython 3.8.5 (default, Jun 14 2022, 09:51:56)\n[GCC 6.4.1] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import platform\n>>> print(platform.uname())\nuname_result(system='Linux', node='sipeed', release='4.9.118', version='#3242 PREEMPT Tue Jun 28 04:03:38 UTC 2022', \nmachine='armv7l', processor='')\n```\n\n## 测试拍照功能\n\n这里我们使用 [MaixPy3](/maixpy3) 来测试一下摄像头，先以交互模式启动一下 Python,\n\n```python\nfrom maix import camera, display, image \ndisplay.show(camera.capture())\n```\n\n<center><img src=\"./asserts/hello_world.jpg\" width=\"500\"></center>\n\n> 如果屏幕没有显示内容。那么首先确认一下镜像镜像版本，并且确认一下外设和驱动对的上\n\n## 工具链\n\n[这里](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain)提供了在 linux 系统下的编译工具链，有能力的可以自己试一下。无相关支持\n\n建议使用 [MaixPy3](/soft/maixpy3/zh/index.html) 来操作设备\n\n## MaixPy3\n\n本设备建议使用 [MaixPy3](/soft/maixpy3/zh/index.html) 来进行相应的快速开发，相关文档请仔细阅读\n\n## 源码\n\nV831 的源码已经放在  https://github.com/Tina-Linux/tina-V83x ，有需要的可以自行尝试一下"}, "/hardware/zh/maixII/M2/resources.html": {"title": "Maix-II-Dock(M2dock) 介绍", "content": "---\ntitle: Maix-II-Dock(M2dock) 介绍\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: 板级资源介绍\n---\n\nMaix-II-Dock 定位于高性价比的 AIOT 开发板， 支持常规 Linux 开发的同时， 有特有的 **AI 硬件加速** 特性，配合 Sipeed 提供的完整的软件生态，让你快速实现你的边缘 AI 应用。\n\n* **硬件**上， 基于全志 V831 芯片， 以【核心板】+【底板】的形式组成开发板，可以直接使用开发板，也可以只使用核心板根据需求自行设计底板，方便快速完成开发。\n* **软件**上， 除了可以直接使用全志提供的资料进行开发（部分可能需要找全志获取）外，Sipeed 提供了非常方便的 Python SDK（[MaixPy3](/maixpy3)）以及 C SDK （[libmaix](https://github.com/sipeed/libmaix)）；\n更是提供了在线模型训练服务（[MaixHub](https://maixhub.com)），方便刚入门也能快速训练能使用的 AI 模型。\n* **购买**：[sipeed.taobao.com](https://item.taobao.com/item.htm?id=635874427363)\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=298543445&bvid=BV1sF411u7xb&cid=586467021&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n</p>\n\n## M2 核心板\n\n<img style=\"max-height: 260px\" src=\"./asserts/maix_v831.jpg\" alt=\"core_board\"/>\n\n> 核心板硬件资料下载 [Sipeed_Maix_II_3101](https://api.dl.sipeed.com/shareURL/MaixII/MaixII-Dock/HDK/Sipeed_MaixII_V831/Sipeed_Maix_II_3101)\n\n### V831 芯片介绍\n\n全志 V831, 单核 Cortex-A7 800MHz， 64MiB 片内 DDR2 内存， 高性价比能跑 Linux 的SOC，同时支持硬件 AI 加速（0.2Tops 算力），可以当成普通 Linux SOC 使用， 也可以用于边缘 AI 应用， 更详细的参数请看手册和下文。\n\n芯片手册： [V833／V831 Datasheet V1.0.pdf](https://linux-sunxi.org/images/b/b9/V833%EF%BC%8FV831_Datasheet_V1.0.pdf)\n\n内部结构图：\n\n<img style=\"max-height: 400px\" src=\"./asserts/V831_struct.png\" alt=\"V831 struct\"/>\n\n### M2核心板参数\n\n与 Maix-I 对比\n\n| 项目                         | Maix-I (K210)                        | Maix-II (V831)                                                                 |\n| ---------------------------- | ------------------------------------ | ------------------------------------------------------------------------------ |\n| 主控芯片<br> CPU             | 400~600Mhz                           | 800~1000Mhz                                                                    |\n| 视频编码器 <br>Video encoder | None                                 | H.264, up to 1080p@30fps<br>H265, up to 1080p@30fps<br>JPEG, up to 1080p@30fps |\n| AI加速器<br>NPU              | 0.23TOPS<br>support Conv+BN+ACT+POOL | 0.2TOPS<br>support Conv,Inner_Product,Pool,Eltwise,ACT,BN,Split,Concat         |\n| 内存<br>Memory               | 8MB SRAM                             | SIP 64MB DDR2                                                                  |\n| 存储<br>Storage              | 16MB SPI Nor Flash                   | 可选的16M flash(默认空贴)                                                      |\n| 摄像头<br>Camera             | DVP, 最高输入30W像素                 | 2lane MIPI, 最高支持1080P@60fps                                                |\n| 显示<br>Display              | 8bit MCU LCD                         | 8bit MCU LCD, 配转接板可接最大10寸RGB LCD                                      |\n| SDIO                         | None                                 | SMHC x2 (SDC0, SDC1)                                                           |\n| SPI                          | SPIx3                                | SPI x2 (SPI0, SPI1)                                                            |\n| I2C                          | I2C x3                               | I2C x4 (TWI0, TWI1, TWI2, TWI3)                                                |\n| I2S                          | 8bit I2S                             | I2S x1 (I2S0)                                                                  |\n| Ethernet                     | None                                 | 10/100 Mbit/s Ethernet port with RMII interface                                |\n| ADC                          | None                                 | 1-ch 6bit LRADC for key                                                        |\n| Audio                        | None                                 | LINEOUTP + MICIN1P/N                                                           |\n| 开发软件                     | Maixpy/C                             | MaixPy3/linux                                                                  |\n\n## 底板\n\n一般情况下可以认为底板屏幕为正面，带摄像头为背面。\n\n![m2dock](./../../../assets/maixII/m2dock.jpg)\n\n> 底板硬件资料下载 [点我跳转](https://api.dl.sipeed.com/shareURL/MaixII/MaixII-Dock/HDK/Sipeed_MaixII_Dock_V831)\n> 感谢热心网友分享的 [ M2 模块底板母座 PCB 封装](https://bbs.elecfans.com/jishu_2036119_1_1.html)\n\n### 底板硬件参数\n\n![Pin](./asserts/M2Dock_pin.jpg)\n\n| 标号 | Maix II 部件            | 功能                                       | 备注                                         |\n| ---- | ----------------------- | ------------------------------------------ | -------------------------------------------- |\n| 1    | M.2 B-KEY 母座*1        | 用于连接 V831 核心版                       | 出厂已连接                                   |\n| 2    | 核心板M2 铜柱螺母*1     | 用于配合 M2 螺丝固定 V831 核心板           | 出厂已固定                                   |\n| 3    | 电源指示 LED 灯*1       | 用于指示底板是否正常通电                   | ---                                          |\n| 4    | 状态指示 LED灯*1        | 用户可编程LED灯，一般用于状态指示          | ---                                          |\n| 5    | CPU 复位键*1            | 按下可重启 V831 芯片                       | ---                                          |\n| 6    | 用户按键*2              | 可以控制两路 IO 电平，自定义功能           | ---                                          |\n| 7    | Wi-Fi 模块*1            | 型号 RTL8189FTV，用于给模组提供 Wi-Fi 功能 | SDIO 接口                                    |\n| 8    | BTB 摄像头接口*1        | 用于连接 BTB 摄像头模块                    | 出厂已连接                                   |\n| 9    | 摄像头 M2 铜柱螺母*2    | 用于固定 BTB 摄像头                        | 出厂已固定                                   |\n| 10   | FHD 摄像头*1            | 默认SP2305 Sensor BTB形式，1080P           | 默认含6mm焦距M12镜头，用户可选配其他焦距镜头 |\n| 11   | USB 转 UART 芯片*1      | 提供串口通信功能                           | 出厂已烧录固件                               |\n| 12   | Type-C 接口(USB OTG) *1 | 用于 V831 的 USB OTG功能                   | 可用于模组供电                               |\n| 13   | Type-C 接口(UART) *1    | 用于对V831通常的串口调试                   | 可用于模组供电                               |\n| 14   | 三轴加速度传感器*1      | I2C接口，可提供3轴的加速度数据             | ---                                          |\n| 15   | microSD 卡槽*1          | 用于外接 microSD卡                         | 模组的系统默认从SD卡引导                     |\n| 16   | LCD 接口*1              | FPC0.5mm 24Pin，MCU 接口                   | ---                                          |\n| 17   | IPS 高清屏幕\\*1         | 1.3寸IPS屏幕，分辨率240\\*240               | 出厂已连接                                   |\n| 18   | IPEX Wi-Fi天线座        | IPEX(一代) Wi-Fi天线                       | ---                                          |\n| 19   | 外拓排母                | 引出 V831 的 通用IO口，可用于连接外设      | ---                                          |\n| 20   | 扬声器接口*1            | MX1.25 2P接口（间距1.25mm）                | ---                                          |\n| 21   | 扬声器*1                | 8Ω1W 1609复合铝膜扬声器                    | 出厂已连接                                   |\n| 22   | 麦克风*1                | 模拟驻极体麦克风                           | ---                                          |\n\n## 资源汇总\n\n硬件: [MaixII 硬件资料库](https://api.dl.sipeed.com/shareURL/MaixII/MaixII-Dock/HDK)\n\n软件：\n* Python SDK： [MaixPy3 软件文档](/maixpy3)\n* C SDK: [libmiax](https://github.com/sipeed/libmaix)\n* MaixHub 模型平台（AI 模型下载、在线训练、项目分享）： [MaixHub](https://maixhub.com)\n* 全志 tina-V83x SDK： [Tina-Linux/tina-V83x](https://github.com/Tina-Linux/tina-V83x)\n* 工具链： [dl.sipeed.com](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain) 或者 [github](https://github.com/sipeed/libmaix/releases/download/v0.1.0/toolchain-sunxi-musl-pack-2021-01-09.tar.xz)\n\n## Maix-II-Dock 上手开发路线指南\n\n* 因为需要使用 linux 系统（tina-linx）， 所以需要先学习烧录系统镜像，就类似学会电脑重装系统一样，这样在遇到问题就可以重来，在左侧目录找到“烧录系统”文章查看\n<!-- 这里不给烧录系统的链接，让用户学会查看左边目录 -->\n* 学会基础的 Linux 操作，比如如何打开终端，基础的终端命令，以及如何传输文件到开发板等，比如 串口使用， adb 使用等等基础操作\n* 选择开发语言：\n  * 如果你熟悉 C 有一定的开发经验，可以选择使用[libmaix](https://github.com/sipeed/libmaix)\n  * 如果你希望快速上手，并使用 Python 语言开发， 请使用[MaixPy3](/maixpy3)，仔细阅读其文档即可\n* 如果需要使用 AI 功能，可以搭配 [MaixHub](https://maixhub.com) 在线训练平台使用，平台提供了 AI 模型或者项目分享功能，节约大家不少时间。"}, "/hardware/zh/maixII/M2/other.html": {"title": "其他事项", "content": "---\ntitle: 其他事项\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy  其他事项\n---\n\n> 编辑于 2022年8月23日\n\n这里讲述 V831 开发板的一些额外使用事项和相关解决方法\n\n以下替换设备相关操作完成后，名称为 `maixhub` 的镜像里的 app 应用不再可用\n\n## 切换屏幕\n\n目前开发板支持的屏幕有 1.3寸、2.4寸、2.8寸 的 IPS 屏，且只是支持在[我们淘宝](https://sipeed.taobao.com/)上售卖的显示屏；对于别的屏幕有需求的，可以走商务通道进行定制。\n\n### 准备\n\n- 需要切换的屏幕与对应的转接板\n- 开发板\n- 最新[系统镜像](./flash.html)\n\n### 屏幕连接\n\n开发板可以直接与 1.3寸 屏幕连接，但是与 2.4寸 或 2.8寸 屏幕连接的话需要使用转接板\n\n转接板上的接口一个 1 的标识符，是来确保不被反插的。屏幕排线上的 1 要和转接板、开发板的上 1 相位置对应。\n\n屏幕标识的 1 如下所示\n\n<html>\n    <img src=\"./asserts/other/1.3.png\" width=45%>\n    <img src=\"./asserts/other/2.4.jpg\" width=45%>\n</html>\n\n转接板上面的 1 如下所示\n\n<img src=\"./asserts/other/change.jpg\" width=600>\n\n板子上的 1 如下所示\n\n<img src=\"./asserts/other/V831.jpg\" width=600>\n\n具体接线参考下面两张图\n\n<html>\n    <img src=\"./asserts/other/not-connected.jpg\" width=45%>\n    <img src=\"./asserts/other/connected.jpg\" width=45%>\n</html>\n\n### 切换设备树\n\n- update_dtb 程序是给 Allwinner tina linux 专门写的应用。\n- 编译好的设备树文件，可以在[下载站](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain)中进行下载\n\n该设备树文件是通过内核编译出来的，不推荐个人用户自行编译。设备树文件命名规则如下：\n\n| 文件名字 | 可用屏幕 | 可用摄像头 |\n| :----: | :----: | :---: |\n| sipeed_2.8_240x320_vs3205.dtb | 2.8寸 | vs3205 |\n| sipeed_2.8_240x320_sp2305.dtb | 2.8寸 | sp2305 |\n| sipeed_2.4_240x320_vs3205.dtb | 2.4寸 | vs3205 |\n| sipeed_2.4_240x320_sp2305.dtb | 2.4寸 | sp2305 |\n| sipeed_1.3_240x240_vs3205.dtb | 1.3寸 | vs3205 |\n| sipeed_1.3_240x240_sp2305.dtb | 1.3寸 | sp2305 |\n\n将设备树文件存放到开发板中在电脑中显示的虚拟U盘中。\n接着在 adb 终端里面执行下面命令\n\n```bash\nsync  #刷新一下文件\nupdate_dtb /dev/mmcblk0 /root/sipeed_240x240_vs3205.dtb\nreboot #重启设备来更新配置\n```\n\n即可切换设备树。\n\n- 如果发现屏幕显示效果不对 说明选错了对应的设备树文件。重新换成正确的设备树即可\n\n这里贴一张正常显示的图样\n\n![](./asserts/show.jpg)\n\n## 更换摄像头\n\n目前 MaixII-Dock 开发板目前支持的摄像头有 sp2305 和 vs3205 （只支持官方店上再售卖的这两款摄像头，有别的摄像头需求可以进行商务定制），摄像头之间的切换同样时需要更换设备树文件，更换方式上面的更换屏幕一样的。\n\n### 准备\n\n- 需要切换的摄像头模块\n- 开发板\n- 最新的[系统镜像](./flash.html)\n- 编译好的设备树文件，可以在[下载站](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain)中进行下载\n\n### 连接摄像头\n\n> **注意的是要摄像头的接法，不要把摄像头给接反了，摄像头的底板上有一个白点，开发板卡上也有一个白点，这两个白点要在同一边。如果接反了，摄像头烧毁了请自行再买一个吧**\n\n<html>\n<div class=\"imbox\">\n    <img src=\"./asserts/other/camera_outlook_1.jpg\" width=350 alt=\"camera top\">\n    <img src=\"./asserts/other/camera_outlook_2.jpg\" width=350 alt=\"camera bottom\">\n</div>\n</html>\n\n### 切换设备树\n\n> update_dtb 程序是给 Allwinner tina linux 专门写的小工具。\n\n将设备树文件存放到开发板中在电脑中显示的虚拟U盘中。\n接着在 adb 终端里面执行下面命令\n\n```bash\nsync  #刷新一下文件\nupdate_dtb /dev/mmcblk0 /root/sipeed_240x240_vs3205.dtb\nreboot #重启设备来更新配置\n```\n\n即可切换设备树，该设备树文件是通过内核编译出来的，不推荐个人用户自行编译\n\n| 文件名字 | 可用屏幕 | 可用摄像头 |\n| :----: | :----: | :---: |\n| sipeed_2.8_240x320_vs3205.dtb | 2.8寸 | vs3205 |\n| sipeed_2.8_240x320_sp2305.dtb | 2.8寸 | sp2305 |\n| sipeed_2.4_240x320_vs3205.dtb | 2.4寸 | vs3205 |\n| sipeed_2.4_240x320_sp2305.dtb | 2.4寸 | sp2305 |\n| sipeed_1.3_240x240_vs3205.dtb | 1.3寸 | vs3205 |\n| sipeed_1.3_240x240_sp2305.dtb | 1.3寸 | sp2305 |\n| sipeed_1.3_240x240_ov2685.dtb | 1.3寸 | ov2685 |\n\n## 编译链\n\n在[下载站](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain)里有一个名为 `toolchain-sunxi-musl-pack-2021-01-09.tar.xz` 的文件，这是在 Linux 系统下为 V831 所使用的编译链。\n\n有需求的可以自行尝试，但是对于 V831 还是推荐使用 MaixPy3 和 MaixHub。"}, "/hardware/zh/maixII/M2/PhoenixSuit.html": {"title": "MaixII M2dock 烧录系统", "content": "---\ntitle: MaixII M2dock 烧录系统\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy  MaixII M2dock 烧录系统\n---\n\n> ！！！一定要严格按照步骤操作！！！请使用大于 1G 的 TF/SD 卡进行烧录，开源版本要求使用 TF/SD 卡来启动系统。\n\nV831 为全志的 SOC， 所以 Windwos 使用 **PhoenixSuit**, Linux 上使用 **Livesuit** 烧录镜像文件。\n\n- 从下载站获取最新的 V831 系统镜像 [SDK_MaixII/release](http://dl.sipeed.com/shareURL/MAIX/SDK_MaixII/release) ，找不到就搜索 V831 获取最新的镜像。\n\n- 解压 V831 镜像压缩包，得到一个 xxxx.img 文件。\n\n- 从网上获取 PhoenixSuit(Windows) 烧录工具。\n  - [baidu-PhoenixSuit](https://www.baidu.com/s?wd=PhoenixSuit)\n  - [bing-PhoenixSuit](https://www.bing.com/search?q=PhoenixSuit&FORM=BESBTB&mkt=zh-CN) \n  - [github-PhoenixSuit](https://github.com/colorfulshark/PhoenixSuit)\n  - [lo4d-PhoenixSuit](https://phoenixsuit.en.lo4d.com/windows)\n\n## Windows 上使用 PhoenixSuit 烧录\n\n解压 PhoenixSuit(Windows) 工具压缩包，不插入 SD 卡，将 V831 USB OTG 接口连接到 PC，打开设备管理器，安装驱动文件\n\n![](./asserts/flash_01.png)\n\n![](./asserts/flash_03.png)\n\n打开烧录软件,  并浏览打开镜像文件\n\n![](./asserts/flash_05.png)\n\n重新插拔板子（上电不插入 SD 卡），软件提示是否要清空烧录，提示是否需要升级，点击 `YES` \n\n![](./asserts/flash_07.png)\n\n插入 sd 卡，提示是否强制格式化，再次点击 `YES`开始烧录（大约 40S）\n\n![](./asserts/flash_09.png)\n\n可能需要等待几秒才会更新状态，然后等待提示“固件升级成功”，即可断开 USB ，至此固件烧录完毕\n\n![](./asserts/flash_11.png)\n\n![](./asserts/flash_13.png)"}, "/hardware/zh/maixII/M2/tools/adb.html": {"title": "adb 操作介绍", "content": "# adb 操作介绍\n\n\n\nADB.exe 在 MaixPy3 IDE 中的 maixpy3_examples 和 PhoenixSuit 文件夹下\n\n## 链接开发板\n将开发板上的 OTG 接口接上电脑， 然后再命令行中输入 adb shell，会自动进入到开发板的 linux 系统中\n\n```shell\nBusyBox v1.27.2 () built-in shell (ash)\n\n------run profile file-----\n   __  ___     _        __   _\n  /  |/  /__ _(_)_ __  / /  (_)__  __ ____ __\n / /|_/ / _ `/ /\\ \\ / / /__/ / _ \\/ // /\\ \\ /\n/_/  /_/\\_,_/_//_\\_\\ /____/_/_//_/\\_,_//_\\_\\\n ----------------------------------------------\nroot@sipeed:/#\n```\n\n这时可以开始使用 MaixPy3 进行开发了"}, "/hardware/zh/maixII/M2/tools/mobaxterm.html": {"title": "如何使用 mobaxterm", "content": "---\ntitle: 如何使用 mobaxterm \nkeywords: Jupyter, MaixPy3, Python, Python3\ndesc: maixpy  如何使用 mobaxterm \n---\n\n## mobaxterm 是什么？\n\n这是在 Windows 下使用的全能终端管理软件，对开发与运维人员必备，可以在 [mobaxterm.mobatek.net/download](https://mobaxterm.mobatek.net/download.html) 获取免费版本使用，在国内网站上有中文版。\n\n![](https://mobaxterm.mobatek.net/img/moba/features/feature-terminal.png)\n\n主要通过它提供的下列功能：\n\n- serial 通过串口连接 Linux 系统的终端\n- ssh 远程登录 Linux 系统的终端\n- ftp 远程访问文件服务上的资源\n\n## 连接 串口(Serial)\n\n开源硬件产品大多都会预留串口（Serial）用作 Linux 系统的终端交互接口，下面介绍串口【session】的创建。\n\n![](./asserts/mobaxterm-serial-4.png)\n\n在「session setting」 对话框里选择【serial】，再选好串口号及波特率，点击【OK】就完成连接了。\n\n![](./asserts/mobaxterm-serial-5.png)\n\n同样【session】会保存在左侧的【session】标签页里，方便下次连接。\n\n## 连接 SSH\n\n除了有线串口的方式，还可以通过无线访问 SSH 登录 Linux 系统。\n\n在板子终端输入 `hostname -I` 查看自己 ip 地址 (先连上网)，然后输入自己用户名和密码。\n\n```bash\nroot@maixsense:~# hostname -I\n192.168.0.197\n```\n\n然后我们就可以来新建SSH会话然后远程登录到板子了\n\n- 新建SSH会话\n\n![](./asserts/mobaxterm_ssh.jpg)\n\n- 登录到板子终端\n\n![](./asserts/mobaxterm_ssh_login.png)\n\n> 输入密码的时候是看不到的（没有输入显示），在输入结束之后，按回车即可\n\n就可以看到 Linux 的登录会话终端了。\n\n传输文件的时候可以直接把文件拖入或者拉出下图的左红框中。\n\n![](./asserts/mobaxterm_ssh_view.jpg)\n\n## 连接 FTP\n\n与 SSH 同理。\n\n![](./asserts/mobaxterm_ftp.png)\n\n进入后就可以看到文件夹了。\n\n![](./asserts/mobaxterm_ftp.jpg)\n\n可以拖拽文件上传和下载。\n\n![](./asserts/mobaxterm_ftp_ud.png)\n\n<a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>"}, "/hardware/zh/maixII/M2/tools/pyqt_rtsp.html": {"title": "如何使用 pyqt_rtsp", "content": "---\ntitle: 如何使用 pyqt_rtsp \nkeywords: pyqt_rtsp, MaixPy3, Python, Python3\ndesc: maixpy  如何使用 pyqt_rtsp \n---\n\n> 这是一个图传客户端工具，脱离 jupyter 的编程环境，使用的时候只需要在电脑上安装好就可以链接到硬件中获取图传信息。\n\n![](./asserts/pyqt_rtsp.png)\n\n这个工具是通过 Python 实现的 rtsp + rtp 流媒体服务，支持文件、图像、显示器、摄像头的图像传输，适用于支持 Python3 的系统。\n\n## 安装方法\n\n首先知道它是一个 C/S 结构图传客户端，你需要在某个硬件上安装 maixpy3 和启动服务，与之对应的客户端访问该硬件获取它的流媒体，这个硬件可以是你的嵌入式 linux 设备，也可以是你的 linux 计算机。\n\n### 服务端配置过程\n\n在 linux 设备上安装 maixpy3 执行 maixpy3_rpycs 即可启动作为服务端。\n\n```bash\n(venv) $ pip3 install maixpy3\n(venv) $ maixpy3_rpycs\n```\n\n### 客户端配置过程\n\n接着要在其他电脑上通过 Python 安装 [rtsp_pyqt](https://github.com/sipeed/MaixPy3/tree/main/examples/rtsp_pyqt) 客户端工具。\n\n```bash\n(venv) $ pip3 install -r requirements.txt\n(venv) $ python3 mainLogic.py\n```\n\n### 使用方法\n\n运行后可见下图，然后输入 IP （如：192.168.0.127）进行链接：\n\n![](./asserts/pyqt_rtsp_login.png)\n\n按下【setup】链接到目标设备自动获取摄像头流，支持播放、暂停等操作，拍照和录像自动保存到目录下的文件夹。\n\n## 多余的讯息\n\n> 如 IP 可以这样获取，我只是想炫耀一下我的拼装技术，逃~\n\n![](./asserts/rtsp_get_ip.jpg)"}, "/hardware/zh/maixII/M2/tools/vscode.html": {"title": "如何使用 vscode", "content": "---\ntitle: 如何使用 vscode \nkeywords: vscode, MaixPy3, Python, Python3\ndesc: maixpy  如何使用 vscode \n---\n\n## 前言\n\n它是微软出品的一款可扩展的轻量级开源编辑器，并且支持全平台系统。这些特性使得 VSCode 颇受欢迎，这也使其成为了一个很棒的 Python 开发平台。\n\n关于如何安装和使用它的教程已经数不胜数，这里只推荐[【用 VSCode 愉快地写 Python 代码】](https://zhuanlan.zhihu.com/p/66157046)。\n\n## 为什么要使用它？\n\n除了专业 Python 代码开发环境，它还支持打开 jupyter notebook 文档运行代码。\n\n与浏览器运行的 jupyter notebook 一样，执行 Python 代码的时候要选择对应的执行核心，如 [ipython/ipykernel](https://github.com/ipython/ipykernel) 或者 [rpyc_ikernel](https://github.com/sipeed/rpyc_ikernel) 的核心。\n\n下面就来说说如何使用它。\n\n### 创建 notebook 文档\n\n![](https://tukuimg.bdstatic.com/scrop/abb1e4146fb8679109fa99aa0b03f59f.gif)\n\n### 运行 Python 代码\n\n![](https://tukuimg.bdstatic.com/scrop/a1e2381bfac1a332a323774ee1b49c9f.gif)\n\n### 运行后预览图表\n\n![](https://tukuimg.bdstatic.com/scrop/9c5bf21507c776f98d55bcfc0e51c5ff.gif)\n\n## 你可以学到什么？\n\n在 VS Code 中使用 Jupyter 笔记本时需要进行的基本操作。如果您使用 VS Code 来满足其他开发需求，那么在 VS Code 中尝试使用 Jupyter Notebook 是非常方便的，这样您就可以只使用一个 IDE。特别是其代码自动补齐的功能可以让你的开发更快捷。\n\n> 需要注意的是，截止 2021年3月3日 在 VSCODE 里的 jupyter notebook 文档进行中断存在一些问题，并不是很流畅，如果出现了运行无响应的问题可以重新打开文档解决问题。"}, "/hardware/zh/maixII/M2/introduce.html": {"title": "芯片平台介绍", "content": "---\ntitle: 芯片平台介绍\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy  芯片平台介绍\n---\n\nV831 芯片介绍\n\n从 2019 年至今的时间，可以开始看到几个相机 SoC 与一个内置的转专业或 SIMD 指令加快人脸检测、物体检测等等，从低分辨率 Kendryte K210 处理器 2.5 k Ingenic T31 MIPS 视频处理器，甚至 4k 能力 iCatch V37 相机 SoC 。 Allwinner 过去推出了几个摄像头处理器(V3， V316， S3…)，但没有一个包含 NPU (又名 AI 加速器)。现在这已经改变了，Allwinner V831 Cortex-A7 全高清摄像头 SoC 还包括一个小的 200 GOPS NPU 。\n\n> 取自 [allwinner-v831-ai-full-hd-camera-soc-powers-sochip-v831-development-board](https://www.cnx-software.com/2020/04/28/allwinner-v831-ai-full-hd-camera-soc-powers-sochip-v831-development-board/)\n\n## v831 Chip\n\n![V831_struct.png](./asserts/V831_struct.png)\n\n## 参数表\n\n| 项目            | 参数                                                                               | 备注                                  |\n| ------------- | -------------------------------------------------------------------------------- | ----------------------------------- |\n| CPU           | 最高 800Mhz                                                                        |                                     |\n| Video encoder | H.264, up to 1080p@30fps</br>H265, up to 1080p@30fps</br>JPEG, up to 1080p@30fps | ---                                 |\n| NPU           | 0.2T                                                                             | ---                                 |\n| EISE          | Up to 1080p@30fps                                                                | ---                                 |\n| SDRAM         | SIP 64MB DDR2                                                                    | SIP封装（System In a Package系统级封装）     |\n| SMHC          | SMHC x2 (SDC0, SDC1)                                                             | 主机控制器（SMHC）接口；物理层规范V2.0，SDIO卡规范V2.0 |\n| SPI           | SPI x2 (SPI0, SPI1)                                                              | ---                                 |\n| LCD           | Serial RGB, i8080                                                                | ---                                 |\n| DSPO          | BT656                                                                            | ---                                 |\n| I2S           | I2S x1 (I2S0)                                                                    | ---                                 |\n| Parallel CSI  | No support                                                                       | ---                                 |\n| Ethernet      | 10/100 Mbit/s Ethernet port with RMII                                            |                                     |\n| TWI           | TWI x4 (TWI0, TWI1, TWI2, TWI3)                                                  | ---                                 |\n| RSB           | No support                                                                       | ---                                 |\n| GPADC         | 1-ch                                                                             | ---                                 |\n| Audio codec   | Output: LINEOUTP</br>Input: MICIN1P/N                                            | ---                                 |\n| MIPI CSI      | 2-lane, up to 1080p@60fps                                                        | ---                                 |\n| MIPI DSI      | No support                                                                       | ---                                 |\n| Package       | QFN88                                                                            | ---                                 |\n\n[V833／V831 Datasheet V1.0.pdf](https://linux-sunxi.org/images/b/b9/V833%EF%BC%8FV831_Datasheet_V1.0.pdf)\n\n## 产品技术支持\n\nM2dock开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务。"}, "/hardware/zh/maixII/M2A/R329.html": {"title": "芯片介绍", "content": "# 芯片介绍\n\n## R329\n全志 R329 双核 Cortex-A53 处理器的 64 位，配备双 HIFI4 DSP 用于音频后处理和预处理，以及 Arm 中国的 AIPU（人工智能处理单元）以极低的功耗提供高达 0.256 TOPS。可以对神经网络进行硬件加速，驱动 720p 的摄像头。\n\n![R329框架](./assets/R329_1.png)\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | Dual-core ARM Cortex™-A53@1.5GHz<br>32KB L1 I-cache + 32KB L1 D-cache per core<br>256KB L2 cache |\n| DSP | Dual-core HiFi4@400MHz<br> 32KB L1 I-cache + 32KB L1 D-cache per core<br> 2MB SRAM |\n| NPU | 搭载周易™Z1 AIPU，最大支持0.25TOPS@600MHz |\n| 内存<br>Memory |内置 DDR3 128MB<br> 支持 SPI Nand/Nor/eMMC |\n| Audio | Supports 5 audio ADC and 2 audio DAC<br>Supports 5 analog audio inputs and 2 analog audio output<br>Up to 3 I2S/PCM controllers for Bluetooth and external audio codec<br>Integrated digital microphone, supports maximum 8 digital microphones |\n| Enthernet | 10/100/1000 Mbps |\n| USB | OTG \\* 1<br>Host \\* 1|\n| SDIO | SDIO 3.0 * 2 |\n| I2S | I2S*3(I2S0, I2S1, S-I2S0) |\n| SPI | SPI*2(SPI0, SPI1) |\n| TWI | TWI*3(TWI0, TWI1, S-TWI0) |\n| GPADC | 4-ch |\n| SCR | SCR*1 |\n| PWM | PWM*15(PWM[8:0], S-PWM[5:0])"}, "/hardware/zh/maixII/M2A/flash_system.html": {"title": "系统烧录", "content": "# 系统烧录\n\n## 系统简介\n\nLichee MaixSense（以下简称R329）提供了以下两种系统镜像\n\n|   名称   |               armbian               |       Tina      |\n| :------ | :------------------------ | :---------------------- |\n|   简介   | 专门用于ARM开发板的轻量级 Debian |    全志魔改OpenWRT1404的系统     |\n|   特点   |        主线化Linux，功能丰富      |        厂商魔改，比较精简        |\n| 适用人群 |       极客，嵌入式入门玩家等      | 深度开发，需要自行定制等开发人员 |\n\n> ！！！一定要严格按照步骤操作！！！armbian系统请使用大于 4G 的 TF/SD 卡进行烧录，Tina系统请使用大于 1G 的 TF/SD 卡进行烧录, 质量较差的启动卡会有糟糕的实际使用体验\n\n对于 R329 芯片， 建议使用 Etcher 软件来烧录镜像。\n\n## 获取镜像\n\n### armbian 系统镜像\n\narmbian 镜像获取：\n\n> 链接：[点我](https://eyun.baidu.com/s/3htTXfaG#sharelink/path=%2F%E4%B8%8B%E8%BD%BD%E7%AB%99%E6%96%87%E4%BB%B6%2FMaixII%2FMaixII-A%2FSDK&parent_path=%2F%E6%B7%B1%E5%9C%B3%E7%9F%BD%E9%80%9F%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8)\n\n其中以 maixpy3 开头命名的镜像文件的是已经装载了 MaixPy3 库和相关驱动的镜像包。\n\narmbian 镜像所打包的方法为 [dd](https://baike.baidu.com/item/DD/2654972); 可以选用适合当前系统的 [Etcher](https://www.balena.io/etcher/ \"Etcher\") 软件来烧录。\n\n### Tina 系统镜像\n\nTina 系统需要自己进行编译，具体编译方式参考 [https://github.com/sipeed/R329-Tina-jishu](https://github.com/sipeed/R329-Tina-jishu)\n\n## 烧录镜像\n\n### armbian 镜像烧录\n\n#### 资源获取\n\n- 下载[Etcher](https://www.balena.io/etcher/ \"Etcher\")\n\n#### 烧录步骤\n\n首先解压所下载的镜像压缩包，得到 `.img` 镜像文件，打开 [Etcher](https://www.balena.io/etcher/ \"Etcher\") 软件，点击 `Flash from file` ,选中解压出来的 `.img ` 文件镜像，然后点击 `Select target` 选中sd卡，最后点击 `Flash` 进行烧录，等待完成即可。 \n\n下面只是用原始的 armbian 作为展示，有需求的话可也已选择下载带有 MaixPy3 的镜像文件。\n\n![burn](./assets/95133.gif)\n\n最终下载结束后的效果会和下图一样，显示 `Flash Complete!`：\n\n![下载结束](./assets/finish_flash.png)\n\n如果烧录失败了，请手动格式化一下 sd 卡。Windows 和 MacOS 可以使用 [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)来格式化 sd 卡，Linux 系统可以使用 [Gparted](https://gparted.org/)来格式化。\n\n### Tina 镜像烧录\n\nTina 系统的烧录方式和 MaixII Dock 通用，可参考[MaixII M2dock 烧录系统 - Sipeed Wiki](./../M2/flash.html)，这里不多做介绍"}, "/hardware/zh/maixII/M2A/maixsense.html": {"title": "MaixSense 简介", "content": "# MaixSense 简介\n\n这个板子和之前的 Maix-I 系列不同，它的主控不但带有 AI 加速功能，还支持运行 armbian 系统。\n\n## M2A 板卡\n\nM2A 板卡以全志 R329 为核心主控，还集成电源芯片、FEL烧录按键、wifi模组、存储焊盘和 RMGII 接口等组件。\n\n![M2A](./assets/M2A.jpg)\n\n### R329 芯片\n\nR329 芯片是由全志科技所设计双核 Cortex-A53 64 位处理器 ，配备有双 HIFI4 DSP 可用于音频后处理和预处理，以及 Arm 中国以极低的功耗却可达到 0.256 TOPS 算力的 AIPU（人工智能处理单元），能够用来硬件加速神经网络，对摄像头获取到的 720p 分辨率的图像进行相应的处理。\n\n![R329框架](./assets/R329_1.png)\n\n| 条目 | 参数 |\n| --- | --- |\n| CPU | Dual-core ARM Cortex™-A53@1.5GHz<br>32KB L1 I-cache + 32KB L1 D-cache per core<br>256KB L2 cache |\n| DSP | Dual-core HiFi4@400MHz<br> 32KB L1 I-cache + 32KB L1 D-cache per core<br> 2MB SRAM |\n| NPU | 搭载周易™Z1 AIPU，最大支持0.25TOPS@600MHz |\n| 内存 |内置 DDR3 256MB |\n| 储存 | 支持 SPI Nand/Nor/eMMC |\n| 音频 | 5路ADC，2路DAC<br>3个 I2S/PCM 控制器 |\n| 以太网 | 10/100/1000 Mbps |\n| USB | OTG \\* 1<br>Host \\* 1|\n| SDIO | SDIO 3.0 * 2 |\n| I2S | I2S*3(I2S0, I2S1, S-I2S0) |\n| SPI | SPI*2(SPI0, SPI1) |\n| TWI | TWI*3(TWI0, TWI1, S-TWI0) |\n| GPADC | 4-ch |\n| SCR | SCR*1 |\n| PWM | PWM*15(PWM[8:0], S-PWM[5:0]) |\n\n## MaixSense开发板介绍\n\nMaixSense 开发板可能是市面上最小的 Linux 卡片电脑。本套件包含一个搭载全志 R329 的高度集成 SOM 核心板，以及一个多功能 IO 扩展底板，可以运行 Linux 系统, 并具备出色的扩展功能。您可以将它用于搭建个人服务器、开发智能语音助手、设计机器人等场景。它通过内置的周易 AIPU 处理器同时支持智能语音和视频图像处理，开发者可以直接在开发板上跑通 CV , NLP 等 AI 模型。\n\n**Tina Linux**：全志科技基于 Linux 内核开发的针对智能硬件类产品的嵌入式软件系统。Tina Linux基于 openwrt-14.07 版本的软件开发包,包含了Linux系统开发用到的内核源码、驱动、工具、系统中间件与应用程序包。可以从 [https://github.com/sipeed/r329-linux-4.9](https://github.com/sipeed/r329-linux-4.9) 获取到 Tina sdk。\n\n但是 MaixSense 不只是可以运行 Tina ，还可以运行 **armbian**，这是一个真正**完整**的 linux 系统，armbian 是基于 debian/ubuntu 进行开发的。\n\n|   名称   |               armbian               |               Tina               |\n| ------ | --------------------------------- | ------------------------------ |\n|   简介   | 专门用于`ARM`开发板的`Debian` |    全志深度修改OpenWRT1404的系统     |\n|   特点   |        主线化Linux，功能丰富        |        厂商深度修改，软硬件契合度高        |\n| 适用人群 |       极客，嵌入式入门玩家等        | 深度开发，需要自行定制等开发人员 |\n\n\n## MaixSense外观预览\n\n<div align=\"center\">\n    <img src=\"./assets/M2A-1.gif\" alt=\"Maixsense outlook\" >\n</div>\n\n\n## MaixSense 基本参数\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">MaixSense基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>处理器 CPU</td>\n        <td>双核 ARM CortexTM-A53™ </td>\n    </tr>\n    <tr>\n        <td>AIPU(NPU)</td>\n        <td>搭载周易TZ1AIPU，最大支持0.25TOPS@600MHz</td>\n    </tr>\n    <tr>\n        <td>DRAM</td>\n        <td>SIP 256MB DDR3</td>\n    </tr>\n    <tr>\n        <td>存储</td>\n        <td>可使用核心板搭载的 SPINAND (默认空贴)存储<br>可使用底板搭载的SD卡座</td>\n    </tr>\n    <tr>\n        <td>视频编码器</td>\n        <td>H264/5 &JPEG,最大720p@30fps</td>\n    </tr>\n    <tr>\n        <td>摄像头</td>\n        <td>出厂默认OV9732，最高支持720P@30fps HD<br>采用USB-C连接器,支持正反插(可分别用作前后摄)</td>\n    </tr>\n    <tr>\n        <td>麦克风</td>\n        <td>两个模拟MEMS麦克风，平均灵敏度91dB SPL@1kHz</td>\n    </tr>\n    <tr>\n        <td>屏幕</td>\n        <td>1.5寸SPI总线屏幕,屏幕接口采用0.5mm 12P FPC，分辨率240*240</td>\n    </tr>\n    <tr>\n        <td>按键</td>\n        <td>1个复位按键和4个用户按键(ADC按键)，1个下载按键(FEL)</td>\n    </tr>\n    <tr>\n        <td>以太网接口</td>\n        <td>在核心板以24P 0.5mm间距FPC的形式引出，用于连接相应PHY</td>\n    </tr>\n    <tr>\n        <td>IO引出</td>\n        <td>3*10P 2.54mm 焊盘<br>1个4PMx1.25插座(引出2*GPIO和5V/GND)<br>具体可看下方引脚图</td>\n    </tr>\n    </tbody>\n</table>\n\n## 引脚图参考\n\n![R329-pin](./assets/R329-pin.png)\n\n摄像头接口图：\n\n![camera_pin_order](./assets/camera_pin_order.png)\n\n## 相关资料\n\n[MaixSense 硬件资料](https://dl.sipeed.com/shareURL/MaixII/MaixII-A)\n[极数社区 R329 上手帖](https://aijishu.com/a/1060000000221780)\n[极数社区 R329 芯片FAQ](https://aijishu.com/a/1060000000291439)\n[极数社区矽速科技](https://aijishu.com/blog/xisukeji)（很多资料）\n\n\n## 产品技术支持\n\nM2A 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maixII/M2A/ssh.html": {"title": "如何使用SSH", "content": "# 如何使用SSH\n\n> 编辑于2022.04.29\n\n这里讲一下怎么使用ssh，和一些常碰到的问题。\n\n## 简介\n\nSSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。\n通常我们用这个来远程登陆别的linux设备。\n\n## 用法\n\n### 目标设备进行的操作\n\n#### 目标设备安装ssh\n\n一般来说大多数设备都已经内置了ssh，但是对于需要的话一般可以用下面命令安装ssh.\n\n```bash\nsudo apt install ssh -y\n```\n#### 开启端口\n\n修改 /etc/ssh/sshd_config 里面的 #22 为 22 .\n\n- 一般来说这样就没啥问题了，有其他的问题的话先重启试试（解决99%的问题）。剩下1%的问题网上搜搜\n\n### 主机端操作"}, "/hardware/zh/maixII/M2A/Usages.html": {"title": "基本使用", "content": "# 基本使用\n\n进行完前面的 [配置系统](./config_system.html) 后，我们已经成功登录到板子然后可以使用命令行来操作板子了。\n\n## 扩容系统\n\n使用不含有 MaxiPy3 的系统镜像启动后会会自动扩容，可以跳过 `扩容系统` 这一步。\n\n使用内置 MaxiPy3 的镜像系统不会自动扩充系统容量到最大值，因此需要执行一下 `/usr/lib/armbian/armbian-resize-filesystem start` 命令来扩容一下系统大小，会花费一下时间；执行时不要强行退出，执行完毕后会自动退回到终端\n\n## 连接网络\n\n这里我们使用 `nmtui` 命令来配置 wifi\n\n![202108051626](./assets/202108051626.gif)\n\n<details>\n<summary><font color=\"#4F84FF\">点开查看图文版操作</font></summary>\n<p>命令行中输入 nmtui 来打开可视化 wifi 连接界面</p>\n<img src=\"./assets/wifi/nmtui.png\" alt=\"nmtui\">\n<img src=\"./assets/wifi/active_wifi.png\" alt=\"active_wifi\">\n<p>如上图所示我们选择 Activate a connection 来设置连接</p>\n<p>先择目标 wifi </p>\n<img src=\"./assets/wifi/choose_wifi.png\" alt=\"choose_wifi\">\n<img src=\"./assets/wifi/input_password_1.png\" alt=\"input_password_1\">\n<p>输入正确的密码</p>\n<img src=\"./assets/wifi/input_password_2.png\" alt=\"input_password_2\">\n<p>会显示 connecting</p>\n<img src=\"./assets/wifi/connect_wifi.png\" alt=\"connect_wifi\">\n<p>成功后会发现右边的 active 变成了 Deactive，到此基本说明已经连上了 wifi</p>\n<p>连接失败的话重新输入正确的 wifi 密码再尝试连接</p>\n<img src=\"./assets/wifi/succeed_connecting.png\" alt=\"succeed_connecting\">\n<p>然后我们重新退出回命令行终端</p>\n<img src=\"./assets/wifi/quit_connecting.png\" alt=\"quit_connecting\">\n<img src=\"./assets/wifi/quit_nmtui.png\" alt=\"quit_nmtui\">\n<img src=\"./assets/wifi/back_terminal.png\" alt=\"back_terminal\">\n<p>可以使用 ifconfig 命令来查看板子的 IP</p>\n<img src=\"./assets/wifi/ifconfig.png\" alt=\"ifconfig\">\n<img src=\"./assets/wifi/see_ip.png\" alt=\"see_ip\">\n<p>到这里看到了 IP 就说明已经连接上了(上图中的红框位置)</p>\n</details>\n\n## 新建用户\n\n一般来说不建议使用 root 来登录 linux 系统，因为这样很容易把系统玩崩了。\n我们来新建一个用户来进行日常使用。这里我们使用 `adduser` 这个命令来添加用户。\n\n添加用户名为 `xxx` 的用户\n\n```bash\nadduser xxx\n```\n一些 log 显示完后会让我们设置密码：\n```bash\nNew password:\nRetype new password:\n```\n成功设置密码后所显示的 log 会包括下面的内容。\n```bash\npasswd: password updated successfully\n```\n接下来所有的都使用默认的即可（全部都 回车 确定就行）\n```bash\nEnter the new value, or press ENTER for the default\n        Full Name []:\n        Room Number []:\n        Work Phone []:\n        Home Phone []:\n        Other []:\nIs the information correct? [Y/n]\n```\n到这里我们就已经成功创建名称为 xxx 的用户了。\n\n使用命令 login 来登录刚刚新建的用户:\n```bash\nlogin xxx\n```\n想要退出登录的话使用命令 `logout` 就可以\n```bash\nlogout\n```\n### 授予管理员权限\n\n有时候新建的用户需要使用到管理员权限来执行一些操作，下面内容就是授予用户管理员权限。\n\n这里我们编辑 `/etc` 目录下的 `sudoers` 文件就可以修改相关权限。\n\n```bash\nsudo nano /etc/sudoers\n```\n\n在文件里找到下面的内容\n\n```vim\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\n```\n\n在里面添加上 `xxx     ALL=(ALL:ALL) ALL`（其中xxx是你之前添加的用户名）\n\n```vim\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\nxxx     ALL=(ALL:ALL) ALL\n```\n\n接着保存后退出即可。\n\n## 安装应用\n\n这里我们使用安装 `armbian-config` 为例。直接执行下面的命令即可\n\n```bash\nsudo apt install armbian-config -y\n```\n\n上面的命令的意思是使用 root 权限来运行 apt 应用的 install 命令来安装 armbian-config 且后面所有需要选择的内容均为 yes 选项\n\n## 设置时区\n\n命令行中输入 `armbian-config`，选中 Personal，再选择 Timezone -> Asia ->Shanghai 设置上海时间（Debian中没有北京时间），按住 TAB 键切换到 ok 后，保存即可。\n\n在 `armbian-config` 设置界面中一直按键盘上的 `Esc` 键也能有退出的效果。\n\n![202108062005](./assets/202108062005.gif)\n\n## 设置中文显示\n\n命令行中输入`armbian-config`，选中Personal -> Locales，下滑到最下面（可以试着使用键盘上的 `PageDown` 按键加快下滑），使用键盘空格键来选中 zh.GBK 和 zh.UTF-8 ，回车确认后再选择 zh_CN.UTF8 为系统默认语言，然后多次按下 `Esc` 键来退回到命令行终端界面。<!-- 执行命令 `sudo apt install fonts-wqy-zenhei` 来下载中文字体， --> 然后使用 `reboot` 命令来重启后系统后就会发现命令行终端有中文显示了。\n\n![202108062054](./assets/202108062054.gif)\n\n## 配置蓝牙\n\n打开 `armbian-config`，选中 Network，选择 BTinstall 安装蓝牙支持包。\n\n![202108071034](./assets/202108071034.gif)\n\n然后就可以使用 Bluetoothctl 配置蓝牙。\n\n<html>\n<details>\n  <summary><font color=\"#4F84FF\">点开查看常用命令</font></summary>\n    <pre  class=\"line-numbers language-bash\">\ndevices                     列出活动的蓝牙设备\npaired-devices              列出已配对蓝牙设备\npairable &lt;on/off&gt;           是否允许配对\ndiscoverable &lt;on/off&gt;       是否允许被发现\ndiscoverable-timeout [value]设置暴露时间\npair [dev]                  配对设备\ntrust [dev]                 信任设备\nuntrust [dev]               取消设备信任\nremove &lt;dev&gt;                移除设备\nconnect &lt;dev&gt;               连接设备\ndisconnect [dev]            断开设备连接                      \nquit                        退出\nhelp                        查看帮助\n</pre>\n</details>\n</html>\n\n### 连接蓝牙设备\n\n使用 `bluetoothctl` 连接蓝牙设备。\n\n```bash\nscan on             #扫描设备\nscan off            #停止扫描\ntrust XX:XX:XX:XX   #信任设备\npair XX:XX:XX:XX    #配对设备\nconnect XX:XX:XX:XX #连接设备\n```\n\n![202108071610](./assets/202108071610.gif)\n\n### 设置蓝牙音频输入/输出\n\n启用蓝牙音频前，需要先安装 `pulseaudio` 和蓝牙组件\n\n```bash\nsudo apt install pulseaudio\nsudo apt install pulseaudio-module-bluetooth\n```\n\n然后使用 pactl 命令查看是否有蓝牙输出设备\n\n```bash\npactl list short sinks\n```\n\n切换音频输出到蓝牙，下面的 `<dev>` 在此处应该为 `2`\n\n```bash\npactl set-default-sink <dev>\n```\n\nlog 如下：\n\n```bash\nmaixsense:~:# apt install pulseaudio\nmaixsense:~:# apt install pulseaudio-module-bluetooth\nmaixsense:~:# pactl list short sinks\n0\talsa_output.platform-7032000.codec.stereo-fallback\tmodule-alsa-card.c\ts16le 2ch 44100Hz\tSUSPENDED\n2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule-bluez5-device.c\ts16le 2ch 44100Hz\tSUSPENDED\nmaixsense:~:# pactl set-default-sink 2 \n```\n\n![202108071726](./assets/202108071726.gif)\n\n然后就可以播放音频到蓝牙设备，或者通过蓝牙连接手机当作蓝牙音箱使用。\n\n## 配置音量\n\n这里使用 `alsamixer` 这个应用来改变音量\n\n![202108071440](./assets/202108071440.gif)\n\n<html>\n<details>\n  <summary><font color=\"#4F84FF\">点开查看常用命令</font></summary>\n    <pre>\n------------------- Help-----------------------\nxxEsc        离开                             ▒x\nxxF1 ? H     帮助                             ▒x\nxxF2 /       系统信息                         ▒x\nxxF3         回放控制                         ▒x\nxxF4         捕获控制                         ▒x\nxxF5         所有控制                         ▒x\nxxTab        切换显示模式                     ▒x\nxxF6 S       选择声卡                         ▒x\nxxL          刷新屏幕                         ▒x\nxxLeft       移动到上一个的控制               ▒x\nxxRight      移动到下一个的控制               ▒x\nxxUp/Down    改变音量                         ▒x\nxx+ -        改变音量                         ▒x\nxxPage Up/Dn 大幅改变音量                     ▒x\nxxEnd        设置音量为0                      ▒x\nxx0-9        从0到9依次设置音量               ▒x\nxxQ W E      增加 左/全部/右声道音量          ▒x\nxxZ X C      减少 左/全部/右声道音量          ▒x\nxxB          左右声道平衡                     ▒x\nxxM          切换静音                         ▒x\nx< >         切换左/右静音                    ▒x\nxxSpace      切换捕获                         ▒x\nxx; '        切换左/右捕获                    ▒x\n-----------------------------------------------\n</pre>\n</details>\n</html>\n\n如果需要控制蓝牙设备音量，需要使用 `pactl` 。\n因为 `pcatl` 也支持控制声卡，所以建议使用这个应用来控制音量。\n\n```bash\n##查看输入/输出设备索引\npactl list short sources/sinks\n##设置输入/输出音量\npactl set-source/sink-volume index volume\npactl set-default-source/sink\n##设置默认输入/输出\n```\n\n示例，设置蓝牙耳机为输出设备，音量为10%,然后增加20%，最后减少30%\n\n```bash\nmaixsense:~:# pactl list short sinks\n0\talsa_output.platform-7032000.codec.stereo-fallback\tmodule-alsa-card.c\ts16le 2ch 44100Hz\tSUSPENDED\n2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule-bluez5-device.c\ts16le 2ch 44100Hz\tRUNNING\n##蓝牙设备一般为bluez_sink\nmaixsense:~:# pactl set-default-sink 2\nmaixsense:~:# pactl set-sink-volume 2 10%  \nmaixsense:~:# pactl set-sink-volume 2 +8192  \nmaixsense:~:# pactl set-sink-volume 2 -0x3000\n##可选 百分比，十进制数，十六进制数控制，效果相同，并且可以超过100%\n```\n\n## 媒体播放\n\n媒体播放常用 mplayer 这个应用。\n\n- 下载 mplayer \n  \n```bash\nsudo apt install mplayer -y\n```\n\n安装后我们需要把想要播放的文件传到板子上。\n\n文件可以在[下载站](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/example)获取到下面的示例文件\n\n这里可以用 [mobaxterm](../M2/tools/mobaxterm.html) 软件来使用无线网络把文件传输到板子上。\n  \n然后执行 `sudo mplayer badapple_240_60fps.mp4 -vo fbdev2` 来播放视频或者 `sudo mplayer Short.mp3` 播放音频\n\n```bash\nmplayer badapple_240_60fps.mp4 -vo fbdev2\n```\n\n想要退出的话使用键盘上的 `Ctrl+C` 组合键来退出。\n\n也在在命令行后面加上`< /dev/null > /dev/null 2>1 &`以便在后台播放\n\n```bash\nmplayer badapple_240_60fps.mp4 -vo fbdev2  < /dev/null > /dev/null 2>1 &\n```\n\n上面的指令是在后台播放的。想要停止的话可以先使用 `fg` 命令来切换到任务，再使用 `Ctrl+C` 来终止程序\n\n![202108091128](./assets/202108091128.gif)\n\n如果没播放成功的话，尝试增加设备音量（前文提过alsamixer）或者确认一下文件路径是否正确\n\n## 编写c代码\n\n一般命令行都是用 vim 来作为编辑器。有兴趣的可以额外学习一下这款强大的编辑器\n\n如果提示没有安装 vim 的话，可以使用命令 `sudo apt install vim -y` 来安装 vim。\n\n然后我们使用 vim 来新建一个名为 `helloworld.c` 的源文件\n\n```bash\nvim helloworld.c\n```\n\nvim 有命令模式（Command mode） ， 输入模式（Insert mode） 和 底线命令模式（Last line mode）。\n\n新建文件后默认的模式为 命令模式，此时我们按下键盘上的 `i` 键可进入输入模式。\n\n将下面的代码正常输入到文件内容中。\n\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"Hello, world\\n\");\n    return 0;\n}\n```\n\n然后使用键盘上的 esc 键来退出输入模式到命令模式，\n\n然后使用 `:` 来进入底线命令模式，接着输入 `wq` 来保存文件且退出到命令行\n\n然后接可以在命令行中使用 gcc 来编译我们的代码了。\n如果没有 gcc 的话使用 apt 命令来安装一下。\n有关 gcc 的详细说明请自行搜索。\n\n```bash\ngcc hello.c -o hello.o\n```\n\n结束编译后直接运行即可\n\n```bash\n./hello.o\n```\n\n![202108091201](./assets/202108091201.gif)\n\n## 编写python代码\n\n- 详细解释看上面的C代码样例\n\n```bash\nvim helloworld.py       #新建一个python文件并且用vim打开\ni\nprint(\"hello world!\\n\")\nesc\n:wq\npython3 helloworld.py\n```\n\n![202108091339](./assets/202108091339.gif)\n\n## 使用 python 点亮第一个灯\n\n首先安装 GPIO 的 python 支持库\n\n```bash\npip install gpiod\n```\n\n把 led 正极插入 PH5,负极插入 GND\n\n创建 `led.py` 文件\n\n``` bash\nvim led.py\n```\n\n将下面代码输入到所创建的文件中\n\n```python\nimport time\nimport gpiod as gpio\nPH_BASE = (8-1)*32 # \"PH\"\ngpiochip1 = gpio.chip(\"gpiochip1\")\nled = gpiochip1.get_line((PH_BASE + 5)) # \"PH5\"\nconfig = gpio.line_request()\nconfig.request_type = gpio.line_request.DIRECTION_OUTPUT\nled.request(config)\n\nwhile led:\n    led.set_value(0)\n    time.sleep(1)\n    print(\"led on\")\n    led.set_value(1)\n    time.sleep(1)\n    print(\"led off\")\n```\n\n保存退出到命令行终端后执行代码\n\n ```bash\n python3 led.py\n ```\n\n效果如下：\n\n![202108091956](./assets/202108091956.gif)\n\n## 设置开机启动\n\n需要会一些脚本语言。\n\n首先启用开机自启动脚本，这里我们来编辑相关文件就可以修改相关设置。\n\n```bash\nvim /lib/systemd/system/rc-local.service\n```\n\n在最后面添加\n\n```bash\n[Install]\nWantedBy=multi-user.target\nAlias=rc.local.service\n```\n\n这样就成功启用了开机自启动脚本\n\n接下来我们只需要把想要开机运行的内容添加到 rc.local 文件就可以了\n\n编辑自启动脚本\n\n ```bash\n vim /etc/rc.local\n ```\n\n在`exit 0`前面添加需要启动的服务\n\n```bash\necho \"hello world!\"\n```\n\n然后重启即可。\n\n例如进行上面的修改后，此脚本会在用户登录前执行，执行示例日志如下\n\n```bash\n[  OK  ] Finished Permit User Sessions.\n[  38.569457] rc.local[1322]: hello world!\n```\n\n要注意的是在开机脚本里面最好不要循环占用串口，这会导致我们无法再通过串口来操作板子。\n\n## 更多的使用方法\n\n请到[MaixPy3](/soft/maixpy3/zh/readme.md)和[极术社区](https://aijishu.com/a/1060000000221780)中自行查看"}, "/hardware/zh/maixII/M2A/Hardware_test.html": {"title": "硬件测试", "content": "# 硬件测试\n\n## 测试屏幕\n\n可以使用`echo \"hello sipeed\" > /dev/tty0` 重定向信息到屏幕上。\n\n<img src=\"./assets/image-20210805150728052.png\" alt=\"image-20210805150728052\" style=\"zoom:50%;\" />\n\n## 测试摄像头\n\narmbian 内置了 ffmpeg ，可以快速捕捉 sensor 数据并输出到屏幕上\n\n使用如下命令快速捕捉 sensor 并输出到屏幕上\n\n    ffmpeg -i /dev/video0 -vframes 1  -s 240*240 -pix_fmt rgb565le  -vf transpose=2,transpose=2 -f fbdev /dev/fb0\n\n\n![image-20210805165654537](./assets/image-20210805165654537.png)\n\n## 测试网络\n\n使用 `nmtui` 指令可以进入可视化的配网界面，\n选择 Activate a connection ， 选择对应的 WIFI名称 ，输入连接密码，确认即可。\n\n![202108051626](./assets/202108051626.gif)\n\n设置完毕后使用 ifconfig 查看本机操作，然后就可以使用 ssh 等操作了。\n\n![image-20210805162936212](./assets/image-20210805162936212.png)\n\n也可以使用apt下载各种应用\n\n```bash\nsudo apt install neofetch armbian-config\n```\n\n![image-20210805165620823](./assets/image-20210805165620823.png)\n\n如果遇到终端显示错位，还需要`sudo apt-get install xterm`安装下xterm，然后`resize`即可。\n\n![202108061015](./assets/202108061015.gif)\n\n## 测试AIPU\n\n获取1000类物体分类模型\n\n下载站链接[zhouyi_test.tar.xz](https://dl.sipeed.com/shareURL/MaixII/MaixII-A/example),使用任意方式上传到板子中\n\n```bash\ntar -Jxvf zhouyi_test.tar.xz #解压压缩包\ncd zhouyi_test #打开解压后的文件目录\nchmod 777 run.sh #授予执行权限\n./run.sh #执行1000类物体分类\n```\n识别出鼠标\n<img src=\"./assets/recognize_mouse.jpg\" alt=\"识别鼠标\" style=\"zoom:65%;\"> <br>\n对于linux命令行，使用`Ctrl + C`来退出当前程序。"}, "/hardware/zh/maixII/M2A/Usages-copy.html": {"title": "Armbian 配置及使用", "content": "# Armbian 配置及使用\n\n## 配置网络\n\n我们使用 `nmtui` 命令来配置 wifi\n\n![202108051626](./assets/202108051626.gif)\n\n## 新建用户\n\n一般来说不使用root来登录linux系统，因为这样很容易把系统玩崩了。\n因此新建一个用户来避免一直使用root账户来进行操作。\n\n```bash\nadduser xxx                                             # 添加用户名为 xxx 的用户\n\n# ...                                                   # 省略一些 log\n\nNew password:                                           # 新建用户密码\nRetype new password:                                    # 重新输入密码\n\n# ...                                                   # 省略一些 log\n\nEnter the new value, or press ENTER for the default     # 添加信息，或者直接按 ENTER 选择默认信息\n\n# ...                                                   # 按五次 enter 选择默认即可\n\nIs the information correct? [Y/n] y                     # 输入 y 完成创建\n\n```\n\n到这里我们就已经成功创建名称为 xxx 的用户了\n\n### 授予管理员权限\n\n有时候用户需要使用到管理员权限，下面内容就是授予用户管理员权限\n\n```bash\nsudo nano /etc/sudoers                                   # 修改 /etc/sudoers 文件。编辑器个人喜好\n```\n\n在文件里找到下面的内容\n\n```vim\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\n\n```\n\n在里面添加上\n\n```vim\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\nxxx     ALL=(ALL:ALL) ALL\n\n```\n\n接着保存后退出即可。\n\n## 使用SSH连接\n\n想要使用 ssh 来连接板子的话需要板子里面存在的用户名称和密码。\n默认的 root 用户没有密码， 所以想用 root 账户的话需要自己使用passwd命令自己添加密码；\n使用串口连接板子后执行 ifconfig 来或许板子的 IP 地址。\n接着就可以使用 ssh 来连接板子了。\n用户也可以尝试使用 MobaXterm 这个软件来方便电脑与板子传输文件\n\n## MaixPy3 IDE 连接\n\n只能通过远程连接来用 MaixPy3 IDE 连接 MaixSense ，使用有线连接会连接不上。\n每个人的网络环境都存在差异，都可能存在连接不上的情况。\n\n### 准备\n\n- 烧录好带有 MaixPy3 的 Armbian 系统\n- 连接网络进行 MaixPy3更新，确保 MaixPy3 的版本大于 0.3.4。\n- 运行 `ifconfig` 获取开发板的 IP 地址\n\n### 连接\n\n在MaixSense上运行 `python3 -c \"import maix.mjpg;maix.mjpg.start()\"` 启动板子上的远程 RPyc 服务\n\n在电脑 IDE 中新建代码区，运行下面的代码来连接开发板\n\n```python \n$connect(\"192.168.43.44\") # 此处填入开发板的 IP 地址\nimport platform\nprint(platform.uname())\n```\n\n运行输出结果如下：\n![MaixPy3 IDE](./assets/MaixPy3-IDE.jpg)\n\n## 设置时区\n\n命令行中输入`armbian-config`，选中Personal，再选择Timezone -> Asia ->Shanghai设置上海时间（Debian中没有北京时间），按住TAB键切换到ok，保存即可。\t\t\n\n![202108062005](./assets/202108062005.gif)\n\n## 设置中文显示\n\n命令行中输入`armbian-config`，选中Personal -> Locales -> 下滑到最下面，空格选中zh.GBK和zh.UTF-8,，然后勾选zh_CN.UTF8设置为系统默认语言，按住TAB键切换到ok，保存，exit退出，下载中文字体，`apt-get install fonts-wqy-zenhei`，重启后系统环境就变成中文的了。\n\n![202108062054](./assets/202108062054.gif)\n\n## 配置蓝牙\n\n打开`armbian-config`，选中Network，选择BTinstall安装蓝牙支持包。\n\n![202108071034](./assets/202108071034.gif)\n\n可以使用Xftp传输，安装完毕后断电重启即可。\n\n然后就可以使用Bluetoothctl配置蓝牙。\n\n常用命令：\n\n```bash\ndevices             \t\t列出活动的蓝牙设备\npaired-devices      \t\t列出已配对蓝牙设备\npairable <on/off>   \t\t是否允许配对\ndiscoverable <on/off>       是否允许被发现\ndiscoverable-timeout [value]设置暴露时间\npair [dev]                  配对设备\ntrust [dev]                 信任设备\nuntrust [dev]               取消设备信任\nremove <dev>                移除设备\nconnect <dev>               连接设备\ndisconnect [dev]            断开设备连接                      \nquit                        退出\nhelp          \t\t\t\t查看帮助\n```\n\n### 连接蓝牙设备\n\n使用`bluetoothctl`连接蓝牙设备。\n\n```bash\nscan on #扫描设备\nscan off #停止扫描\ntrust XX:XX:XX:XX # 信任设备\npair XX:XX:XX:XX #配对设备\nconnect XX:XX:XX:XX #连接设备\n```\n\n\n\n![202108071610](./assets/202108071610.gif)\n\n### 设置蓝牙音频输入/输出\n\n启用蓝牙音频前，需要先安装`pulseaudio`即及蓝牙组件\n\n```bash\nsudo apt install pulseaudio\nsudo apt install pulseaudio-module-bluetooth\n```\n\n然后使用pactl查看是否有蓝牙输出设备\n\n```bash\npactl list short sinks\n```\n\n切换音频输出到蓝牙\n\n```bash\npactl set-default-sink <dev>\n```\n\nlog如下：\n\n```bash\nmaixsense:~:# apt install pulseaudio\nmaixsense:~:# apt install pulseaudio-module-bluetooth\nmaixsense:~:# pactl list short sinks\n0\talsa_output.platform-7032000.codec.stereo-fallback\tmodule-alsa-card.c\ts16le 2ch 44100Hz\tSUSPENDED\n2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule-bluez5-device.c\ts16le 2ch 44100Hz\tSUSPENDED\nmaixsense:~:# pactl set-default-sink 2 \n```\n\n![202108071726](./assets/202108071726.gif)\n\n然后就可以播放音频到蓝牙设备，或者通过蓝牙连接手机当作蓝牙音箱使用。\n\n## 配置音量\n\n`alsamixer`\n\n![202108071440](./assets/202108071440.gif)\n\n常用命令\n\n```\n------------------- Help-----------------------\nxxEsc     离开                                ▒x\nxxF1 ? H  帮助                                ▒x\nxxF2 /    系统信息                            ▒x\nxxF3      回放控制                            ▒x\nxxF4      捕获控制                            ▒x\nxxF5      所有控制                            ▒x\nxxTab     切换显示模式                        ▒x\nxxF6 S    选择声卡                            ▒x\nxxL       刷新屏幕                            ▒x\nxxLeft    移动到上一个的控制                    ▒x\nxxRight   移动到下一个的控制                    ▒x\nxxUp/Down    改变音量                         ▒x\nxx+ -        改变音量                         ▒x\nxxPage Up/Dn 大幅改变音量                      ▒x\nxxEnd        设置音量为0                       ▒x\nxx0-9        从0到9依次设置音量                 ▒x\nxxQ W E      增加 左/全部/右声道音量            ▒x\nxxZ X C      减少 左/全部/右声道音量            ▒x\nxxB          左右声道平衡                      ▒x\nxxM          切换静音                         ▒x\nx< >         切换左/右静音                     ▒x\nxxSpace      切换捕获                         ▒x\nxx; '        切换左/右捕获                     ▒x\n-----------------------------------------------\n```\n\n如果需要控制蓝牙设备音量，需要使用`pactl` ，并且`pcatl`也支持控制声卡，所以推荐使用此app控制音量。\n\n```bash\n##查看输入/输出设备索引\npactl list short sources/sinks\n##设置输入/输出音量\npactl set-source/sink-volume index volume\npactl set-default-source/sink\n##设置默认输入/输出\n```\n\n示例，设置蓝牙耳机为输出设备，音量为10%,然后增加20%，最后减少30%\n\n```bash\nmaixsense:~:# pactl list short sinks\n0\talsa_output.platform-7032000.codec.stereo-fallback\tmodule-alsa-card.c\ts16le 2ch 44100Hz\tSUSPENDED\n2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule-bluez5-device.c\ts16le 2ch 44100Hz\tRUNNING\n##蓝牙设备一般为bluez_sink\nmaixsense:~:# pactl set-default-sink 2\nmaixsense:~:# pactl set-sink-volume 2 10%  \nmaixsense:~:# pactl set-sink-volume 2 +8192  \nmaixsense:~:# pactl set-sink-volume 2 -0x3000\n##可选 百分比，十进制数，十六进制数控制，效果相同，并且可以超过100%\n```\n\n## 媒体播放\n\n媒体播放常用mplayer\n- 下载mplayer \n  \n> sudo apt install mplayer\n  \n然后执行 `sudo mplayer badapple_240p.mp4 -vo fbdev2` 来播放视频\n或者`sudo mplayer G.E.M.邓紫棋\\ -\\ 光年之外.flac` 播放音频\n\n在后面加上`< /dev/null > /dev/null 2>1 &`以便在后台播放\n\n```bash\nmplayer /root/badapple_240p.mp4 -vo fbdev2  < /dev/null > /dev/null 2>1 &\n```\n\n![202108091128](./assets/202108091128.gif)\n\n\n\n## 编写c代码\n\n```bash\nvim helloworld.c  #使用 vim 创建一个文件并打开\ni                 #在vim中这个指令的意思是输入，之后就可以敲代码了\n```\n可以将下面的代码输入到刚刚新创建的文件中\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"Hello, world\\n\");\n    return 0;\n}\n```\n输完上面的代码后需要按下 esc 键来退出编辑模式\n就这再输入 `:wq` 来保存文件且退出vim\n```bash\ngcc hello.c -o hello.o #编译C文件\n./hello.o              #运行编译出来的C文件\n```\n\n![202108091201](./assets/202108091201.gif)\n\n## 编写python代码\n- 详细解释看上面的C代码样例\n```bash\nvim helloworld.py\ni\nprint(\"hello world!\\n\")\nesc\n:wq\npython3 helloworld.py\n```\n\n![202108091339](./assets/202108091339.gif)\n\n## 使用python点亮第一个灯\n\n安装GPIO的python支持库\n\n```bash\npip install gpiod\n```\n\n把led正极插入PH5,负极插入GND\n\n编写代码\n\n``` bash\nvim led.py\n```\n\n复制代码进去\n\n```python\nimport time\nimport gpiod as gpio\nPH_BASE = (8-1)*32 # \"PH\"\ngpiochip1 = gpio.chip(\"gpiochip1\")\nled = gpiochip1.get_line((PH_BASE + 5)) # \"PH5\"\nconfig = gpio.line_request()\nconfig.request_type = gpio.line_request.DIRECTION_OUTPUT\nled.request(config)\n\nwhile led:\n    led.set_value(0)\n    time.sleep(1)\n    print(\"led on\")\n    led.set_value(1)\n    time.sleep(1)\n    print(\"led off\")\n```\n\n执行代码\n\n ```bash\n python3 led.py\n ```\n\n效果如下：\n\n![202108091956](./assets/202108091956.gif)\n\n\n## 运行神经网络实例\n\n获取1000类物体分类模型\n\n下载站链接[zhouyi_test.tar.xz](https://dl.sipeed.com/shareURL/MaixII/MaixII-A/example),使用任意方式上传到板子中\n\n```bash\ntar -Jxvf zhouyi_test.tar.xz #解压压缩包\ncd zhouyi_test #打开解压后的文件目录\nchmod 777 run.sh #授予执行权限\n./run.sh #执行1000类物体分类\n```\n\n## 设置开机启动\n\n启用开机自启动脚本\n\n```bash\nvim /lib/systemd/system/rc-local.service\n```\n\n在最后面添加\n\n```bash\n[Install]\nWantedBy=multi-user.target\nAlias=rc.local.service\n```\n\n编辑自启动脚本\n\n ```bash\n vim /etc/rc.local\n ```\n\n在`exit 0`前面添加需要启动的服务\n\n然后重启即可\n\n注意，此脚本会在用户登录前执行，执行日志如下\n\n```bash\n[  OK  ] Finished Permit User Sessions.\n[  38.569457] rc.local[1322]: hello world!\n```\n\n## 更多的使用方法\n请到[MaixPy3](/soft/maixpy3/zh/readme.md)和[极术社区](https://aijishu.com/a/1060000000221780)中自行查看"}, "/hardware/zh/maixII/M2A/config_system.html": {"title": "配置系统", "content": "# 配置系统\n\nLichee MaixSense 的引脚图如下:\n\n<img src=\"./assets/R329-pin.png\" alt=\"pinmap\" width=60%>\n\n## 连接串口\n\n连接串口是为了使电脑与板子能够进行通信。\n\n相关操作： 使用 Type-C 线将电脑与上图所标注处的 `USB转系统串口` 相连即可，然后根据电脑系统执行不同的下方操作\n\n### Linux & macOS\n\nLinux 不需要装驱动，系统自带了，使用 `ls /dev/ttyUSB*` 命令即可看到设备号\n\n### Windows\n\nLichee MaixSense 使用了 CH340 作为串口芯片。Windows 用户需要安装 CH340 的驱动。\n\nWindows 下载 [ch340 ch341 driver](https://api.dl.sipeed.com/shareURL/MAIX/tools/ch340_ch341_driver) 安装即可，然后可以在设备管理器中看到串口设备和端口号。\n\n## Tina 系统配置\n\n一般建议使用 armbian 系统，对于 Tina 系统用户需要有一定的使用基础才能够使用。\n\nLichee MaixSense 的 Tina 系统配置和 [M2dock](./../M2/usage.html) 基本相同，这里不另作赘述。\n<!-- \n- 可以将板子上的摄像头拆下来后再将电脑与该接口相连然后使用 [adb](https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn) 工具来操作板子，此操作仅限 Tina 系统。因为不推荐小白使用 Tina 系统，所以此处不再细说 -->\n\n## armbian 系统配置\n\n根据本文开头描述来将电脑与板子连接且安装 [CH340 驱动](https://dl.sipeed.com/fileList/MAIX/tools/ch340_ch341_driver/CH341SER.EXE) 后，可以在串口软件比如 Xshell 或者 [Mobaxterm](./../M2/tools/mobaxterm.html)中，设置波特率 (baudrate) 为115200，选择板子的串口，连接上板子。\n\n由于所提供的下载镜像分为内置 MaixPy3 的镜像和无 MaixPy3 的镜像，所以下面分为两种来说明相关操作。\n\n### 默认含有 MaixPy3 的镜像\n\n用户名和密码均为 `root` ，登陆进去即可。输入的时候要是输错了就是直接按回车重来吧，最好输入时无更改。\n\n成功登录的 log 参考如下：\n\n```bash\nArmbian 21.08.0-trunk Bullseye ttyS0\n\nmaixsense login: root\nPassword:\n __  __       _       ____\n|  \\/  | __ _(_)_  __/ ___|  ___ _ __  ___  ___\n| |\\/| |/ _` | \\ \\/ /\\___ \\ / _ \\ '_ \\/ __|/ _ \\\n| |  | | (_| | |>  <  ___) |  __/ | | \\__ \\  __/\n|_|  |_|\\__,_|_/_/\\_\\|____/ \\___|_| |_|___/\\___|\n\nWelcome to Armbian 21.08.0-trunk Bullseye with bleeding edge Linux 5.14.0-rc7-sun50iw11\n\nNo end-user support: built from trunk & unsupported (bullseye) userspace!\n\nSystem load:   133%             Up time:       0 min\nMemory usage:  53% of 231M      Zram usage:    23% of 115M      IP:            192.168.0.251\nCPU temp:      50°C             Usage of /:    77% of 2.9G\n\n[ 0 security updates available, 66 updates total: apt upgrade ]\nLast check: 2022-08-31 01:45\n\n[ General system configuration (beta): armbian-config ]\n\nLast login: Tue Aug 30 10:34:06 UTC 2022 on ttyS0\nroot@maixsense:\n```\n\n### 不含 MaixPy3 的镜像\n\n首次使用需要设置密码，第一次使用没有设置密码的话只能重新烧录重新获取设置密码的机会。\n\n密码过短或者过于简单的话会被要求重新设置。\n\n```bash\nNew to Armbian? Documentation: https://docs.armbian.com Support: https://forum.armbian.com\n\nNew root password: **********\nRepeat password: **********\n```\n\n设置完密码后需要自行设置默认 shell,一般选择 bash\n\n```bash\nChoose default system command shell:\n\n1) bash\n2) zsh\n\nShell: BASH\n```\n\n然后会要求新建一个用户，自定义用户名和登录密码即可。\n\n```bash\nCreating a new user account. Press <Ctrl-C> to abort\n\nPlease provide a username (eg. your forename): ll\nCreate password: *********\nRepeat password: *********\n```\n\n新建用户后默认给新建的用户授予了 root 权限，以后可以直接使用新建的用户来操作板子。\n\n我们可以用 `passwd` 命令来删除或者修改密码。\n\n例如我们可以使用 `passwd -d root` 来删除我们开始所创建的 root 用户的密码，也可以使用 `passwd root` 命令来重新设置 root 用户的密码\n\n下面是部分 `passwd` 命令例子 log\n\n```bash\nroot@maixsense:~# passwd root\nNew password:\nRetype new password:\npasswd: password updated successfully\n```\n\n下面是部分示例~\n\n![2021080511-46-52](./assets/2021080511-46-52.gif)"}, "/hardware/zh/maixII/M2S/reources.html": {"title": "M2S介绍", "content": "# M2S介绍\n\nMaixII S是基于 V833 芯片设计的一款【板卡】+【底板】的开发板产品。\n\n## 板卡\n![](./assets/M2s_Dock.jpg)\n\n> 资料[下载](https://dl.sipeed.com/shareURL/MaixII/MaixII-A)\n\n### 参数\n| 项目 | 参数 | \n| --- | --- |\n| CPU | 全志 V833 Arm-Cortex-A7 1.2Ghz 主频 |\n| NPU | 0.4TOPS 算力|\n|内存 |标配单片 16bit 128MB DDR3（可选最大 16bit 512MB DDR3）|\n|存储|核心板板载 128MB SD NAND（可选 512MB 和 4GB）底板板载 TF 卡座子，可扩展存储|\n|摄像头接口|MIPI：标配 200W 像素可见光摄像头(可选配宽动态摄像头)，76 度视场角<br>DVP：标配 30W 像素红外摄像头|\n| 补光灯接口 | 板载 2 个 DC-DC 恒流降压驱动电路+2 个 2P 1.25mm 卧贴母座 <br>（每路最大驱动能力达到 5V 0.5A）|\n| 显示屏幕接口 |  MIPI：默认引出 4-lane MIPI 接口，已适配 5 寸和 7 寸屏 |\n| 触摸屏接口 | 6P 0.5mm FPC 座子：可以连接电容触摸屏或者电阻触摸屏，目前已适配 GT911 |\n| 音频接口 | 板载 3W 单声道音频功放，有 2P 1.25mm 卧贴母座可以连接喇叭 <br>板载驻极体麦克风电路，有 2P 1.25mm 卧贴母座可以连接麦克风 |\n| 以太网 | 板载百兆 PHY 和百兆网口变压器，有 6P 1.25mm 卧贴母座可以连接以太网口 |\n| 继电器 | 板载继电器，触电切换能力 2A 30VDC |\n| RTC 实时时钟 | 板载专用 RTC 芯片+1220 纽扣电池座子 |\n| 按键 |• 复位按键<br>• FEL 按键（进入下载模式）<br>• 2 个用户可编程按键（可以用作防拆报警键等自定义功能）|\n| 扩展接口 | <br>• 4P 座子：1 组 UART、1 组 485、1 组 USB、1 组 IIC<br>• 9P 座子：2 个供电引脚+2 个继电器引脚+1 个按键的 2 引脚+2 个信号引脚<br>• 9P 座子：7 个信号引脚（可以复用为 1 组 SPI 总线+多个 CS 脚）+2 个电源引脚<br>• 9P 座子：6 个信号引脚+3 个电源引脚 |\n\n\n## 产品技术支持\nM2S开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maixII/M2S/V833.html": {"title": "M2S核心介绍", "content": "# M2S核心介绍\n\n## V833 Chip\n\nV833智能视觉AI专用处理器是基于存算紧耦AI引擎的视频识别处理器，采用业界优秀的半导体工艺，创新突破了存算紧耦架构、神经网络权重量化技术、人脸检测技术和人脸图像质量评估技术、图像畸变矫正技术、图像防抖技术和可变帧率的编码技术等关键技术，有效地解决了神经网络计算复杂度高、网络性能差、人脸检测效率低和准确度不高、广角和鱼眼镜头的图像畸变、智能识别/安防产品功耗高等问题，综合技术水平达国内优秀水平，是一款能耗低、运算效率高、检测效率高、图像效果佳的人工智能视频识别处理器。\n\n> 取至<http://www.elecfans.com/d/1557234.html>\n\n![](./assets/V833.png)\n\n## 参数\n| 项目 | 参数 |\n| --- | --- |\n| CPU | 单核Cortex A7@1.2GHz |\n| Video encoder | H.264, up to 5M@20fps<br>H.265, up to 5M@30fps <br>JPEG, up to 1080p@60fps |\n| NPU | 0.4T |\n| EISE | Up to 1080p@60fps |\n| SDRAM | DDR2/DDR3/DDR3L |\n| SMHC | SMHC x3 (SDcO, SDC1, SDC2) |\n| SPI | SPI x3 (SPIO with 2 CS, SPIO supportsquad-output/quad-input SPl mode) |\n| LCD | Parallel RGB, Serial RGB, i8080 |\n| DSPO | BT1120,BT656 |\n| l2S | l2S x2 (12S0,I2S1) |\n| Parallel CSI | Support |\n| Ethernet | 10/100/1000 Mbit/s Ethernet port with RGMll and RMll interfaces|\n| TWI | TWI x5 (TWIO,TWI1,TWI2,TWI3,s_TwWIO) |\n| RSB | support |\n| GPADC | 2-ch |\n| Audio codec | Output : LINEOUTP/N<br>Input: MICIN1P/N, LINEINL |\n| MIPI CSI | 4-lane, up to 8M@30fps |\n| MIPI DSI | Support |\n| Package | LFBGA273 |"}, "/hardware/zh/maixIII/ax-pi/axpi.html": {"title": "MAIX-III AXera-Pi 是什么？", "content": "---\ntitle: MAIX-III AXera-Pi 是什么？\n\n---\n\n> 如果你想分享这款 AI 开发板给其他同学了解，请使用唯一的传送门「[ wiki.sipeed.com/m3axpi ](http://wiki.sipeed.com/m3axpi) 」。\n\n![maixiii_axpi](./../../../../../static/home/maixiii_axpi.jpg)\n\n> [>>> 请点此直达淘宝商品链接 <<<](https://m.tb.cn/h.U30m3xW?tk=L1vr2BQ0AQM)\n\n 2021 年的时候，国内各大芯片原厂纷纷亮出了自己的 Linux 边缘 AI 芯片。\n\n但在 AI 开发板的市场中，前有树莓派（Raspberry Pi），后有英伟达（Jetson Nano）等国外老牌选手强力围剿国内 Linux AI 开发板，在这之前国产的同类产品无论是价格还是体验，都被打的丢盔弃甲。\n\n如今在千元内的选手有晶晨 A311D 、地平线 X3 、瑞芯微 RV1126、堪智 K510、全志 V85X 、晶视 CR182x 、亿智 SV826 、酷芯微 AR9341 等等国产芯片，看上去感觉有很多选择？\n\n但是，它们要么资料太少（资料封闭）、能效比低、价格太贵、生态贫瘠、开发困难、视觉效果太差存在各种各样的问题。\n\n真的很难有一款边缘 AI 板子可以满足开发者的要求！！！\n\n但现在！这些问题可能不再是问题了！\n\n是时候请出我们新一轮的参赛选手了！\n\n练习时长两年半（不是），一颗 3.6TOPs@INT8 大算力低功耗超强夜景的芯片总算是来到了 MAIX-III Linux AI 系列！\n\n<p align=\"center\">\n<img src=\"https://axera-tech.com/upload/8f/091a2540e7cdc5c7f62df022f80220.jpg\" alt=\"img\" style=\"zoom: 50%;\" />\n</p>\n\n没错，它就是来自「[爱芯元智](https://axera-tech.com/)」的 [AX620A](https://axera-tech.com/product/T7297367876123493768)，这是一款高算力，高能效比，低功耗的 AI SoC 芯片，芯片集成了四核 Cortex A7 @ 1Ghz CPU，拥有 3.6TOPs@INT8 的高算力 NPU，支持 4K@30fps 的 ISP，以及支持 H.264、H.265 编码的 VPU，AX620A 还支持 32bit LPDDR4x，支持 EMMC v5.1 / SPI Flash，最多支持 6 路 MIPI 输入，同时最多支持 4 路工作，支持多路子码流，支持 1 路千兆 Ethernet，支持 1 路 USB2.0，支持 2 路 MIPI DSI/CSI 输出。拥有大算力和优异画质处理能力的 AX620A 可以实现更多的 AI 功能，带来最优的 AI 体验！（来自官方）\n\n## 产品介绍\n\n它其实早在九月初就参展了 2022 年世界人工智能大会了～（当时它长这样）\n\n<p align=\"center\">\n  <img src=\"./../assets/waic-axpi.jpg\" style=\"zoom: 70%;\" />\n</p>\n\n最后总算是在 20221001 的时候推出了这款搭载 AX620A 的开发板，正式名为：**MAIX-III AXera-Pi**，在以下内容中简称 **m3axpi** 喔！\n\n<p align=\"center\">\n  <video src=\"../assets/axpi_boom.mp4\"\n    width=\"100%\" controls=\"controls\" autoplay=\"autoplay\"\n    x5-playsinline=\"\"\n \t\tplaysinline\n \t\twebkit-playsinline=\"true\"\n \t\tposter=\"../assets/maix-iii-small.jpg\"\n \t\tpreload=\"auto\"\n  >\n  </video>\n</p>\n\n那么，它都带来了哪些内容呢？\n\n- 资料太少？文档教你从开箱到开发，从嵌入式 Linux 开发到 AI 模型开发指南一应俱全！\n- 能效比差？四核 A7 靠一条 USB3.0 就可以带起来！和你的外接电源、散热器说拜拜吧！！\n- 开发困难？支持 debian11 系统内置 SDK 直接板上编译！白嫖在线 AI 模型训练直到部署！！！\n- 没有生态？ SIPEED 拥有关于 LINUX、RISCV、AIOT、FPGA、MCU 等嵌入式领域的内容！！！！\n- 摄像效果太差？芯片主打 AI ISP 夜视增强！由原厂亲手为你调试白天到夜间的超强影像！！！！！\n- 价格太贵？从核心+底板+屏幕+摄像头+卡+外壳支架全套总共人民币 **579** ！（咆哮！！！！！！）\n\n## 产品特色\n\n说这么多没用的，还是赶紧把东西掏出来，让大家瞧瞧都有些什么吧！\n\n### 影像效果\n\n#### 夜景增强效果\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=561523949&bvid=BV1Ee4y1v7iF&cid=860676576&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"max-width:640px; max-height:480px;\"> </iframe>\n</p>\n\n#### 展会暗室现场\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=430541632&bvid=BV1iG41137tx&cid=831645988&page=1&t=83.6\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"max-width:640px; max-height:480px;\"> </iframe>\n</p>\n\n#### AI 应用实拍\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=773227207&bvid=BV1B14y1Y7A4&cid=837154353&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"max-width:640px; max-height:480px;\"> </iframe>\n</p>\n\n### AI 生态\n\n#### 大算力超多算子！\n\n[点此 >>> 「查看 AX620A 算子支持列表」 <<< 喔！](https://pulsar-docs.readthedocs.io/zh_CN/latest/appendix/op_support_list.html)\n\n下表统计一下目前千元内在售的 AI 主板（仅单主板，全套太贵）的 NPU 算力性能从高到低的排行（20221012）\n\n| 芯片            | 产品             | 价格    | CPU                                                 | RAM   | NPU |\n| --------------- | -------------------------- | ------- | --------------------------------------------------- | ----- | ----------- |\n| 晶晨 A311D      | Khadas VIM3                | ¥850.00 | 四核 ARM Cortex-A73@2.2GHz <br> 双核 ARM Cortex-A53@1.8GHz | 2GB   | 5TOPs          |\n| 地平线 X3       | 旭日派                     | ¥499.00 | 四核 ARM Cortex-A53@1.2GHz                          | 2GB   | 5TOPs          |\n| 爱芯元智 AX620A | MAIX-III AXera-Pi          | ¥399.00 | 四核 ARM Cortex-A7@1.0GHz                             | 2GB   | 3.6TOPs        |\n| 瑞芯微 RV1126   | EASY EAI Nano              | ¥328.00 | 四核 ARM Cortex-A7@1.5GHz                            | 1GB   | 2TOPs          |\n| 堪智 K510       | K510 CRB-KIT Lite          | ¥699.00 | 双核 RISCV 64 位 800Mhz                             | 512MB | 3TOPs          |\n| 全志 V85X       | 全志 V853 开发板（仅主板） | ¥973.00 | 单核 ARM Cortex-A7@1.2GHz | 512MB | 1TOPs          |\n\n#### 大量现成的模型！\n\n没有拿到板子之前，你可以到 [MaixHub 模型库](https://maixhub.com/model/zoo) 找到你需要的模型，可以在过滤选项中选择 `AX-Pi` 来查找能在 `AXera-Pi` 上运行的模型。\n\n![maixhub_zoo.jpg](./../assets/maixhub_zoo.jpg)\n\n还可以在 [AXERA-TECH/ax-samples](https://github.com/AXERA-TECH/ax-samples) 仓库也可以找到模型，板子系统里也预置了模型资源，后续模型更新会在这里[「ax-models」](https://github.com/AXERA-TECH/ax-models)，而 [ AX-Samples 将不断更新最流行的、实用的、有趣的示例代码](https://github.com/AXERA-TECH/ax-samples/tree/main/examples#examples)，目前有如下模型支持列表：\n\n- 物体分类\n  - MobileNetv1\n  - MobileNetv2\n  - MobileOne-s0\n  - ResNet18\n  - ResNet50\n  - Others......\n- 物体检测\n  - [PP-YOLOv3](https://github.com/AXERA-TECH/ax-samples/blob/main/examples/README.md#yolov3paddle)\n  - YOLOv3\n  - YOLOv3-Tiny\n  - YOLOv4\n  - YOLOv4-Tiny\n  - YOLOv4-Tiny-3l\n  - YOLOv5s\n  - YOLOv7-Tiny\n  - YOLOX-S\n  - YOLO-Fastest-XL\n  - NanoDet\n- 人型检测\n  - YOLO-Fastest-Body\n- 人脸检测\n  - scrfd\n- 障碍物检测 (扫地机场景)\n  - Robot-Obstacle-Detect\n- 3D单目车辆检测\n  - Monodlex\n- 人体关键点\n  - HRNet\n- 人体分割\n  - [PP-HumanSeg](https://github.com/AXERA-TECH/ax-samples/blob/main/examples/README.md#MobileSeg)\n- 语义分割\n  - [PP-Seg](https://github.com/AXERA-TECH/ax-samples/blob/main/examples/README.md#PP-HumanSeg)\n\n想要在板子上运行模型请看[「部署模型到 Maix-III AXera-Pi 开发板」](/ai/zh/deploy/ax-pi.html)\n\n<p align=\"center\">\n  <img src=\"./../assets/ai_guide.jpg\" style=\"zoom: 75%;\" />\n</p>\n\n#### 在线训练模型吧！\n\n如今 [新版 MaixHub 正式上线啦！](https://wiki.sipeed.com/news/maixhub/new_maixhub.html)下为 maixhub 在线训练模型流程示意。\n\n<p align=\"center\">\n  <img src=\"./../assets/test_maixhub.jpg\" style=\"zoom: 100%;\" />\n</p>\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=597374704&bvid=BV1eB4y1Q74i&cid=741940038&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"max-width:640px; max-height:480px;\"> </iframe>\n</p>\n\n#### 分享有趣的模型！\n\n在你部署成功后会有一份模型文件，以及能运行模型的代码或程序，你可以将这些文件分享到 [MaixHub 模型库](https://maixhub.com/model/zoo) ，大家一起交流学习成长！（请开始你的表演吧）\n\n<p align=\"center\">\n  <img src=\"./../assets/share_model.jpg\" style=\"zoom: 75%;\" />\n</p>\n\n<p align=\"center\">\n  <img src=\"./../assets/test_yolov5s.jpg\" style=\"zoom: 100%;\" />\n</p>\n\n如 [YOLOv5s-face 人脸检测](https://maixhub.com/model/zoo/110) 、 [蓝绿车牌识别](https://maixhub.com/model/zoo/79) 这些分享出来的现成可部署的模型。\n\n### Linux 开发\n\n#### 超高性价比与能效比\n\n别搞那些虚的。来点实际点的，以下是目前（20221014）市场上销量排行的典型 AI 开发产品。（已除去低成本 38 板摄像头和芯片原厂超昂贵开发板）\n\n| AI 开发板                                            | 全家桶套餐的主要内容                                         | 大致价格（20221013）      |\n| ---------------------------------------------------- | ------------------------------------------------------------ | ------------------------- |\n| 英伟达JETSON NANO开发板                              | 4GB 主板、铝合金外壳（带风扇）、5V4A 电源、双频无线网卡、64G U盘、IMX279 摄像头、HDMI 线 + 网线、7 寸触摸屏+支架、 | ¥2129.00<br />（未来可能降价）                  |\n| Raspberry Pi 树莓派4B                                | 4GB 主板、七寸触摸屏+支架、64G U盘、散热片、HDMI 线 + 网线、5V3A 电源、亚克力外壳（带风扇）、500w USB 摄像头、入门指导手册 | ¥1439.00                  |\n| Khadas vim3物联网a311d（目前线上销量不高，但很典型） | VIM3（4GB+32G）开发板、外壳、散热器、风扇、30W 电源、HDMI 线 | ¥1399.00                  |\n| 迅为RK3568开发板瑞芯微                               | 商业级2G+16G、7寸MIPI屏、OV5695摄像头、（没有配电源）    | ¥1380.00                  |\n| EASY EAI Nano AI开发板 瑞芯微RV1126                  | 1GB 单主板、200w双目摄像头（gc2xxx）、5寸ips屏、天线、喇叭、铜柱、2A电源 | ¥799.00                   |\n| 亚博智能 旭日X3派开发板                              | 2GB 主板、古月居课程、WIFI 天线、铝合金外壳、gc4663 摄像头、32G U盘、5V3A 开关电源、HDMI 线 | ¥769.00                   |\n| Sipeed M3AXPI Linux AI 微光夜视 爱芯派              | 2GB 单主板、400w gc4653 摄像头、5寸ips屏、外壳、数据线、32G TF 卡、在线模型训练服务、活力四射的开源社区       | ¥579.00<br />（未来可能涨价） |\n\n想想某些产品为什么卖这么贵，销量还这么好？凭什么？\n\n这些产品除了本身的质量要过硬，功能要够强，还要凭借自身的社区生态、软件支持、丰富资料、开源代码、用户口碑等等特色，来支撑产品高性价比的形象。\n\n> 笔者在这里认为所谓的性价比不是一昧地追求产品的最低价，而是在同类产品市场的主流价格区间内，选出社区用户群体可以接受的价格，然后在这个定位里去尽力做出效果最好的产品。\n\n从这些典型的产品中可以看出 m3axpi 套餐是没有配「散热片和风扇还有外接电源」的，这也是它的另一个特色「高能效比」。\n\n是的，这个产品不需要散热器/风扇，也不需要外接 2A 电源就可以启动系统，更不需要找 hdmi 线和显示器。\n\n来一个实际测量的温度和功耗，注意要使用 USB3.0 的口来供电喔。\n\n<p align=\"center\">\n  <img src=\"./../assets/temp_test_axpi.jpg\" style=\"zoom: 100%;\" />\n</p>\n\n> 从实测结果上来看，这个功耗和温度控制得挺好，用 USB3.0 5V@1A 承载了底板、核心板、WIFI、以太网、摄像头、5寸屏的工作。\n\n#### 基于 debian 系统开发\n\n提供 debian11 Linux 系统，支持 SD 卡启动 DD 烧录系统，方便用户开箱上手。\n\n1. 烧录方法：[WIKI AXera-Pi 烧录系统](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/flash_system.html)\n\n2. 开发笔记：[[maixpy3 axpi] 关于爱芯 ax620a 移植 debian11 系统这件事](https://www.cnblogs.com/juwan/p/16751348.html)\n\n3. 开发笔记：[[maixpy3 axpi] 编辑发布 debian 镜像与在 PC 上交叉编译程序 ](https://www.cnblogs.com/juwan/p/16769237.html)\n\n#### BSP SDK 源码开放\n\n提供各类开发源码，提供 API 开发文档，SDK 开发方法等说明，细节可以从[SDK 开发指南](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/sdk_usage.html) 得知。\n\n##### [ax-sample](https://github.com/AXERA-TECH/ax-samples)\n\n由爱芯提供典型 AI 模型的开发与评估验证，提供给有经验的 AI 开发者使用或只想蹭模型的同学，不涉及任何硬件外设有关的内容。\n\n1. [示例项目 examples](https://github.com/AXERA-TECH/ax-samples/tree/main/examples)\n2. [物体检测 PP-YOLOv3](https://github.com/AXERA-TECH/ax-samples/blob/main/examples/README.md#yolov3paddle)\n3. [人体分割 PP-HumanSeg](https://github.com/AXERA-TECH/ax-samples/blob/main/examples/README.md#MobileSeg)\n4. [语义分割 PP-Seg](https://github.com/AXERA-TECH/ax-samples/blob/main/examples/README.md#PP-HumanSeg)\n\n##### [libmaix](https://github.com/sipeed/libmaix)\n\n由 SIPEED 提供在嵌入式平台统一的嵌入式开发环境，主要有摄像头、屏幕、视觉、图像处理、部署 Pipeline 相关的实机例程，适合刚入门嵌入式 linux 开发的同学使用。\n\n1. [测试一下屏幕显示](https://github.com/sipeed/libmaix/tree/release/examples/display)\n2. [把摄像头显示到屏幕](https://github.com/sipeed/libmaix/tree/release/examples/axpi)\n3. [摄像头+yolov5 模型+屏幕](https://github.com/sipeed/libmaix/tree/release/examples/axpi_yolov5_cam)\n\n##### [axpi_bsp_sdk](https://github.com/sipeed/axpi_bsp_sdk)\n\n芯片商用时所用的 bsp 开发包，这里主要提供的是芯片的原始开发资料，如 uboot、linux、msp 、sample、rtsp、ipcdemo 等工程代码，这个部分是逐步开源的，你可以从这里得到商业评估用的代码，例如 ipcdemo 这样的程序，但这些代码会很复杂且高耦合，适合有经验的同行出于商业落地的目的使用。\n\n1. 开发文档 [docs](https://github.com/sipeed/axpi_bsp_sdk/tree/main/msp/sample/vo_fb)\n2. 框架应用 [ipcdmeo](https://github.com/sipeed/axpi_bsp_sdk/tree/main/app/IPCDemo)\n3. 外设验证 [sample](https://github.com/sipeed/axpi_bsp_sdk/tree/main/msp/sample)\n\n##### [ax-pipeline](https://github.com/AXERA-TECH/ax-pipeline)\n\nAX-Pipeline 由爱芯主导开发。该项目基于 AXera-Pi 展示 ISP、图像处理、NPU、编码、显示 等功能模块软件调用方法，方便社区开发者进行快速评估和二次开发自己的多媒体应用。\n\n1. [快速编译](https://github.com/AXERA-TECH/ax-pipeline/blob/main/docs/compile.md) 基于 cmake 实现简单的跨平台编译。\n2. [如何更换自己训练的 yolov5 模型](https://github.com/AXERA-TECH/ax-pipeline/blob/main/docs/how_to_deploy_custom_yolov5_model.md)\n3. [如何部署自己的其他模型](https://github.com/AXERA-TECH/ax-pipeline/blob/main/docs/how_to_deploy_custom_model.md)\n4. [如何调整图像方向](https://github.com/AXERA-TECH/ax-pipeline/blob/main/docs/how_to_adjust_image_orientation.md)\n5. [ModelZoo](https://github.com/AXERA-TECH/ax-pipeline/blob/main/docs/modelzoo.md) 一些支持或将支持的模型和一些模型的说明。\n\n## 社区资源\n\n以下是由社区开发者贡献的内容，欢迎你也来贡献喔！！！（直接丢群里都可以喔！）\n\n- [爱芯派-AI微光全彩夜视-开箱体验](https://zhuanlan.zhihu.com/p/571233089)\n- [爱芯 AX620A NPU 初体验](https://neucrack.com/p/440)\n- [爱芯元智AX620A部署yolov5 6.0模型实录](https://zhuanlan.zhihu.com/p/569083585)\n- [ubuntu22.04搭建AX620A官方例程开发环境](http://t.csdn.cn/p8Nno)\n- [AX620A运行yolov5s自训练模型全过程记录（windows）](http://t.csdn.cn/oNeYG)\n- [MAIX-III AXera-Pi爱芯派从零入门开发【1】开箱试玩](https://www.bilibili.com/video/BV1LP4y1274d/?spm_id_from=333.999.0.0)\n- [MAIX-III AXera-Pi爱芯派从零入门开发【2】开发部署](https://www.bilibili.com/video/BV1Ne4y117U9/?spm_id_from=333.999.0.0)\n- [MAIX-III AXera-Pi爱芯派从零入门开发【3】模型转换及部署](https://www.bilibili.com/video/BV1jg411z7C8/?spm_id_from=333.999.0.0)\n- [MAIX-III AXera-Pi爱芯派从零入门开发【4】视频推理及推流](https://www.bilibili.com/video/BV14D4y147Ed/?spm_id_from=333.999.0.0)\n\n产品相关的新闻内容有：\n\n- [AI ISP 的黎明——大话成像](https://axera-tech.com/tech/T7297054127901756535)\n- [2022世界人工智能大会启动:爱芯元智发布AI-ISP“爱芯智眸®”_中华网](https://tech.china.com/article/20220901/092022_1134965.html)\n\n正在联动的 AI 社区有：\n\n- [sipeed maixhub.com](https://maixhub.com)\n- [秘密策划中]()\n\n### 产品开箱测评公示（进行中）\n\n- **活动内容**：为给社区小伙伴们提供良好的开箱回赠，本活动面向已购买**全功能套餐**的同学征集产品测评，将测评在此公示的同学可找**大佬鼠**领取 [MaixII M2DOCK](./../../maixII/M2/resources.html) 、 [TANG NANO 9K](./../../tang/Tang-Nano-9K/Nano-9K.html) 、 [MAIXSENSE A010](./../../maixsense/maixsense-a010/maixsense-a010.html) 等产品三选一作为奖品发放。\n\n- **测评要求**\n\n1. 测评的场景、题材、内容不限，但提交的内容不应与上述社区或他人内容冲突。\n2. 测评内容至少满足在`**丰富图文内容**`或`**分享开发成果**`中的一项。\n3. 可参考以往的产品测评：\n   ① [【Sipeed M2 Dock开发板试用体验】开箱帖（含高颜值个人单身照）](https://bbs.elecfans.com/jishu_2286184_1_1.html)\n   ② [【Sipeed M2 Dock开发板试用体验】图传功能使用与魔方色块寻找](https://bbs.elecfans.com/jishu_2290503_1_1.html)\n\n- **截止时间**：2022年12月31号\n\n- **测评公示**：\n\n> 测评结果会公开在此，并附上你的署名。需要提交测评的同学请直接联系群里的 **大佬鼠** 或发送评测内容到 `support@sipeed.com` 并署名：【m3axpi 产品测评】。\n\n- [某某同学：如何优雅的打开某某产品？]()\n\n### 模型训练测评公示（进行中）\n\n> 使用 maixhub.com 需要先注册账号登陆，才能正常使用查看分享的模型和在线训练模型。\n\n- **活动内容**：为了雨露均沾照顾所有的社区小伙伴们，我们还启动了面向于对产品十分感兴趣但未购买的同学的活动，通过分享 AI 模型参与模型测评，抄底价赢取产品。（五折起步）\n\n- **测评要求**\n\n1. 模型评分点（100）\n   ① 模型下载量+收藏数（20）\n   ② 模型结构新颖（30）\n   ③ 模型有创新点（30）\n   ④ 模型有应用场景（30）\n   ⑤ 有实际案例最好（40）\n   评分至少大于 60 分的才被算入可发放奖品的对象。\n\n2. 必须是官方发布以外的模型（[可点此查看已提供的模型](https://maixhub.com/model/zoo)），分享模型不要求数据集公开，但需要通过模型转换得到验证过的 joint 模型，并上传模型给审核的同学看到。\n\n负责模型评分和审核的同学有 圈圈虫 (axera-tech) 以及 neucrack (sipeed) 两位同学进行审核喔！\n\n社区的其他同学也可以一同参与喔，快快给你喜欢的模型点赞加收藏加分吧！\n\n模型提交步骤： ① 注册登陆 MaixHub ② 点击进入模型库 ③ 选择上传模型分享，提交格式可参考其他模型，如 [YOLOV7-Tiny 80 种物体检测](https://maixhub.com/model/zoo/96) 、 [检测小鸭子玩具](https://maixhub.com/model/zoo/108) 。\n\n- **截止时间**：2022年12月31号\n\n- **测评公示**：\n\n访问 [https://maixhub.com/model/zoo](https://maixhub.com/model/zoo) 查看大佬们分享的模型。\n\n## 产品参数\n\n<p align=\"center\">\n  <img src=\"./../assets/waiguan1.jpg\" style=\"zoom: 51%;\" />\n  <img src=\"./../assets/maix-iii-small.jpg\" style=\"zoom: 80%;\" />\n  <img src=\"./../assets/waiguan2.jpg\" style=\"zoom: 45%;\" />\n</p>\n\n### 硬件标注图\n\n<p align=\"center\">\n  <img src=\"./../assets/layout_axpi.jpg\" alt=\"img\" style=\"zoom: 100%;\" />\n</p>\n\n### 核心板参数\n\n| 项目       | 参数                                  |\n| ---------- | ------------------------------------- |\n| CPU        | Quad-A7 @ 1.0 Ghz（四核A7）            |\n| NPU        | 14.4Tops@int4，3.6Tops@int8           |\n| ISP        | 4K@30fps                              |\n| 编解码格式 | H.264, H.265                          |\n| 视频编码   | 4K@30fps                              |\n| 视频解码   | 1080P@60fps                           |\n| Ethernet   | 支持双路RGMII / RMII 接口模式的以太网 |\n| 显示输出   | MIPI DSI 4 Lane，最高支持4K@30FPS |\n| DRAM       | 2GB LPDDR4X 3733Mhz                 |\n| 存储       | 可选16GB EMMC（默认是 TF 卡启动）       |\n| IO 引出    | DDR4 SODIMM 260P 金手指全 IO 引出       |\n\n### 底板参数\n\n| 项目       | 参数                                   |\n| ---------- | ------------------------------------- |\n| 摄像头输入 | （默认单摄）最高支持 3 摄:1个MIPI4-LANE+2个MIPI2-LANE |\n| 屏幕输出 | 支持最高 4-LANE MIPI DSI 屏幕 |\n| SD 插槽 | 默认从 SD 卡启动 |\n| 录音输入 | 板载两个 MEMS MIC 支持双麦降噪 |\n| 音频输出  | 3.5MM耳机接口 支持立体声输入和 MIC 输入 |\n| 网络接口 | 支持 千兆以太网（ETH） 和 2.4GHZ WI-FI 板载天线 |\n| USB 接口  | 1xUSB2.0HS 支持 OTG 或 HOST 功能，1xUSB-UART 系统串口 |\n| 其他资源  | 1x用户按键，3x系统按键，1xRTC时钟，2xLED |\n| 对外接口  | 引出CJTAG，可自行连接相应调试器，引出2x12排针，4个M2.5螺丝定位孔 |\n\n[硬件资源汇总](https://dl.sipeed.com/shareURL/MaixIII/AXera)\n\n- [原理图](https://dl.sipeed.com/shareURL/MaixIII/AXera/02_Schematic)\n- [点位图](https://dl.sipeed.com/shareURL/MaixIII/AXera/03_Bit_number_map)\n- [模型文件](https://dl.sipeed.com/shareURL/MaixIII/AXera/05_3D_file)\n- [尺寸图](https://dl.sipeed.com/shareURL/MaixIII/AXera/04_Dimensional_drawing)\n\n### 摄像头一览\n\n- 低配 gc4653 400w 基础体验版本。\n\n<p align=\"center\">\n  <img src=\"./../assets/ax620a_gc.jpg\" style=\"zoom: 100%;\" />\n</p>\n\n- 高配 os04a10 400w 夜景增强版本。\n\n<p align=\"center\">\n  <img src=\"./../assets/ax620a_os.jpg\" style=\"zoom: 100%;\" />\n</p>\n\n> [更换摄像头可以看这个](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/faq_axpi.html)\n\n## 其他资源\n\n### 产品相关\n\n- AI 服务 http://maixhub.com\n- 文档资料 http://wiki.sipeed.com\n- 交流社区 http://bbs.sipeed.com\n- 开源组织 http://github.com/sipeed\n\n### 售后支持\n\n- AXERA 技术交流群：（ 139953715 ）专供 AI ISP 技术交流\n- 荔枝 MaixPy3 AI 交流群：（ 756313869 ）给产品开箱小白答疑\n\n> 一些常见问题（FAQ） Q & A 请到 [Maix-III 系列 AXera-Pi 常见问题（FAQ）](./ax-pi/faq_axpi.html) 了解喔。"}, "/hardware/zh/maixIII/ax-pi/dev_prepare.html": {"title": "Maix-III AXera-Pi 开发准备工作", "content": "---\ntitle: Maix-III AXera-Pi 开发准备工作\n---\n\n> 本文假定你是一名不了解 linux 系统的开发方式的开发者，但知道 gcc 和 make 命令使用的相关专业工程师，如果你不了解 gcc 编译程序，可以先学习[Linux中gcc/g++ gdb make/Make 的基本使用和理解](https://blog.csdn.net/m0_46606290/article/details/123083945) 。\n\n## 准备工作\n\n欲善其事，必先利其器。在开始开发之前，需要准备好开发板、开发环境、开发工具等。\n\n根据前面的章节，你掌握了开发板的 烧录系统 和 登录系统 等一系列 Linux 基础操作，这可以帮助你在开发过程中排查设备问题或调试驱动代码。\n\n但接下来要开发程序就需要准备好开发环境和开发工具了，以下是给从来没接触过嵌入式 linux 系统开发的同学了解的内容，如软件工程的同学。\n\n首先认识一下什么是交叉编译，通常来说，编译程序有交叉编译和本地编译两种情况，本地编译就是在本机上使用 gcc 进行编译运行程序（例如在 Visual Studio 上编译运行 hello world ），而交叉编译就是本机没有编译环境，需要在另一台机器上完成编译再送进来运行（例如在 Android Studio 上编译 apk 送到手机里安装程序运行）。\n\n> 交叉编译是指在一种计算机架构上编译出另一种计算机架构的可执行程序。交叉编译的目的是为了在一种计算机架构上运行另一种计算机架构的程序。例如，可以在 x86 架构的计算机上编译出 ARM 架构的可执行程序，或者在 ARM 架构的计算机上编译出 x86 架构的可执行程序。交叉编译的目的是为了在一种计算机架构上运行另一种计算机架构的程序。例如，可以在 x86 架构的计算机上编译出 ARM 架构的可执行程序，或者在 ARM 架构的计算机上编译出 x86 架构的可执行程序。\n\n两者的区别在于编译一些复杂大型软件，本机性能太弱内存又少，导致编译出来的时间太长，所以需要交叉编译来完成，比如 ax-sample 在本机完整编译需要十几分钟，而在一台高性能的桌面计算机上只需要数十秒即可。\n\n所以从开发的角度来说，本机编译只是为了快速应用查看效果，真正得开发起来还是得交叉编译，就像原厂提供的 bsp sdk 一样，在计算机上完成编译后，再送进板子中运行。\n\n## 板子与电脑的文件互传\n\n在编译程序之前，你需要了解一些拷贝文件到板子或电脑的方法，免得交叉编译完程序不知道怎么传文件进去板子里运行。\n\n- ssh 相关的远程工具需要，你知道板子的 IP 地址，可以从 ifconfig 得知。\n- serial 相关的有线串口工具，需要你接好线配置好参数连上板子。\n\n如何登录板子均可以从前文【系统使用手册】中得知。\n\n### 使用 ssh 远程管理工具\n\n在 windows 上有许多远程管理 linux 服务器的工具都提供了文件传输的功能，这里只推荐免费绿色好用的 mobaxterm 工具。\n\n- [利用MobaXterm实现linux和windows之间传输文件](https://jingyan.baidu.com/article/9f63fb91e2bc6688400f0e93.html)\n\n- [用MobaXterm 在linux和windows之间上传/下载文件](https://blog.csdn.net/unforgettable2010/article/details/123930796)\n\n> [如何使用 mobaxterm](https://wiki.sipeed.com/hardware/zh/maixII/M2/tools/mobaxterm.html)\n\n想了解更多可以看 [推荐7款超级好用的终端工具 —— SSH+FTP](https://zhuanlan.zhihu.com/p/301653835) ，而其他系统都提供了好用的命令行终端，支持 ssh 、 scp 等命令直接执行。\n\n### 使用 scp 命令复制文件\n\n和 cp 复制文件等命令一样，它就是 ssh + cp = scp 这个意思。\n\n- [linux操作系统scp命令使用方法](https://cloud.tencent.com/developer/article/1876623)\n\n###  使用读卡器物理拷贝文件\n\n由于 linux 系统采用 ext4 分区在 Windows / Mac 默认系统上看不到，需要额外安装增强工具才能读取到具体的分区。\n\n- [如何在 Windows 下访问 ext4 格式的硬盘？](https://zhuanlan.zhihu.com/p/448535639)\n\n- [[macOS] 在 macOS 上挂载 Linux 的 ext/ext3/ext4 文件系统](https://blog.twofei.com/773/)\n\nLinux 系统可以直接看到卡里的分区和内容，实在不行也可以把读卡器接到安卓设备通过 otg 转接头实现文件拷贝。\n\n### 使用有线串口互传文件\n\n接好串口连上设备，安装 `apt-get install lrzsz` 工具后参考以下文章：\n\n- 使用 命令行工具  `minicom -D /dev/ttyUSB0 -b 115200` 可以看[ubuntu中使用 minicom 玩转文件的上传与下载](https://blog.csdn.net/wanyeye/article/details/42002377)。\n\n- 使用 mobaxterm 可以看 [MobaXterm 使用 rz/sz 传送文件](https://blog.csdn.net/qq_28837389/article/details/120073720)\n\n其他的可以自行百度。\n\n## 本机编译可直接运行程序\n\n这里把 m3axpi 板子当作一台本地的微型 linux 服务器的角色来看待，使用 vscode remote 或 mobaxterm 这类远程开发工具连接到板子里，这样就可以得到一个和在 linux 服务器一样的本地开发环境，可以在本地编辑代码后直接编译运行程序。\n\n### vscode remote\n\nvscode remote 是 vscode 的一个插件，可以直接连接到远程的 linux 服务器，然后在本地编辑代码，同步到远程服务器上编译运行，这里以一台 ubuntu20.04 的桌面计算机系统为例，只要能安装 vscode 编辑器软件计算机都行，这里只是为了示意如何连接到板子里。\n\n安装插件：\n\n```bash\nsudo apt install code\ncode --install-extension ms-vscode-remote.remote-ssh\n```\n\n[附图]\n\n连接到板子：\n\n```bash\nssh root@192.168.233.1\n```\n\n[附图]\n\n不想输入密码可以用 sshpass 命令省略。\n\n```bash\nsshpass -p root ssh root@192.168.233.1\n```\n\n接着就可以在 vscode 里编译运行 linux 系统的程序了，幸运的是在 debian 系统上可以直接通过 apt 得到本机的编译工具链，而不用交叉编译就可以直接编译运行程序，这些都已经提前准备好了，对用户来说可以节省不少搭建内部开发环境的时间。\n\n所以可以直接在板子里编译运行 libmaix 项目：\n\n```bash\ncd /home/libmaix/examples/axpi/\npython3 project.py build\nfbon\n./dist/start_app.sh\n```\n\n> 按 ctrl + c 中断停止程序直到退出。\n\n附图：\n\n### mobaxterm\n\n在 Windows 上可以用 mobaxterm 这样的工具连接到板子进行 linux 服务器管理，但编译还是需要在 linux 系统上进行。\n\n![mobaxterm_ssh](./../assets/ssh.jpg)\n\n## 交叉编译上传程序再运行\n\n在这之前需要有本地编译的认知，然后发现本地内存和性能不能满足自身开发需求的时候，就要准备交叉编译程序了，此时程序是在另一台更强的 x86 linux 系统上完成的，并且编译出来的程序需要拷贝到板子里运行。\n\n> **[20221010 现提供一种借助 docker qemu arm 虚拟机来实现在 x86 机器上实现本地编译 arm 程序的方法，这种方法既提高了编译效率又不用配环境的方法值得一试！](https://www.cnblogs.com/juwan/p/16769237.html)**\n\n首先得有一台 linux 系统，如 ubuntu20.04 这样的桌面计算机，接着和上面一样，也可以在这台计算机上安装 vscode remote 或 idea clion 这类开发工具直接连接到板子里，这可以方便你编辑代码或传输文件。\n\n想要在 x86 的机器上编译出 arm 架构的程序，想要先配置专用的交叉编译工具链，例如这里使用的是 arm-linux-gnueabihf 这个工具链，这个编译链可以直接通过 apt 安装。\n\n- `sudo apt install gcc-arm-linux-gnueabihf`\n\n安装完成后，可以在 /usr/bin 目录下找到 `arm-linux-gnueabihf-gcc` 这个交叉编译工具，这个工具可以用来编译 linux 系统的程序。\n\n```bash\njuwan@juwan-n85-dls:~$ /usr/bin/arm-linux-gnueabihf-gcc -v\nUsing built-in specs.\nCOLLECT_GCC=arm-linux-gnueabihf-gcc\nCOLLECT_LTO_WRAPPER=/usr/lib/gcc-cross/arm-linux-gnueabihf/9/lto-wrapper\nTarget: arm-linux-gnueabihf\nConfigured with: ../src/configure -v --with-pkgversion='Ubuntu 9.4.0-1ubuntu1~20.04.1' --with-bugurl=file:///usr/share/doc/gcc-9/README.Bugs --enable-languages=c,ada,c++,go,d,fortran,objc,obj-c++,gm2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-9 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-libitm --disable-libquadmath --disable-libquadmath-support --enable-plugin --enable-default-pie --with-system-zlib --without-target-system-zlib --enable-libpth-m2 --enable-multiarch --enable-multilib --disable-sjlj-exceptions --with-arch=armv7-a --with-fpu=vfpv3-d16 --with-float=hard --with-mode=thumb --disable-werror --enable-multilib --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=arm-linux-gnueabihf --program-prefix=arm-linux-gnueabihf- --includedir=/usr/arm-linux-gnueabihf/include\nThread model: posix\ngcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.1)\n```\n\n\n\n本地与交叉编译唯一不同的地方就是需要把将编译出来的程序，上传到板子运行，而不能直接运行程序。\n\n以 libmaix 这个项目为例：在 x86 的机器上编译时需要修改本机的交叉编译链，如：python3 project.py --board=axpi --toolchain /usr/bin --toolchain-prefix arm-linux-gnueabihf- config 之中的编译链可能会发生改变，这里需要根据你的实际情况进行修改，比如本机环境下可能有多个编译链，但一般来说是不需要修改的。\n\n除了修改交叉编译链，如果出现编译失败，还需要修改编译配置中所需要的依赖文件或头文件的路径：\n\n```\n        list(APPEND ADD_INCLUDE \"lib/arch/axpi/joint\"\n                                \"lib/arch/axpi/opt/include\"\n                                \"lib/arch/axpi/opt/include/opencv4\"\n        )\n        \"/lib/aarch64-linux-gnu/libm.so\"\n        \"/lib/aarch64-linux-gnu/libpthread.so\"\n        \"/lib/aarch64-linux-gnu/libopencv_videoio.so\"\n        \"/lib/aarch64-linux-gnu/libopencv_highgui.so\"\n        \"/lib/aarch64-linux-gnu/libopencv_imgcodecs.so\"\n        \"/lib/aarch64-linux-gnu/libopencv_imgproc.so\"\n        \"/lib/aarch64-linux-gnu/libopencv_core.so\"\n        \"/lib/aarch64-linux-gnu/libopencv_freetype.so\"\n```\n\n当换了编译链后也要修改到其他路径下的链接库：\n\n```\n        list(APPEND ADD_INCLUDE \"lib/arch/axpi/joint\"\n                                \"/opt/include\"\n                                \"/usr//local/include/opencv4\"\n        )\n        \"/lib/arm-linux-gnueabihf/libm.so\"\n        \"/lib/arm-linux-gnueabihf/libpthread.so\"\n        \"/lib/arm-linux-gnueabihf/libopencv_videoio.so\"\n        \"/lib/arm-linux-gnueabihf/libopencv_highgui.so\"\n        \"/lib/arm-linux-gnueabihf/libopencv_imgcodecs.so\"\n        \"/lib/arm-linux-gnueabihf/libopencv_imgproc.so\"\n        \"/lib/arm-linux-gnueabihf/libopencv_core.so\"\n        \"/lib/arm-linux-gnueabihf/libopencv_freetype.so\"\n```\n\n简而言之，更换了桌面系统和编译链，那源码中对应的一些依赖文件肯定也会发生改变，这需要看所用的 sdk 是如何解决这个问题的，通常来说只需要换交叉编译链和修改链接目录即可。\n\n## 总结\n\n本文介绍了如何在 linux 系统上编译运行 libmaix 项目，以及如何在 linux 系统上交叉编译 libmaix 项目，希望对大家有所帮助，只要掌握了如何管理开发环境和如何编译运行 linux 的程序，接下来就可以基于我们提供的 sdk 开发属于自己的项目了。\n\n在这里「大佬鼠」推荐自己的开发流程和方法，最开始就是先在板子上本地编译测试现有的代码和功能，然后根据 [[maixpy3 axpi] 编辑发布 debian 镜像与在 PC 上交叉编译程序 ](https://www.cnblogs.com/juwan/p/16769237.html) 来安装 docker arm 虚拟机。\n\n接着，将之前烧录到板子里的根文件系统（.img）通过 losetup + mount + chroot 挂载（.img）出来，这时候你就会得到和板子一样的 arm 虚拟机环境，就可以直接本地编译啦！不过，这个方法需要学习 docker 的安装喔，包括后面的模型开发也上会用到 docker 的。\n\n> 如果你不嫌麻烦的话，可以选择配置交叉编译链、板子依赖的头文件、第三方链接库后才能进行程序的编译，但这个 docker arm 虚拟机的方法是最省事的，甚至还可以通过读卡器（或网络）挂载板子里的根文件系统进行编译。\n\n## 参考\n\n* [什么是交叉编译？](https://cn.bing.com/search?q=%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%EF%BC%9F)\n* [超详细解答vscode如何远程连接Linux以及可能会出现的一些问题](https://blog.csdn.net/cxn15335120506/article/details/123238233)\n* [vscode remote](https://code.visualstudio.com/docs/remote/remote-overview)\n* [ssh scp 是什么？](https://cn.bing.com/search?q=ssh+scp+%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F)\n* [libmaix](https://github.com/sipeed/libmaix)\n* [mobaxterm](https://mobaxterm.mobatek.net)\n* [arm-linux-gnueabihf-gcc](https://packages.ubuntu.com/focal/gcc-arm-linux-gnueabihf)"}, "/hardware/zh/maixIII/ax-pi/flash_system.html": {"title": "AXera-Pi 烧录系统", "content": "---\ntitle: AXera-Pi 烧录系统\ntags: AXera-Pi, 烧录系统\nkeywords: AXera-Pi，烧录, 上手\ndesc: AXera-Pi 烧录系统\nupdate:\n  - date: 2022-11-25\n    version: v0.4\n    author: lyx\n    content:\n      - 增加新内容\n  - date: 2022-11-10\n    version: v0.3\n    author: wonder\n    content:\n      - 优化排版\n  - date: 2022-09-29\n    version: v0.2\n    author: wonder\n    content:\n      - 丰富内容\n  - date: 2022-09-13\n    version: v0.1\n    author: lyx\n    content:\n      - 初稿\n---\n\n---\n\n## 系统简介\n\nAXera-Pi 默认板卡没有存储介质，因此需要准备一张系统卡来启动设备。\n\n目前 AXera-Pi 提供的是 Debian11 Bullseye 镜像，[Ubuntu 源自 Debian。 这意味着 Ubuntu 使用与 Debian 相同的 apt 打包系统，并共享来自 Debian 存储库的大量软件包和库，利用 Debian 基础设施作为基础。 大多数“派生” Linux 发行版，它们使用相同的包管理系统并与基于的发行版共享软件包。 ](https://zhuanlan.zhihu.com/p/426219868)。\n\n> [选择 Debian 的理由](https://www.debian.org/intro/why_debian)\n\n官方店铺可以购买预烧录系统镜像的 SD 卡，否则就需要自己进行以下的操作来准备 SD 镜像卡了。\n\n## 如何选择 SD 卡？\n\n除了在官方店铺购买以及预烧录 debian11 的 SD 卡还可以在参考以下表格选择适合需求的 SD 卡。\n为了方便用户选择，我们对部分 SD 卡在 AXera-Pi 板子上进行了读写测速。\n\n![sd](./../assets/sd.jpg)\n\n> 因为部分 SD 卡是后面陆续才进行测试，没有一一单独拍照但可以根据型号辨认。 \n\n| 序号 | 型号                                     | <p style=\"white-space:nowrap\">写入速度（写入量 160MB）</p> | <p style=\"white-space:nowrap\">读取速度（读取量 160MB） </p> |\n| ---- | ---------------------------------------- | ---------------------------------------------------------- | ----------------------------------------------------------- |\n| 1.   | Netac 朗科 A2  P500-超高速-64GB 存储卡   | 2.04697 s, 80.0 MB/s                                       | 1.8759 s, 87.3 MB/s                                         |\n| 2.   | 三星 microSDXC UHS-I 128G 存储卡（蓝卡） | 2.53387 s, 64.7 MB/s                                       | 1.99882 s, 82.0 MB/s                                        |\n| 3.   | EAGET TF卡（T1系列）64G 存储卡           | 6.56955 s, 24.9 MB/s                                       | 7.13792 s, 23.0 MB/s                                        |\n| 4.   | 京东 高性能 microSDXC UHS-I 128G 存储卡  | 2.28133 s, 71.8 MB/s                                       | 1.92001 s, 85.3 MB/s                                        |\n| 5.   | KIOXIA microSDXC UHS-I 32G 存储卡        | 6.71284 s, 24.4 MB/s                                       | 2.36794 s, 69.2 MB/s                                        |\n| 6.   | Netac 朗科 A1 32GB 存储卡                | 4.31411 s, 38.0 MB/s                                       | 2.00759 s, 81.6 MB/s                                        |\n| 7.   | BanQ JOY card 白金 64G 存储卡            | 9.08105 s, 18.0 MB/s                                       | 9.02843 s, 18.1 MB/s                                        |\n| 8.   | 海康威视 HS -TF- P2 64G 存储卡           | 2.28079 s, 71.8 MB/s                                       | 1.87698 s, 87.3 MB/s                                        |\n\n下面为没有拍照但是测速过的卡：\n\n| 序号 | 型号                                                  | <p style=\"white-space:nowrap\">写入速度（写入量 160MB）</p> | <p style=\"white-space:nowrap\">读取速度（读取量 160MB） </p> |\n| ---- | ----------------------------------------------------- | ---------------------------------------------------------- | ----------------------------------------------------------- |\n| 1.   | 雷克沙（Lexar）64GB TF（MicroSD）存储卡 C10 U3 V30 A2 | 2.59644 s, 63.1 MB/s                                       | 1.9106 s, 85.8 MB/s                                         |\n| 2.   | 雷克沙（Lexar）128GB TF（MicroSD）存储卡 C10 U3 V30   | 6.73793 s, 24.3 MB/s                                       | 6.94079 s, 23.6 MB/s                                        |\n\n## 获取镜像\n\n因为镜像文件比较大，因此这里仅提供百度云下载链接。\n\n前往百度云 [点我](https://pan.baidu.com/s/1-UtDoAVP6spwqjHP2wneJA) ，提取码 `sdls` ,下载文件，镜像包与校验文件都已经放在里面了。\n\n![debian](./../assets/debian.jpg)\n\n用两个文件名来举例，其中文件命名规则如下（拖动滚动条来查看全部）：\n\n| 文件名                                 | 提供方 | 文件类型                                          | 适用芯片 | 镜像发行版 | 发布日期 |\n| -------------------------------------- | ------ | ------------------------------------------------- | -------- | ---------- | -------- |\n| sipeed_ax620a_debian11_20221013.zip    | sipeed | 镜像压缩包                                        | ax620a   | debian11   | 20221009 |\n| sipeed_ax620a_debian11_20221013.md5sum |        | <p style=\"white-space:nowrap\">md5sum 校验文件</p> |          |            |          |\n\n如果里面有多个镜像文件，那么建议下载最新的镜像文件。\n\n校验文件需要在 Linux 环境中使用，windows10 及以上的用户可以使用 wsl 当作 Linux 环境。\n\n使用方法为 `md5sum -c md5sum校验文件`。\n\n.. details::点我查看校验 log\n\n    ```bash    \n    root@desktop:$ md5sum -c sipeed_ax620a_debian11_20221009.md5sum\n    sipeed_ax620a_debian11_20221009.zip: OK\n    ```\n\n## 烧录镜像\n\n### 准备工作\n\n**硬件**：\n- 一张容量大于 8G 的 SD 卡：建议购买官方提供的卡，不然可能因为其他的 SD 卡质量差而带来糟糕的体验\n- 一个读卡器：建议使用 USB3.0 接口的读卡器，不然读卡器的 USB 速度过低会导致烧录时间过长\n\n**软件**：\n- <a href=\"https://www.balena.io/etcher/\" alt=\"Etcher\" target=\"_blank\"> Etcher </a>：根据自身电脑下载对应版本的软件即可\n\n### 镜像系统烧录方法\n\n> **20221012** 现已确认 Etcher 软件可直接支持烧录 zip 压缩包里面的 img 镜像，用户不需要解压的步骤直接选择 zip 文件按下面步骤操作即可。\n\n首先打开 [Etcher](https://www.balena.io/etcher/ \"Etcher\") 软件，点击 `Flash from file` ,选中已经下载好的 `zip` 文件镜像，然后点击 `Select target` 选中sd卡，最后点击 `Flash` 进行烧录，等待完成即可。 \n\n<!-- **解压出镜像文件：**\n![extract_image_file](./../../../assets/maixIII/ax-pi/extract_image_file.gif) -->\n\n**烧录镜像文件到 SD 卡：**\n![burn_image_by_etcher](./../../assets/../../assets/maixIII/ax-pi/burn_image_by_etcher.gif)\n\n下图是烧录过程中的一张截图（可参照）：\n![axera_burning_image](./../../../assets/maixIII/ax-pi/axera_burning_image.png)\n\n最终下载结束后的效果会和下图一样，显示 `Flash Complete!`：\n\n![下载结束](./../../maixII/M2A/assets/finish_flash.png)\n\n> **注意**：如果出现烧录失败的情况，请手动格式化一下 SD 卡。\n> Windows 和 MacOS 可以使用 [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)来格式化 SD 卡，Linux 系统可以使用系统的 disk 工具或 [Gparted](https://gparted.org/)来格式化。\n\n## 上手引导指南\n\n为了让小伙伴们轻松、快速、平稳地把产品用起来，我们准备了新手初学者上手引导指南：\n\n### 烧录系统\n\n>**注意**：已购买镜像卡的同学跳过这一步骤，直接把 TF 卡插上即可启动 Linux Debian 系统。\n\n**烧录系统镜像传送门**：[点击前往](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/flash_system.html).\n\n设备默认是没有 Emmc 介质可以启动的，需要从 TF 卡启动 Linux 系统，请从上文「烧录系统镜像」了解。\n通过跨平台烧录工具 [Etcher](https://etcherpc.com/) 烧录镜像成功后，进行下一步接线准备启动板子。\n\n![axpi-flash](./../assets/axpi-flash.png)\n\n### 启动系统\n\n**如何正确接入屏幕及摄像头**：[点击查看](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/basic_usage.html#%E6%8E%A5%E7%BA%BF%E7%A4%BA%E4%BE%8B).\n\n当完成上一步骤后我们需要给 AXera-Pi 进行正确的接线并上电启动。\n把镜像卡插入卡槽并接上 `USB-UART` 和 `USB-OTG` 口，再把摄像头与屏幕后接好给设备通电就行。\n\n![axpi-connect](./../assets/axpi-connect.png)\n\n>在 **20221013** 后设备通电开机会从耳机播放音乐和点亮出厂的 5 寸屏幕，并在串口输出如下的 debian11 系统启动日志（截取部分日志如下）.[有些同学会遇到 Ubuntu22.04 CH340系列串口驱动（没有ttyUSB）问题，点此查看解决方案](https://blog.csdn.net/qq_27865227/article/details/125538516)。\n\n.. details:: 点击查看 debian11 系统启动日志  \n\n    ![start](./../assets/start.jpg)\n\n    ```bash\n    Vddr init success!\n    The system boot form EMMC\n    enter boot normal mode\n\n    U-Boot 2020.04 (Jun 16 2022 - 00:16:34 +0800)\n\n    Model: AXERA AX620_demo Board\n    DRAM:  1 GiB\n    NAND:  unknown raw ID 77ee0178\n    uclass_get_device: Invalid bus 0 (err=-524)\n    0 MiB\n    initr_pinmux: delay pinmux_init for env board id\n    MMC:   enter sdhci_cdns_get_cd call mmc_getcd\n    enter sdhci_cdns_get_cd call mmc_getcd\n    mmc@10000000: 0, mmc@4950000: 1\n    Loading Environment from MMC... OK\n    In:    serial\n    Out:   serial\n    Err:   serial\n    MMC: no card present\n    sd card is not present\n    enter normal boot mode\n    Net:\n    reset EMAC0: ethernet@0x4970000 ...\n    Warning: ethernet@0x4970000 (eth0) using random MAC address - 6a:e4:fd:58:97:ea\n    eth0: ethernet@0x4970000\n    Hit any key to stop autoboot:  0\n    reading DTB and BOOT image ...\n    reading bootimg header...\n    MAGIC:       AXERA!\n    img size:    4841536\n    kernel_size: 4841472\n    kernel_addr: 64\n    id:bc 19 bb a7 2d 27 74 de 7c 91 4b 70 ea c9 ab 96 50 61 bd e0 2b 02 8b e5 c8 ee 22 ce df b1 cf ea\n    load kernel image addr = 0x40008000,load dtb image addr = 0x48008000\n    boot cmd is :bootm 0x40008000 - 0x48008000\n    ## Booting kernel from Legacy Image at 40008000 ...\n      Image Name:   Linux-4.19.125\n      Image Type:   ARM Linux Kernel Image (uncompressed)\n      Data Size:    4839952 Bytes = 4.6 MiB\n      Load Address: 40008000\n      Entry Point:  40008000\n      Verifying Checksum ... OK\n    ## Flattened Device Tree blob at 48008000\n      Booting using the fdt blob at 0x48008000\n      Loading Kernel Image\n      Using Device Tree in place at 48008000, end 480103d6\n\n    Starting kernel ...\n\n\n    Welcome to Debian GNU/Linux 11 (bullseye)!\n\n    [  OK  ] Created slice system-getty.slice.\n    [  OK  ] Created slice system-modprobe.slice.\n    [  OK  ] Created slice system-serial\\x2dgetty.slice.\n    [  OK  ] Created slice User and Session Slice.\n    [  OK  ] Started Dispatch Password …ts to Console Directory Watch.\n    [  OK  ] Started Forward Password R…uests to Wall Directory Watch.\n    [  OK  ] Reached target Local Encrypted Volumes.\n    [  OK  ] Reached target Network is Online.\n    ......\n    ```\n\n### 登录到板子里\n\n**系统使用手册传送门**：[点击前往](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/basic_usage.html#%E7%B3%BB%E7%BB%9F%E7%99%BB%E5%BD%95).\n\n当 **AXera-Pi** 正常开机成功后，这时候我们把板子当做一台 Linux 服务器来对待。还需要通过**「系统使用手册」**来快速帮助用户了解如何登录到设备里的 Linux 系统。同时它还会告诉你，板上所有验证过的系统调频、外设、驱动、应用等资源的用法，像一些 Linux 操作基础、如何控制 I2C / UART / SPI 这些硬件设备的操作，或是直接运行板子内置的 AI 开箱应用模型等内容。\n\n![axpi-login](./../assets/axpi-login.png)\n\n.. details::这里以 USB-OTG 口的 usb0 网卡（192.168.233.1）作为 ssh 登录的 ip 进入板子为例。\n\n    ```bash\n    juwan@juwan-n85-dls:~/sipeed_wiki$ sshpass -p root ssh root@192.168.233.1\n    Linux AXERA 4.19.125 #53 SMP PREEMPT Tue Sep 13 13:16:27 HKT 2022 armv7l\n\n    The programs included with the Debian GNU/Linux system are free software;\n    the exact distribution terms for each program are described in the\n    individual files in /usr/share/doc/*/copyright.\n\n    Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\n    permitted by applicable law.\n    Last login: Wed Oct 12 16:43:43 2022 from 192.168.233.10\n    root@AXERA:~# screenfetch\n            _,met$$$$$gg.           root@AXERA\n          ,g$$$$$$$$$$$$$$$P.        OS: Debian\n        ,g$$P\"\"       \"\"\"Y$$.\".      Kernel: armv7l Linux 4.19.125\n      ,$$P'              `$$$.      Uptime: 2d 3h 5m\n      ',$$P       ,ggs.     `$$b:    Packages: 785\n      `d$$'     ,$P\"'   .    $$$     Shell: bash 5.1.4\n      $$P      d$'     ,    $$P     Disk: 2.6G / 3.6G (77%)\n      $$:      $$.   -    ,d$$'     CPU: ARMv7 rev 5 (v7l) @ 4x 1.248GHz\n      $$\\;      Y$b._   _,d$P'      RAM: 88MiB / 744MiB\n      Y$$.    `.`\"Y$$$$P\"'\n      `$$b      \"-.__\n        `Y$$\n        `Y$$.\n          `$$b.\n            `Y$$b.\n                `\"Y$b._\n                    `\"\"\"\"\n\n    root@AXERA:~# ax_clk\n    AX620A:\n    DDR:            3733 MHz\n    CPU:            800 MHz\n    BUS of VPU:     624 MHz\n    BUS of NPU:     624 MHz\n    BUS of ISP:     624 MHz\n    BUS of CPU:     624 MHz\n    NPU OTHER:      800 MHz\n    NPU GLB:        24 MHz\n    NPU FAB:        800 MHz\n    NPU CORE1:      800 MHz\n    NPU CORE0:      800 MHz\n    ISP:            533 MHz\n    MM:             594 MHz\n    VPU:            624 MHz\n    root@AXERA:~#\n    ```\n\n我们可以知道板子的基础信息，目前默认是用 800Mhz 来跑，而且内存分配较保守能留给用户的空间内存不到 1GB，但不用担心，板子贴得内存最小都得是 2G 的，所以之后会通过更新内核开放更多内存给用户空间。\n\n### 编译代码运行\n\n能走到这里就说明板子已经用起来了，那就来开发吧！在这之前需要**「准备开发环境」**了解如何拷贝文件到板子里，如何搭建本地编译或交叉编译，然后通过**「SDK 开发指南」**学习到如何基于现有的代码进行开发。\n\n- [准备开发环境](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/dev_prepare.html)\n\n快速了解现在提供哪些开源代码仓库以及用法，这些开源仓库会持续更新和开放的。\n\n- [SDK 开发指南](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/sdk_usage.html)\n\n![axpi_sdk.jpg](./../assets/axpi_sdk.jpg)\n\n### 训练模型部署\n\n初学者训练模型可以从 [AI 开发指南](https://wiki.sipeed.com/ai/zh/deploy/ax-pi.html) 学习如何训练一个最简单的模型到量化转换部署测试。\n\n![axpi-ai](./../assets/axpi-ai.png)\n\n更专业更深入的调优需要了解 [Pulsar](https://pulsar-docs.readthedocs.io/) ，这是由**「爱芯元智」**自主研发的 all-in-one 神经网络编译器，充分发挥片上异构计算单元(CPU+NPU)算力， Pulsar 工具链核心功能是将 .onnx 模型编译成芯片能解析并运行的 （.joint） 模型。\n\n目前有以下几种部署方式（Pipeline）推荐：\n\n- **libmaix**：并不在意程序的性能和效率，用最快的方式把摄像头图像输入 AI 模型后输出识别结果绘制到显示到屏幕上验证一下识别效果。\n\n- **ax-pipeline**：没有多余的封装，直接操作芯片核心资源 vin \\ ivps \\ npu \\ vo 等硬解设备进行部署开发，可以使模型部署达到一个非常好的效果。\n\n- **IPCDemo**：以效果最好、性能最好、占用最少、稳定可靠、功能最多、确保最终能部署到用户的现场不出问题的框架代码来开发 AI 程序。\n\n#### libmaix 部署\n\n在板子上编译这个示例代码 [axpi_classification_cam](https://github.com/sipeed/libmaix/tree/release/examples/axpi_classification_cam)，然后放入模型运行后即可看到效果，截止 **20221013** 前代码还没有优化所以性能不高只够看个结果，想要效果和性能可以看 **ax-pipeline** 部署。\n\n<p align=\"center\">\n  <img src=\"./../assets/mobilenet_axpi.jpg\" alt=\"img\" style=\"zoom: 100%;\" />\n</p>\n\n即可验证效果：[详细可从 maixhub 上获取](https://maixhub.com/model/zoo/89)。\n\n#### ax-pipeline 部署\n\n以上的部署方式都出于快速验证或应用落地的角度进行的，还有一套基于 **bsp sdk** 的 [ax-pipeline](https://github.com/AXERA-TECH/ax-pipeline) 部署方式，它面向既了解 AI 又知道芯片底层 Linux 开发方法的同学，目前内置应用中提供了板子的 **rtsp** 和屏幕双推流 **yolov5** 实时识别以及新增 **yolov5s-seg** 实例分割的程序就是来自于它。\n\n![rtsp-display](./../assets/rtsp-display.jpg)\n\n#### IPCDemo 部署\n\n这是一个典型的 IPC 演示程序，源码在这里 [axpi_bsp_sdk IPCDemo](https://github.com/sipeed/axpi_bsp_sdk/tree/main/app/IPCDemo) ，其中 IPCDemo 的功能模块有：\n\n- ISP：负责从 Sensor 获取图像 RAW 数据并转为 YUV，最终分 3 路通道输出以上信息。\n- IVPS：图像视频处理模块。实现对视频图形进行一分多、Resize、Crop、旋转等功能。\n- VENC / JENC：视频/JPEG 编码输出。\n- Detect：支持人脸或结构化检测。\n- Web 显示：实现 H264 流的 Web 传输和提供 Web 方式查看实时视频。\n- RTSP 推流：实现 H264 流的 RTSP 封装以及传输。\n- 录像 TF 卡存储：封装 H264 流为 MP4 格式文件并保存至 TF 卡或者 FLASH 空间。\n\n以下视频中的 IPCDemo 程序使用方法请点击右侧[内置开箱应用](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/basic_usage.html#%E5%86%85%E7%BD%AE%E5%BC%80%E7%AE%B1%E5%BA%94%E7%94%A8)查看。\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=260625114&bvid=BV1me411T7g8&cid=837160730&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"max-width:640px; max-height:480px;\"> </iframe>\n</p>"}, "/hardware/zh/maixIII/ax-pi/sdk_usage.html": {"title": "Maix-III 系列 AXera-Pi 开发板 SDK 使用介绍", "content": "---\ntitle: Maix-III 系列 AXera-Pi 开发板 SDK 使用介绍\n---\n\n## 获取 SDK 源码\n\n上一篇介绍了基础的开发环境搭建和使用方法，你应该了解什么是本地编译和交叉编译，这一篇介绍如何使用这些 sdk 源码开发程序。\n\n- [libmaix](https://github.com/sipeed/libmaix)\n\n由 sipeed 提供在 linux 平台统一的嵌入式开发环境，主要有摄像头、屏幕、视觉、图像处理、NPU pipiline 相关的实机部署例程，适合刚入门嵌入式 linux 开发的同学使用。\n\n- [ax-sample](https://github.com/AXERA-TECH/ax-samples)\n\n由爱芯提供 AI 模型的开发与评估验证，提供给有经验的 AI 开发者使用，不涉及任何硬件外设有关的内容。\n\n- [axpi_bsp_sdk](https://github.com/sipeed/axpi_bsp_sdk)\n\n芯片商用时所用的 bsp 开发包，这里主要提供的是芯片的原始开发资料，如 uboot 、 linux 、 msp 、msp 等工程代码，这个部分是逐步开源的，你可以从这里得到商业评估用的代码，例如 ipcdemo 这样的程序，但这些代码会很复杂且高耦合，适合有经验的同行出于商业落地的目的使用。\n\n- [ax-pipeline](https://github.com/AXERA-TECH/ax-pipeline)\n\n基于 axpi_bsp_sdk 制作的 AI 部署高性能仓库，在这里主要用于该项目基于 AXera-Pi 展示 ISP、图像处理、NPU、编码、显示 等功能模块软件调用方法，方便社区开发者进行快速评估和二次开发自己的多媒体应用。\n\n### libmaix\n\n这是一个适用于 sipeed 所用 linux 芯片开发的 C/C++ 基础开发框架，使用 cmake 构建，提供了许多开箱参考的案例，还有一些第三方库代码的链接，如 opencv openmv 这些视觉库的链接。\n\nSDK 源码在 [libmaix](https://github.com/sipeed/libmaix)， 需要使用 git 命令下载：\n\n```bash\ngit clone https://github.com/sipeed/libmaix.git --recursive\n```\n>! 注意这里`--recursive` 参数是必须的，用来下载仓库里面的子模块，如果没有这个参数，代码会不完整，导致编译出错\n\n> 中国国内可能下载速度较慢，可以多取消重试几次，可能会遇到速度快的节点，当然最好还是通过设置代理来加速下载。\n\n另外， AI 模型及例程在 [MaixHub 模型库](https://maixhub.com/model/zoo) 可以找到， 以及 [AXERA-TECH/ax-samples](https://github.com/AXERA-TECH/ax-samples) 仓库。\n\n## 编译 SDK 源码\n\n回顾一下前文的内容，编译有两种方式：\n\n* 直接在开发板上编译：编译速度较慢，但是不需要额外的环境配置。\n* 在 PC 上编译，然后拷贝可执行文件到开发板，也就是交叉编译： 编译速度更快，但是需要额外的环境配置。\n\n### [libmaix](https://github.com/sipeed/libmaix)\n\n> /home/ 目录已预置，可以 git pull 联网拉取更新。\n\n对于 `libmaix`， 按照其`README.md` 文件描述的方法编译即可， 不过需要在`menuconfig`命令中选择 `AXera-Pi` 作为编译目标。\n\n这里简要介绍一下编译过程（libmaix 目前还未稳定，未来可能会有大的更新），实际以[libmaix 仓库](https://github.com/sipeed/libmaix)代码和说明为准。\n\n* 先安装依赖\n```\napt install build-essential cmake python3 sshpass git\n```\n> sshpass 也可以不安装， build-essential, cmake, git, python3 必须安装\n\n* 克隆仓库到本地或者开发板\n```\ngit clone https://github.com/sipeed/libmaix --recursive\n```\n>! 注意 `--recursive` 参数是必须的，用以克隆子模块，否则会缺代码\n\n这里以在开发板上编译为例：\n\n```bash\ncd /home/libmaix # git clone https://github.com/sipeed/libmaix --recursive\ncd examples/axpi\npython3 project.py distclean\n# python3 project.py menuconfig # 可以配置相关参数\npython3 project.py build        # 如果增加文件了，需要 python3 project.py rebuild 命令\n./dist/start_app.sh             # 运行示例程序\n```\n\n### [ax-samples](https://github.com/AXERA-TECH/ax-samples)\n\n> /home/ 目录已预置，可以 git pull 联网拉取更新。\n\n[ax-samples](https://github.com/AXERA-TECH/ax-samples) 是爱芯官方提供的例程，包含了一些 AI 模型和运行代码，编译完能直接在开发板上运行，只不过输入是图片，不是摄像头。\n进入开发板终端，执行以下代码：\n\n```bash\ncd /home/ax-samples # git clone https://github.com/AXERA-TECH/ax-samples.git\nmkdir build\ncd build\ncmake ..\nmake install\n```\n\n然后就能在`ax-samples/build/install/bin/`目录下找到编译好的可执行文件。\n\n### [axpi_bsp_sdk](https://github.com/sipeed/axpi_bsp_sdk)\n\n回到芯片原厂开发的环境，这需要有经验的嵌入式 Linux 开发者来操作，直接看 readme 进行操作，文档在 docs 目录下。\n\n#### What is this?\n\nthis is a ax620 linux bsp sdk form AX620_R1.22.2801_Sipeed. currently it is application layer open source.\n\n```bash\njuwan@juwan-n85-dls:~/GIT_AX620_SDK_V0.31.0_P23/sipeed/axpi_bsp_sdk$ tree -L 1\n.\n├── app\n├── build\n├── msp\n├── readme.md\n├── rootfs\n└── third-party\n\n5 directories, 1 file\n```\n\n#### ready arm gcc\n\n```bash\ngit clone https://github.com/sipeed/axpi_bsp_sdk.git\n\ncd axpi_bsp_sdk\n\nwget http://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf.tar.xz\n\nsudo tar -xvf gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf.tar.xz -C /opt/\n\n```\n\n#### how to compile\n\n- bsp msp sample\n\n```bash\n\ncd msp/sample/\n\nexport PATH=\"/opt/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/:$PATH\" && make p=AX620_demo all install\n\n```\n\n- third-party libs\n\n```bash\n\ncd third-party\n\nexport PATH=\"/opt/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/:$PATH\" && make p=AX620_demo all install\n\n```\n\n- bsp app ipcdemo\n\n```bash\n\ncd app/\n\nexport PATH=\"/opt/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabihf/bin/:$PATH\" && make p=AX620_demo all install\n\n```\n\n- bsp msp component lib, such as `cd app/msp/component/common && make xxxx`.\n\n```\njuwan@juwan-n85-dls:~/GIT_AX620_SDK_V0.31.0_P23/sipeed/axpi_bsp_sdk/msp/component$ tree -L 1\n.\n├── axsyslog\n├── common\n└── thermal\n\n4 directories, 0 files\n```\n\n#### run your program\n\n- on pc\n\n```\nsshpass -p root scp ./vo_fb/sample_vo_fb root@192.168.233.1:/opt/bin/sample_vo_fb\n```\n\n- on board\n\n```\n\nchmod 777 /opt/bin/sample_vo_fb\n\n/opt/bin/sample_vo_fb -v dsi0@480x854@60 -m 0 &\n\nfbv /home/examples/480x360.jpg\n\nkillall sample_vo_fb\n\n```\n\n## 组合 SDK 和 AI 模型例程\n\n比如我们要跑一个视觉 AI 模型，需要用到摄像头，屏幕，还有 AI 模型，你需要借助以下仓库代码完成这个目标。\n\n### 借助 libmaix 实现（开发难度最小，适合验证）\n\n基于 libmaix 的 axpi 项目进行开源快速验证效果，代码简单易懂，基于在线服务完成模型部署，只用于新手上路，与 ax-sample 的模型一起被支持。\n\n- [axpi](https://github.com/sipeed/libmaix/tree/release/examples/axpi)\n- [axpi_classification_cam](https://github.com/sipeed/libmaix/tree/release/examples/axpi_classification_cam)\n- [axpi_yolov5_cam](https://github.com/sipeed/libmaix/tree/release/examples/axpi_yolov5_cam)\n\n> 20221113 目前仓库只保证用户初次上手时能够不报错的安全调用 AI 模型，不代表芯片的最好效果。\n\n### 借助 ax-pipeline 实现（开发难度适中，适合优化）\n\n到了这里要有基本的芯片 bsp sdk 开发的基础（axpi_bsp_sdk），这部分会略显专业一些，这个仓库目前追求最高性能的效果。\n\n- [准备编译环境](https://github.com/AXERA-TECH/ax-pipeline/blob/main/docs/compile.md)\n- [如何更换自己训练的 yolov5 模型？](https://github.com/AXERA-TECH/ax-pipeline/blob/main/docs/how_to_deploy_custom_yolov5_model.md)\n- [如何部署自己的其他模型](https://github.com/AXERA-TECH/ax-pipeline/blob/main/docs/how_to_deploy_custom_model.md)\n\n### 借助 ipcdemo 实现（开发难度最大，适合落地）\n\n基于 axpi_bsp_sdk 的 ipcdemo 商用视频推流应用，由于源码过于复杂，需要有上述基础才能介入。\n\n- [axpi_bsp_sdk/app/IPCDemo](https://github.com/sipeed/axpi_bsp_sdk/tree/main/app/IPCDemo)"}, "/hardware/zh/maixIII/ax-pi/basic_usage.html": {"title": "Maix-III AXera-Pi 系统基础使用", "content": "---\ntitle: Maix-III AXera-Pi 系统基础使用\n\n---\n\n基于上文的烧录系统后，本文介绍使用 Maix-III AXera-Pi 开发板的 Linux debian11 系统基础使用方法。\n\n## 准备工作\n\n开始进行系统的调试使用之前，请先准备好所需的硬件设备，然后参考下方的接线示例正确接好后上电。\n\n1. Maix-III AXera-Pi 开发板\n2. 能出 1A 的 USB3.0 口（或是带供电的 usb hub 拓展）\n3. 一张大于 16G 烧录 debian11 的镜像系统卡\n4. GC4653 Sensor 普通版/OS04a10 Sensor 夜视版（自行按需求购入）\n5. 5 寸 MIPI屏（自行按需求购入）\n\n![axpi-config](./../assets/axpi-config.jpg)\n\n**供电要求**：由于板子的功耗要求低，使用 usb3.0 1A 即可启动 linux 系统。\n\n### 接线示例\n\n>注意：摄像头接线一定要十分注意！！！接反可能会烧坏板子或者是摄像头！！\n\n**接线**：将屏幕（排线反面朝上）接入底板背面接口，组装好后翻正板子在右侧卡槽处插入镜像卡，再接入（认准蓝色线序接入）摄像头并揭开保护盖，可参考示意图进行接线。\n\n<html>\n  <img src=\"./../assets/mipi.jpg\" width=48%>\n  <img src=\"./../assets/sensor.jpg\" width=48%>\n</html>\n\n## 系统登录\n\n### 登录工具\n\n.. details::点我查看 MobaXterm 介绍\n\n    MobaXterm 是在 Windows 下使用的全能终端管理软件，而 Linux 系统可以使用 ssh 远程被操作，使用 MobaXterm 进行 ssh 登陆板子直接编辑板内的代码或执行命令，也能方便的拖拽文件上传或下载到电脑里，类似的工具还有 vscode remote 远程登录 linux 服务器。\n\n    ![mobaxterm_ssh](./../assets/ssh.jpg)\n\n下载链接：[点击跳转](mobaxterm.mobatek.net/download) 分别付费与免费双版本，下载免费版本即可。\n使用教程：[如何使用 MobaXterm](https://wiki.sipeed.com/hardware/zh/maixII/M2/tools/mobaxterm.html?highlight=ssh)\n\n.. details::点我查看 vscode remote 介绍\n\n    vscode remote 是 vscode 的一个插件，可以直接连接到远程的 linux 服务器，然后在本地编辑代码，同步到远程服务器上编译运行，这里以一台 Windows 10 的桌面计算机系统为例，只要能安装 vscode 编辑器软件计算机都行。\n\n    ![vscode](./../assets/vscode.jpg)\n\n下载连接：[点击跳转](https://code.visualstudio.com/)\n连接教程：[如何使用 vscode remote 连接板子](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/dev_prepare.html?highlight=ssh#vscode-remote)\n\n### 登录方式\n\nMaix-III AXera-Pi 开发板的 Linux debian11 系统默认使用 root 用户登录。\n用户名为 `root`，密码为 `root`，目前板子接入电脑端上电启动后支持以下登录 Linux 系统方式。\n\n#### 有线 串口 serial 登陆\n\n> 使用串口 serial 登陆前需安装 tty 转 USB 串口驱动\n\n**Linux**：系统本身自带无需再装驱动，使用 `ls /dev/ttyUSB*` 即可看到设备号。\n\n**Windows**：直接[点击下载 CH340 驱动](https://api.dl.sipeed.com/fileList/MAIX/tools/ch340_ch341_driver/CH341SER.EXE)安装，安装后可在`设备管理器`查看串口设备。\n\n.. details::点我查看 CH340 驱动安装\n    先打开设备管理器查看是否有 **CH340** 驱动，如无驱动的话请点击上方链接进行下载。\n    ![usb-serial](./../assets/usb-serial.jpg)\n    下载完成后，右键点击文件，选择**以管理员身份运行(A)**即会自动安装。\n    ![install-serial](../assets/install-serial.jpg)\n    安装完成，可在设备管理器端口处查看设备。\n    \n>[有些同学会遇到 Ubuntu22.04 CH340系列串口驱动（没有ttyUSB）问题，点此查看解决方案。](https://blog.csdn.net/qq_27865227/article/details/125538516)\n\n.. details::点我查看 usb uart 接口示意图\n\n    ![uart](./../assets/uart.jpg)\n\n使用 usb 3.0 线连接板子上的 usb uart 接入电脑端，使用前请安装上文的驱动，再使用 MobaXterm 即可连接，默认串口配置为 115200、8N1（波特率115200，8位数据，无奇偶校验，1位停止位）。\n\n**serial 登陆教程**：[点击查看](https://wiki.sipeed.com/hardware/zh/maixII/M2/tools/mobaxterm.html?highlight=ssh#%E8%BF%9E%E6%8E%A5-%E4%B8%B2%E5%8F%A3%28Serial%29)\n成功连接后会打印大量调试信息，会弹出登陆账号信息，输入用户名及密码即可登陆。\n\n![serial](./../assets/serial.jpg)\n\n> 串口通常只提供给专业的驱动开发工程师调试用，会打印大量的调试信息，如感到不适请使用 **ssh** 登陆。\n\n#### 基于 ip + ssh 登录\n\n> 登录前需安装 **rndis usb** 网卡驱动\n\n一般情况下 rndis usb 网卡驱动在 Linux 下可不用安装，在 Windows 下需要按下图手动安装系统自带驱动，而 macos 需要编译安装驱动（horndis），Windows 还需要配置一下网络优先级，勾选微软 rndis 驱动后设置网络跃点数调整优先级。\n\n**驱动安装**：[查看 Ghost 系列 USB 网卡（RNDIS) 使用教程](https://wiki.sipeed.com/news/others/usb_rndis/usb_rndis.html)\n\n**Windows 配置网络优先级**：[设置网络跃点数调整优先级](https://jingyan.baidu.com/article/358570f6bc5cfdce4724fca2.html)\n\n\n.. details::点我查看 Win10 驱动安装过程\n\n    打开设备管理器找到其他设备，选中 rndis 选择更新驱动程序，在如何搜索设备软件窗口中，选择**浏览计算机查找驱动程序软件（R）**。\n\n    ![rndis_1](./../assets/rndis_1.jpg)\n    再选择**从计算机的设备驱动程序列表中选择（L）**在硬件设备列表中往下拉，找到**网络适配器**，选中**下一步**。\n\n    ![rndis_2](./../assets/rndis_2.jpg)\n    在厂商列表中选择 **Microsoft**，右侧列表中选择 **USB RNDIS Adapter**。\n\n    ![rndis_3](./../assets/rndis_3.jpg)\n\n.. details::点我查看 usb otg 接口示意图\n\n    ![otg](./../assets/otg.jpg)\n\n系统默认开启了 usb rndis 虚拟以太网，可以透过有线 usb otg 口连接 usb0 网卡的 ip 192.168.233.1 后使用 ssh 登陆到 linux 系统。\n想要无线连接 ssh 需要先登陆板子通过 `ifconfig` 得到板子 IP 后即可连接，下图的 IP 地址都能登陆板子。\n\n![ifconfig](./../assets/ifconfig.jpg)\n\n**ssh 连接教程**：[点击跳转](https://wiki.sipeed.com/hardware/zh/maixII/M2/tools/mobaxterm.html?highlight=ssh#%E8%BF%9E%E6%8E%A5-SSH)\n按教程示例新建 ssh 会话，双击会话后会有提醒输入账号及密码，输入后按回车即可连接。\n\n![ssh](./../assets/ssh.jpg)\n\n### 登录后\n\n登录后，可以使用 `ls` 命令查看当前目录下的文件，使用 `cd` 命令切换目录，使用 `pwd` 命令查看当前目录。\n\n## 网络配置\n\n### 网络操作基础\n\n- **使用 ping baidu.com 测试网络**\n\n![baidu](./../assets/baidu.jpg)\n\n- **使用 ifconfig -a 查看所有网卡情况**\n\nMaix-III AXera-Pi 开发板的 Linux 系统默认使用 DHCP 协议获取 IP 地址，可以使用命令行 `ifconfig -a` 查看当前网络配置，板子根据下述会配置四种网卡类型。\n\n\n```bash\nroot@AXERA:~# cat /etc/network/interfaces\n# interfaces(5) file used by ifup(8) and ifdown(8)\n# Include files from /etc/network/interfaces.d:\nsource /etc/network/interfaces.d/*\n\nauto lo\niface lo inet loopback\n\n# auto eth0\nallow-hotplug eth0\niface eth0 inet dhcp\n\n# auto usb0\nallow-hotplug usb0\niface usb0 inet static\naddress 192.168.233.1\nnetmask 255.255.255.0\n\n# allow-hotplug wlan0\n# wpa-ssid \"dalaoshu\"\n# wpa-psk \"junhuanchen\"\nauto wlan0\niface wlan0 inet manual\nwpa-conf /boot/wpa_supplicant.conf\niface wlan0 inet dhcp\n```\n\n可以使用命令行 `ifconfig -a` 查看所有网卡信息。\n\n```bash\nroot@AXERA:~# ifconfig -a\neth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.0.77  netmask 255.255.255.0  broadcast 192.168.0.255\n        ether 1e:09:dc:e9:1c:29  txqueuelen 1000  (Ethernet)\n        RX packets 301  bytes 41433 (40.4 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 31  bytes 2970 (2.9 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n        device interrupt 56\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 16  bytes 1064 (1.0 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 16  bytes 1064 (1.0 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nusb0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.233.1  netmask 255.255.255.0  broadcast 192.168.233.255\n        ether 02:da:9b:e4:a8:7f  txqueuelen 1000  (Ethernet)\n        RX packets 121  bytes 15220 (14.8 KiB)\n        RX errors 0  dropped 15  overruns 0  frame 0\n        TX packets 35  bytes 7258 (7.0 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nwlan0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.0.112  netmask 255.255.255.0  broadcast 192.168.0.255\n        ether 0c:cf:89:32:c5:c0  txqueuelen 1000  (Ethernet)\n        RX packets 950  bytes 154305 (150.6 KiB)\n        RX errors 0  dropped 950  overruns 0  frame 0\n        TX packets 5  bytes 1398 (1.3 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n```\n\n- **使用 dhclient 触发 DHCP 获取 ip**\n\n>这里以有线网卡（eth0）为例，decliient 还支持无线 WIFI（wlan0）.\n使用上方 `ifconfig -a` 命令后，如果 eth0 的地址获取失败可使用 `dhclient eth0` 触发 DHCP 获取 IP。\n \n```bash\nroot@AXERA:~# dhclient eth0 &\n[1]+  Done                    dhclient eth0\nroot@AXERA:~# ifconfig eth0\nwlan0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.0.136  netmask 255.255.255.0  broadcast 192.168.0.255\n        ether 0c:cf:89:32:c5:dc  txqueuelen 1000  (Ethernet)\n        RX packets 1284  bytes 157505 (153.8 KiB)\n        RX errors 0  dropped 1274  overruns 0  frame 0\n        TX packets 205  bytes 20798 (20.3 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n```\n\n### USB RNDIS（usb0）配置方法\n\n可使用静态 IP 地址 `192.168.233.1` 这里已配置好 dhcp 服务了，从而避免用户需手动设置 IP 地址的操作。\n\n> 使用 usb0 前需要安装 rndis 驱动，可点击[驱动安装过程](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/basic_usage.html#%E5%9F%BA%E4%BA%8E-ip-%2B-ssh-%E7%99%BB%E5%BD%95)前往安装。\n\n在 Windows 系统下如果遇到多个网卡时，发现 USB 网卡优于局域网导致内网网站访问很慢甚至失败，此时就需要通过 Win10 设置跃点数来调整网络优先级的连接顺序，去修改优先级改善访问慢的状态，数值越大优先级越低（比如设置 1000），从而把 USB 网卡优先级调至最低，可点击前往[配置网络优先级](https://jingyan.baidu.com/article/358570f6bc5cfdce4724fca2.html).\n\n- **查看 usb0 网卡是否存在**\n\n可通过 `ifconfig usb0` 命令查看 usb0 网卡或尝试 `ping 192.168.233.1` 是否能通。\n\n```bash\nroot@AXERA:~# ifconfig usb0\nusb0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 192.168.233.1  netmask 255.255.255.0  broadcast 192.168.233.255\n        ether 16:37:cd:c6:f2:ae  txqueuelen 1000  (Ethernet)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n```\n\n- **在 ping 通后 192.168.233.1 即可通过 usb 线登陆到板子**\n\nUSB 网卡会自动 DHCP 配置，直接连接 192.168.233.1 即可，连接方式可参考示意图。\n\n![ssh-usb](./../assets/ssh-usb.jpg)\n\n### 有线以太网（eth0）配置方法\n\n- **查看 eth0 网卡是否存在**\n  \n可使用 `dhclient eth0 &` 手动启动 DHCP 客户端获取 IP 地址，得到 ip 后使用 `ifconfig eth0` 命令查看当前网络配置。默认支持千兆网络，只需要开机前将网线插上去，在启动过程中就会自动配置并联网，可以通过 `apt update` 测试软件源更新。\n\n```bash\nroot@AXERA:~# ifconfig\neth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 192.168.0.77  netmask 255.255.255.0  broadcast 192.168.0.255\n        ether 1e:09:dc:e9:1c:29  txqueuelen 1000  (Ethernet)\n        RX packets 301  bytes 41433 (40.4 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 31  bytes 2970 (2.9 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n        device interrupt 56\n```\n\n- **关于 eth0 地址相同的问题**\n\n执行下述代码就会从 `/proc/ax_proc/uid` 读取 chip_id 写到 `/etc/network/interfaces` 的 eth0 配置里，该命令多次执行不受影响。\n\n```\npython3 -c \"import os, binascii; os.system('sed -i \\'/iface eth0 inet dhcp/ahwaddress ether {}\\' /etc/network/interfaces'.format(binascii.hexlify(bytes.fromhex(open('/proc/ax_proc/uid').read().split('0x')[1][:-5]),':').decode('iso8859-1'))) if os.system('grep \\'hwaddress ether\\' /etc/network/interfaces -q') != 0 else exit();\"\n```\n\n- **一些问题排除方法，如没有 ip 如何配置**\n\n登录后无法获取以太网地址的话，可用上文命令启动 DHCP 客户端获取 IP 地址。\n或者是使用 `ifdown eth0` 关闭网卡后再使用 `ifup eth0 --force` 启动手动配置 IP。\n\n.. details::点我查看配置示例\n    ![eth0-config](./../assets/eth0-config.jpg)\n\n\n### 无线 WIFI （wlan0）配置方法\n\n- **查看 WIFI 网卡是否存在**\n\n**wlan0**：无线网卡，使用 DHCP 协议获取 IP 地址，可使用命令 `ifconfig wlan0` 查看当前网络配置。 \n\n- **如何修改连接的 WIFI 账号密码（会开机自动联网）**\n\n默认 WIFI 账号密码配置存放在 `/boot/wpa_supplicant.conf` 里，测试过并支持 Android 手机开放的 WPA-PSK2 热点，配置修改后会在重启后生效。\n\n```bash\nroot@AXERA:~# cat /boot/wpa_supplicant.conf\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\n\nnetwork={\n    ssid=\"Sipeed_Guest\"\n    key_mgmt=WPA-PSK\n    psk=\"qwert123\"\n}\n```\n\n- **改用 mntui-connect 可视化联网管理** \n\n系统已预置 NetworkManager 在 `nano /etc/NetworkManager/NetworkManager.conf` 里的 `managed=false` 修改成 `managed=true` 和注释掉 `/etc/network/interfaces` 里的有关于 `wlan0` 的配置（可以打开 `allow-hotplug wlan0` ）后「拔线断电重启」即可使用 `nmtui-connect` 进行联网，但原来的 `wpa_supplicant.conf` 里的配置会失效。\n\n```\nroot@AXERA:~# cat /etc/network/interfaces\n# interfaces(5) file used by ifup(8) and ifdown(8)\n# Include files from /etc/network/interfaces.d:\nsource /etc/network/interfaces.d/*\n\nauto lo\niface lo inet loopback\n\n# auto eth0\nallow-hotplug eth0\niface eth0 inet dhcp\n\n# auto usb0\nallow-hotplug usb0\niface usb0 inet static\naddress 192.168.233.1\nnetmask 255.255.255.0\n\nallow-hotplug wlan0\n# wpa-ssid \"2.4G\"\n# wpa-psk \"1qaz2wsx\"\n\n# auto wlan0\n# iface wlan0 inet manual\n# wpa-conf /boot/wpa_supplicant.conf\n# iface wlan0 inet dhcp\n```\n\n> [配置 NetworkManager 参考](https://support.huaweicloud.com/bestpractice-ims/ims_bp_0026.html#section1) & [linux系统中使用nmtui命令配置网络参数（图形用户界面）](https://www.cnblogs.com/liujiaxin2018/p/13910144.html)\n\n这样你就可以使用 `nmcli --pretty device wifi list` 进行 Wi-Fi 的扫描了。\n\n```\nroot@AXERA:~# nmcli --pretty device wifi list\n===========================\n  Wi-Fi scan list (wlan0)\n===========================\nIN-USE  BSSID              SSID                 MODE   CHAN  RATE        SIGNAL>\n------------------------------------------------------------------------------->\n        CC:81:DA:5B:10:98  2.4G                 Infra  7     270 Mbit/s  92    >\n        22:59:57:DD:90:63  田震天啊天震田       Infra  1     270 Mbit/s  65    >\n        C4:70:AB:3B:5A:EF  201                  Infra  1     130 Mbit/s  65    >\n        6A:70:AB:3B:5A:EC  --                   Infra  1     130 Mbit/s  65    >\n        48:A0:F8:22:BB:2D  ChinaNet-KQXN        Infra  3     130 Mbit/s  65    >\n        10:C1:72:2F:AD:FC  ChinaNet-kWCT        Infra  11    130 Mbit/s  64    >\n        B0:DF:C1:76:C5:21  --                   Infra  2     195 Mbit/s  62    >\n        66:9A:08:0C:57:D4  aWiFi-204            Infra  3     270 Mbit/s  62    >\n        1C:60:DE:96:19:16  26JK                 Infra  6     270 Mbit/s  60    >\n        1C:60:DE:78:D8:D2  EDwinLam.            Infra  1     270 Mbit/s  59    >\n        64:64:4A:28:14:3F  Xiaomi_143E          Infra  2     130 Mbit/s  59    >\n        08:40:F3:27:63:70  大王                 Infra  5     270 Mbit/s  59    >\n        14:A3:2F:62:80:F4  HUAWEI-211           Infra  6     270 Mbit/s  59    >\n        E4:0E:EE:DA:96:A4  w168                 Infra  6     270 Mbit/s  59    >\n        66:9A:08:0C:2D:34  aWiFi-305            Infra  6     270 Mbit/s  59    >\n        00:E0:4C:2B:2F:F3  UU加速盒-2FF2        Infra  11    270 Mbit/s  59    >\n        74:50:4E:8D:51:69  --                   Infra  5     270 Mbit/s  57    >\n        76:50:4E:1D:51:69  207                  Infra  5     130 Mbit/s  57    >\nlines 1-23\n```\n\n- **（BUG）暂不能打开 WIFI AP 热点模式**\n\n基于 mntui 联网成功后改用 nmcli 命令。\n\n- `nmcli device wifi hotspot ifname wlan0 con-name MyHostspot ssid MyHostspotSSID password 12345678` 即可创建 MyHostspotSSID 的 ap 热点。\n\n但是目前 WIFI 能打开，但连上会重启板子，驱动问题暂时不修。（ 20221030 ）\n\n- **（过时）如何扫描 WIFI 热点**\n\n这需要了解 iwconfig 和 iwlist 命令去管理 WIFI 网卡，例如 WIFI 扫描方法 `iwlist wlan0 scanning`，由于 iwconfig 只支持无密码和 WEP 认证的热点，所以现已不使用这个命令，仅供简单的查询热点或测试 WIFI 的好与坏。\n\n```\nroot@AXERA:~# iwlist wlan0 scanning\nwlan0     Scan completed :\n          Cell 01 - Address: 58:41:20:05:07:96\n                    ESSID:\"Sipeed_Guest\"\n                    Protocol:IEEE 802.11bgn\n                    Mode:Master\n                    Frequency:2.412 GHz (Channel 1)\n                    Encryption key:on\n                    Bit Rates:300 Mb/s\n                    Extra:wpa_ie =dd160050f20101000050f20401000050f20401000050f202\n                    IE: WPA Version 1\n                        Group Cipher : CCMP\n                        Pairwise Ciphers (1) : CCMP\n                        Authentication Suites (1) : PSK\n                    Extra:rsn_ie =30140100000fac040100000fac040100000fac020000\n                    IE: IEEE 802.11i/WPA2 Version 1\n                        Group Cipher : CCMP\n                        Pairwise Ciphers (1) : CCMP\n                        Authentication Suites (1) : PSK\n                    Quality=100/100  Signal level=100/100\n                    Extra:fm =0003\n          Cell 02 - Address: 0C:3A:FA:0E:81:7F\n                    ESSID:\"\"\n                    Protocol:IEEE 802.11bgn\n                    Mode:Master\n                    Frequency:2.412 GHz (Channel 1)\n                    Encryption key:off\n                    Bit Rates:144 Mb/s\n                    Quality=100/100  Signal level=88/100\n                    Extra:fm =0001\n          Cell 03 - Address: 64:64:4A:88:7F:06\n                    ESSID:\"Reachintelligent\"\n                    Protocol:IEEE 802.11bgn\n                    Mode:Master\n                    Frequency:2.412 GHz (Channel 1)\n                    Encryption key:on\n                    Bit Rates:144 Mb/s\n                    Extra:rsn_ie =30140100000fac040100000fac040100000fac020c00\n                    IE: IEEE 802.11i/WPA2 Version 1\n                        Group Cipher : CCMP\n                        Pairwise Ciphers (1) : CCMP\n                        Authentication Suites (1) : PSK\n                    IE: Unknown: DD7B0050F204104A0001101044000102103B00010310470010876543219ABCDEF0123464644A887F04102100067869616F6D69102300045241373210240004303030321042000531323334351054000800060050F20400011011000C5869616F4D69526F75746572100800020000103C0001031049000600372A000120\n                    Quality=100/100  Signal level=100/100\n                    Extra:fm =0003\n\n```\n\n> 目前所有的网络配置都会在重启后自动生效，如果想要自己手工控制网卡的开关，请了解一下 ifup 或 ifdown 命令的用法，类似 ifup eth0 启动 eth0 网卡，ifdown eth0 --force 强制关闭 eth0 网卡等。\n\n## 系统配置\n\n### 系统时间\n\nMaix-III AXera-Pi 开发板的 Linux 系统默认使用 NTP 协议获取系统时间，可以使用 `date` 命令查看当前系统时间。\n\n> 如果联网了会自动使用 `ntp-debian` 同步时间，没有同步则说明没有网络，没有同步 `apt update` 更新软件也会失败。\n\n### 安装软件\n\nMaix-III AXera-Pi 开发板的 Linux 系统可以通过 `apt` 更新软件。\n比如安装 gcc gdb ffmpeg 等常用 Linux 软件，只需要使用下述命令即可，其他软件安装也同理。\n\n```bash\nsudo apt update\nsudo apt install gcc gdb ffmpeg\n```\n\n.. details::点我查看示例图\n\n    ![apt](./../assets/apt.jpg)\n\n> 由于 Linux 系统直接断电可能会导致文件系统损坏，如果可以的话建议按下述命令去进行开关机，可以避免一些由于直接断电系统损坏导致的奇怪问题出现。\n\n### 重启系统\n\nMaix-III AXera-Pi 开发板的 Linux 系统可以通过 `reboot` 命令重启，重启命令如下：\n\n```bash\nreboot\n```\n\n### 关闭系统\n\nMaix-III AXera-Pi 开发板的 Linux 系统可以通过 `poweroff` 命令关闭，关闭命令如下：\n\n```bash\npoweroff\n```\n\n### 磁盘扩容\n\n基于一些用户可能有扩容分区的需求，因此在这里添加在 AXera-Pi 上给板子扩容或者是建立新分区的内容。\n\n- 操作方法\n\n首先需要烧录完上方的 debian11 的镜像系统后，再使用 AXera-Pi 登陆上 Linux 系统来进行磁盘扩容分区。\n\n>[点击查看 AXera-Pi 登陆方式](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/basic_usage.html#%E7%B3%BB%E7%BB%9F%E7%99%BB%E5%BD%95)\n\n成功登陆到 AXera-Pi 上后，用户可以先使用 `lsblk` 命令来查看设备当前的存储情况。接着使用 `cfdisk /dev/mmcblk2` 来进行磁盘分区扩容的操作。（`mmcblk2` 是我们进行操作的区域名称也称设备名）\n\n.. details::点击查看配置示意图\n    ![cfdisk](./../assets/cfdisk-mmcblk2.jpg)\n\n运行命令后终端会弹出下图操作界面，由 `Free space` 可见存储空间还余 `4.3G`，用户可使用键盘上的方向键移动选择我们要扩容的分区 `/dev/mmcblk2p2` 。\n\n.. details::点击查看配置示意图\n    ![rizese-mmcblk2](./../assets/rizese-mmcblk2.png)\n\n选择上图的 `Resize` 按下**回车键**对当前分区进行缩容或扩容，界面会跳出提示用户修改新的分区大小。\n\n.. details::点击查看配置示意图\n    ![new-resize](./../assets/new-resize.png)\n\n修改后敲**回车键**确定，终端界面会回到原页面。这时我们已经完成对分区扩容的修改了，还需要把改动的部分写入磁盘。在页面选择 `Write` 并敲**回车键**后输入 `yes` 确定将改动分区表写入磁盘中，再敲**回车键**即可。\n\n.. details::点击查看配置示意图\n    ![write-disk](./../assets/write-disk.png)\n\n操作后会返回原界面，选择 `Quit` 退出即可。\n\n.. details::点击查看配置示意图\n    ![quit](./../assets/quit.jpg)\n\n接下来使用命令行 `df -h` 查询磁盘使用空间的情况，终端会显示用户没改动之前的使用情况，需要我们使用命令 `resize2fs /dev/mmcblk2p2` 来调整文件系统的大小实现对 `mmcblk2` 分区的扩容，再使用 `df -h` 查询就可以看到磁盘改动后的情况。\n\n.. details::点击查看配置示意图\n    ![df-mmcblk2](./../assets/df-mmcblk2.jpg)\n\n> **注意**：如果调整完文件系统的大小后使用 `df -h` 查询磁盘信息依旧是改动前的信息，可使用 `reboot` 重启设备后在查询。\n\n### 开机启动脚本\n\n系统已经内置好 `/boot/rc.local` 的开机脚本，用户可参照以下脚本进行修改。\n\n```bash\nroot@AXERA:~# cat /boot/rc.local\n#!/bin/sh\n\n# this file is called by /etc/rc.local at boot.\n\n# systemctl stop usb-gadget@g0\n# mkdir -p /mnt/udisk && mount /dev/sda1 /mnt/udisk\n# python3 /mnt/udisk/alltest.py\n\nif [ -f \"/root/boot\" ]; then\n  cd /root/ && chmod 777 * && ./boot &  \nelif [ -d \"/root/app\" ]; then\n  cd /root/app && chmod 777 *\n  if [ -f \"./main\" ]; then\n    ./main &\n  elif [ -f \"./main.bin\" ]; then\n    ./main.bin &\n  elif [ -f \"./main.py\" ]; then\n    python3 ./main.py &\n  fi\nelse\n  aplay /home/res/boot.wav >/dev/null 2>&1 &\n  /opt/bin/sample_vo_fb -v dsi0@480x854@60 -m 0 >/dev/null 2>&1 &\n  sleep 0.5 && /home/fbv-1.0b/fbv /home/res/2_480x854.jpeg && killall sample_vo_fb\nfi\n\nexit 0\n```\n\n.. details::点我查看示例图\n    ![start](./../assets/start.jpg)\n\n.. details::点击查看连接后串口输出的 debian11 系统启动日志。\n\n    ```bash\n    Vddr init success!\n    The system boot form EMMC\n    enter boot normal mode\n\n    U-Boot 2020.04 (Jun 16 2022 - 00:16:34 +0800)\n\n    Model: AXERA AX620_demo Board\n    DRAM:  1 GiB\n    NAND:  unknown raw ID 77ee0178\n    uclass_get_device: Invalid bus 0 (err=-524)\n    0 MiB\n    initr_pinmux: delay pinmux_init for env board id\n    MMC:   enter sdhci_cdns_get_cd call mmc_getcd\n    enter sdhci_cdns_get_cd call mmc_getcd\n    mmc@10000000: 0, mmc@4950000: 1\n    Loading Environment from MMC... OK\n    In:    serial\n    Out:   serial\n    Err:   serial\n    MMC: no card present\n    sd card is not present\n    enter normal boot mode\n    Net:\n    reset EMAC0: ethernet@0x4970000 ...\n    Warning: ethernet@0x4970000 (eth0) using random MAC address - 6a:e4:fd:58:97:ea\n    eth0: ethernet@0x4970000\n    Hit any key to stop autoboot:  0\n    reading DTB and BOOT image ...\n    reading bootimg header...\n    MAGIC:       AXERA!\n    img size:    4841536\n    kernel_size: 4841472\n    kernel_addr: 64\n    id:bc 19 bb a7 2d 27 74 de 7c 91 4b 70 ea c9 ab 96 50 61 bd e0 2b 02 8b e5 c8 ee 22 ce df b1 cf ea\n    load kernel image addr = 0x40008000,load dtb image addr = 0x48008000\n    boot cmd is :bootm 0x40008000 - 0x48008000\n    ## Booting kernel from Legacy Image at 40008000 ...\n    Image Name:   Linux-4.19.125\n    Image Type:   ARM Linux Kernel Image (uncompressed)\n    Data Size:    4839952 Bytes = 4.6 MiB\n    Load Address: 40008000\n    Entry Point:  40008000\n    Verifying Checksum ... OK\n    ## Flattened Device Tree blob at 48008000\n    Booting using the fdt blob at 0x48008000\n    Loading Kernel Image\n    Using Device Tree in place at 48008000, end 480103d6\n\n    Starting kernel ...\n\n\n    Welcome to Debian GNU/Linux 11 (bullseye)!\n\n    [  OK  ] Created slice system-getty.slice.\n    [  OK  ] Created slice system-modprobe.slice.\n    [  OK  ] Created slice system-serial\\x2dgetty.slice.\n    [  OK  ] Created slice User and Session Slice.\n    [  OK  ] Started Dispatch Password …ts to Console Directory Watch.\n    [  OK  ] Started Forward Password R…uests to Wall Directory Watch.\n    [  OK  ] Reached target Local Encrypted Volumes.\n    [  OK  ] Reached target Network is Online.\n    ......\n\n### 更新内核与驱动\n\n在 SD 卡的第一分区会挂载到系统根目录下的 /boot 系统启动相关的文件，替换它即可完成更新。\n\n- boot.bin 芯片 spl 初始化程序\n\n- uboot.bin uboot 启动引导程序\n\n- kernel.img linux 内核\n\n- dtb.img linux 设备树\n\n## 系统外设验证\n\n### 系统预置的资源\n\nMaix-III AXera-Pi 开发板的 Linux 系统预置了一些资源，可以通过 `ls /opt` 命令来查看。\n\n```bash\nroot@AXERA:~# ls /opt\nbin  include  lib  scripts  share\n```\n\n还有一些在 `home` 目录下：\n\n```bash\nroot@AXERA:~# tree -L 1 /home\n├── ax-samples          # npu ai sdk\n├── examples            # 一些开箱示例\n├── fbv-1.0b            # fbv 图片查看器\n├── images              # 一些测试图片\n├── libmaix             # simple pipeline sdk\n├── models              # 内置的 AI 模型\n├── res                 # 一些图像字体资源\n├── systemd-usb-gadget  # 配置 usb 服务\n├── usb-uvc-gadget      # 配置 uvc 服务\n└── ustreamer           # mjpeg 图传\n```\n\n板子已经预置了 `gcc g++ gdb libopencv ffmpeg` 等工具，可直接在板上编译运行程序。\n\n> **注意**：使用 xxxx menuconfig 报错请移步[Maix-III 系列 AXera-Pi 常见问题（FAQ）](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/faq_axpi.html)\n\n可参考下方使用方法：\n\n```bash\ncd /home/libmaix/examples/axpi/\npython3 project.py build\nfbon\n./dist/start_app.sh\n```\n\n.. details::点击查看示例效果\n    使用命令行后会打印大量数据信息并启动摄像头及屏幕。\n\n    ![libmaix](./../assets/libmaix.jpg)\n\n而 axsample 已经预编译好了，相关 joint 模型已内置在 `/home/models/` 下便于用户查询。\n\n```bash\n/home/ax-samples/build/install/bin/ax_yolov5s -m /home/models/yolov5s.joint -i /home/images/cat.jpg -r 10\nfbon\nfbv yolov5s_out.jpg\n```\n\n.. details::点击查看效果\n    输入上方命令后屏幕会显示 yolovs_out.jpg 图像\n\n    ![cat](./../assets/cat.jpg)\n\n可以在联网后直接 `git pull` 更新仓库的提交记录，如果不能访问 github 的话就设置一下 `git remote` 从 gitee 拉取代码吧。\n\n### CPU & RAM\n\n默认 800MHz 可以调到 1ghz.\n\n```bash\nroot@AXERA:~# ax_lookat 0x01900000 -s 33\n0x1900000:00000033\nroot@AXERA:~# ax_clk\nAX620A:\nDDR:                 3733 MHz\nCPU:                 800 MHz\nBUS of VPU:         624 MHz\nBUS of NPU:         624 MHz\nBUS of ISP:         624 MHz\nBUS of CPU:         624 MHz\nNPU OTHER:         800 MHz\nNPU GLB:         24 MHz\nNPU FAB:         800 MHz\nNPU CORE1:         800 MHz\nNPU CORE0:         800 MHz\nISP:                 533 MHz\nMM:                 594 MHz\nVPU:                 624 MHz\nroot@AXERA:~# ax_lookat 0x01900000 -s 35\n0x1900000:00000035\nroot@AXERA:~# ax_clk\nAX620A:\nDDR:                 3733 MHz\nCPU:                 1000 MHz\nBUS of VPU:         624 MHz\nBUS of NPU:         624 MHz\nBUS of ISP:         624 MHz\nBUS of CPU:         624 MHz\nNPU OTHER:         800 MHz\nNPU GLB:         24 MHz\nNPU FAB:         800 MHz\nNPU CORE1:         800 MHz\nNPU CORE0:         800 MHz\nISP:                 533 MHz\nMM:                 594 MHz\nVPU:                 624 MHz\nroot@AXERA:~#\n```\n\n目前硬件内存虽然是 2g 但在系统上只能看到 745M ，不用担心，这是目前的分配内存过于保守导致的，后续更新内核调整一下 NPU 和 CMM 的内存分配的。\n\n### VIDEO\n>**注意**：以下例程是原始测试时检查硬件好坏的程序，请用下面内置应用看正常的效果！\n>内置开箱应用传送门：[点击前往](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/basic_usage.html#%E5%86%85%E7%BD%AE%E5%BC%80%E7%AE%B1%E5%BA%94%E7%94%A8)\n目前系统的摄像头驱动不经过 v4l2 驱动框架，所以必须通过代码配置的方式进行启用，相关摄像头驱动都是在应用层上完成的，\n\n- gc4653 （基础版）\n- os04a10（夜视版）\n\n```bash\nsample_vin_vo -c 2 -e 1 -s 0 -v dsi0@480x854@60\n```\n\n.. details::运行上方命令后可看到画面（示例效果）\n    ![video](./../assets/video.jpg)\n\n>目前默认使用的是 gc4653 ，使用 os04a10 请移步[Maix-III 系列 AXera-Pi 常见问题(FAQ)](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/faq_axpi.html)查询。\n\n### DISPLAY\n\n目前系统默认使用的是最简单的 framebuffer 显示驱动（/dev/fb0），在系统里内置了 `fbon / fboff / fbv xxx.jpg` 三个命令负责管理 fb 设备的启用和现实。\n\n```bash\nfbon\nfbv /home/res/logo.png\nfboff\n```\n\n![fbv_logo](./../assets/fbv_logo.jpg)\n\n目前想要使用 libdrm 需要搭配代码使用，请参考 sdk 的源码实现，因为目前系统还未移植好 gpu 驱动所以无法使用 modetest 进行测试，但可以参考下面进行测试。\n\n测试屏幕是否能用运行右侧 `sample_vo -v dsi0@480x854@60 -m 0` 命令屏幕会显示彩条，但使用前务必调用 `fboff` 关闭 fb 设备。\n\n### RTSP\n\n>**20221116** 后镜像内置了 **`vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2`** \n\n可用于评估从摄像头运行 yolov5s 模型识别结果通过 RTSP 发送数据采集的演示效果。\n**RTSP 介绍及使用过程**：[点击查看](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/basic_usage.html#rtsp)\n\n### NPU\n\n测试 NPU 的示例程序在 `/home/ax-samples/build/install` 目录下，已经预编译好了，直接就可以调用并显示运行结果。\n\n```fbon\n/home/ax-samples/build/install/bin/ax_yolov5s -m /home/models/yolov5s.joint -i /home/images/cat.jpg -r 10\nfbv yolov5s_out.jpg\n```\n\n### AUDIO\n\n和桌面系统保持一致，直接可用 alsa-utils 进行测试。\n\n- **测试脚本**：`speaker-test -t sine -f 440 -c1`\n- **播放音频**：`aplay test.wav`\n- **录制音频**；`arecord test.wav -c 2 -d 2`\n\n录音回放的 `python3` 代码如下：\n\n```python\nimport pyaudio\ntry:\n    chunk = 1024      # Each chunk will consist of 1024 samples\n    sample_format = pyaudio.paInt16      # 16 bits per sample\n    channels = 2      # Number of audio channels\n    fs = 44100        # Record at 44100 samples per second\n    time_in_seconds = 30\n    p = pyaudio.PyAudio()\n    stream = p.open(format=sample_format,\n                    channels = channels,\n                    rate = fs,\n                    frames_per_buffer = chunk,\n                    input = True, output = True)\n    # Store data in chunks for 3 seconds\n    for i in range(0, int(fs / chunk * time_in_seconds)):\n        data = stream.read(chunk)\n        stream.write(data)\nfinally:\n    # Stop and close the Stream and PyAudio\n    stream.stop_stream()\n    stream.close()\n    p.terminate()\n```\n\n可以在 alsamixer 配置你的设备，如果不了解的话建议不要修改。\n\n![alsamixer](./../assets/alsamixer.jpg)\n\n### USB\n\n>**注意**：由于芯片只有一个完整功能的 usb2.0，同一时刻下只有一个使用方向如 OTG 从机或 HOST 主机。\n\n#### 如何配置 USB OTG 虚拟网卡 RNDIS usb0 有线 ssh 登录\n\n默认就会启动配置 `systemctl enable usb-gadget@g0`，启动用 `systemctl start usb-gadget@g0`，停止开机启动用 `systemctl disable usb-gadget@g0`，停止服务用`systemctl stop usb-gadget@g0`。\n\n此时使用命令 `sshpass -p root ssh root@192.168.233.1` 即可连接，账号及密码都是 root 。\n\n![ssh-usb](./../assets/ssh-usb.jpg)\n\n#### 如何配置 USB OTG 虚拟串口 /dev/ttyGS0 并转发登录接口\n\n停止 usb-gadget@g0 后使用 `systemctl start usb-gadget@g1` 即可看到，然后使用 `systemctl start getty@ttyGS0` 即可转发串口终端到 usb 的虚拟串口上。\n\n![usb_tty](./../assets/usb_tty.jpg)\n\n#### 如何使用 USB HOST 读取一个 256M 的 SD 卡\n\n先关了 otg 的 rndis 后再 lsusb 就可以看到了。\n\n>我们在 debian 系统上配置了 usb-gadget@g1 和 usb-gadget@g0 两个服务。\n\n```bash\nroot@AXERA:~# systemctl stop usb-gadget@g0\nroot@AXERA:~# lsusb\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 001 Device 002: ID 067b:2731 Prolific Technology, Inc. USB SD Card Reader\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nroot@AXERA:~# fdisk -l\nDisk /dev/mmcblk2: 58.94 GiB, 63281561600 bytes, 123596800 sectors\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x32eb5429\n\nDevice         Boot  Start       End   Sectors  Size Id Type\n/dev/mmcblk2p1 *      2048    264191    262144  128M  c W95 FAT32 (LBA)\n/dev/mmcblk2p2      264192 123596799 123332608 58.8G 83 Linux\n\n\nDisk /dev/sda: 240 MiB, 251658240 bytes, 491520 sectors\nDisk model: SD Card Reader\nUnits: sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisklabel type: dos\nDisk identifier: 0x0607cfd2\n\nDevice     Boot Start    End Sectors   Size Id Type\n/dev/sda1  *      240 490239  490000 239.3M  e W95 FAT16 (LBA)\nroot@AXERA:~# mkdir /mnt/sdcard && mount /dev/sda1 /mnt/sdcard\n```\n\n一步到位挂载 U 盘第一分区的命令 `systemctl stop usb-gadget@g0 && lsusb && mkdir -p /mnt/udisk && mount /dev/sda1 /mnt/udisk`\n\n#### 如何配置 USB OTG 虚拟一个 USB 摄像头\n\n**usb-uvc-gadget**：[usb-uvc-gadget](https://github.com/junhuanchen/usb-uvc-gadget)\n\n**更多详情请移步内置应用查看**：[应用传送门](http://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/basic_usage.html#uvc_vo)\n\n#### 如何配置 USB HOST 读取一个 USB 摄像头\n\n>适配 usb 摄像头前我们需要给板子接上以太网 `eth0`，使用 `ifconfig` 查询以太网的 `IP` 方便我们使用。\n>如果获取不到以太网的 `IP` 地址，请移步右侧进行重新启动/配置[点击前往相关](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/basic_usage.html#%E6%9C%89%E7%BA%BF%E4%BB%A5%E5%A4%AA%E7%BD%91%EF%BC%88eth0%EF%BC%89%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95)。\n\n**Ustreamer**：[点击查看相关仓库](https://github.com/pikvm/ustreamer)\n运行下方的命令行，终端会弹出调试信息无明显报错后，打开任意浏览器输入我们刚获取的以太网 `IP` 地址，进入 `ustreamer` 使用体验拍照及录像功能。\n\n```bash\n/home/ustreamer/ustreamer --device=/dev/video0 --host=0.0.0.0 --port=80\n```\n\n![ustreamer_adb](./../assets/ustreamer_adb.png)\n\n`snapshot` 为拍照功能，`stream` 为视频功能。\n\n![ustreamer](./../assets/ustreamer.png)\n\n.. details::点击查看效果图\n\n    ![ustreamer_snapshot](./../assets/ustreamer_snapshot.jpg)\n\n\n### GPIO\n\n#### 读取 KEY 按键输入：GPIO2 21\n\n```bash\necho 85  > /sys/class/gpio/export\necho in > /sys/class/gpio/gpio85/direction\ncat /sys/class/gpio/gpio85/value\n```\n\n#### 点亮 LED 灯 GPIO2 A4-A5 68-69\n\n```bash\necho 68  > /sys/class/gpio/export\necho out > /sys/class/gpio/gpio68/direction\necho 1 > /sys/class/gpio/gpio68/value\nsleep 1\necho 0 > /sys/class/gpio/gpio68/value\nsleep 1\necho 1 > /sys/class/gpio/gpio68/value\n```\n\n> 计算规则 GPIO2 A4 == 32 *  2 + 4 = 68\n对于爱芯的芯片，GPIO0 和 GPIO2 对应 A 和 C ，此处 A4 并不代表 GPIO2 只是序号。\n也就是 GPIO2 A4 在标准设备中的定义为 GPIO C(2) 4(A4) 同理 GPIOA0 对应 GPIO0A4。\n\n以后主流会统一到 PA0 或 PC4 这类定义，方便不同芯片共同定义。\n\n.. details:: 点击查看相关 gpio.h 代码\n\n    ```c\n    #ifndef __LINUX_GPIO_H\n    #define __LINUX_GPIO_H\n\n    #ifdef __cplusplus\n    extern \"C\"\n    {\n    #endif\n\n    #include <stdint.h>\n    #include <stdio.h>\n    #include <fcntl.h>\n    #include <unistd.h>\n    #include <stdlib.h>\n    #include <string.h>\n\n    void _pwm_init(char *pin, uint64_t fre, float duty);\n\n    void _pwm_set_duty(char * pin, float duty);\n\n    void _pwm_deinit(char *pin);\n\n    /*\n    _pwm_init(\"PH8\", 50000, 0.1);\n    sleep(1);\n    _pwm_set_duty(\"PH8\", 0.6);\n    sleep(1);\n    _pwm_set_duty(\"PH8\", 0.3);\n    sleep(1);\n    _pwm_deinit(\"PH8\");\n    */\n\n    void* _gpio_init(char* pin, int mode, int state);\n\n    void _gpio_deinit(char* pin);\n\n    void _gpio_read(char* pin, int* state);\n\n    /*\n    // _gpio_init(\"PH7\", 0, 0);\n    // for (int i = 0; i < 30; i++)\n    // {\n    //     int val = 0;\n    //     _gpio_read(\"PH7\", &val);\n    //     printf(\"%d\\r\\n\", val);\n    //     sleep(1);\n    // }\n    // _gpio_deinit(\"PH7\");\n    // return;\n    */\n\n    #ifdef __cplusplus\n    } /* extern \"C\" */\n    #endif\n\n    #endif /* __LINUX_GPIO_H */\n    ```\n\n.. details:: 点击查看相关 gpio.c 代码\n    \n    ```c\n    #include \"linux_gpio.h\"\n\n    int _write_file_only(char* path, char* buf, size_t count)\n    {\n        int fd, res;\n\n        fd = open(path, O_WRONLY | O_NONBLOCK);\n        if (fd < 0)\n            return -1;\n\n        res = write(fd, buf, count);\n        if (res < 0)\n        {\n            close(fd);\n            return -2;\n        }\n\n        res = close(fd);\n        if (res < 0)\n            return -3;\n\n        return res;\n    }\n\n    int _read_file_only(char* path, char* buf, size_t count)\n    {\n        int fd, res;\n\n        fd = open(path, O_RDONLY | O_NONBLOCK);\n        if (fd < 0)\n            return -1;\n\n        res = read(fd, buf, count);\n        if (res < 0)\n        {\n            close(fd);\n            return -2;\n        }\n\n        res = close(fd);\n        if (res < 0)\n            return -3;\n\n        return res;\n    }\n\n    int _get_pwm_num(char *pin)\n    {\n        int pwm_num = 0;\n        if (strlen(pin) < 3)    return -1;\n\n        if (!strcmp(pin, \"PD1\") || !strcmp(pin, \"PH0\"))\n        {\n            pwm_num = 0;\n        }\n        else if (!strcmp(pin, \"PD2\") || !strcmp(pin, \"PH1\"))\n        {\n            pwm_num = 1;\n        }\n        else if (!strcmp(pin, \"PD3\") || !strcmp(pin, \"PH2\"))\n        {\n            pwm_num = 2;\n        }\n        else if (!strcmp(pin, \"PD4\") || !strcmp(pin, \"PH3\"))\n        {\n            pwm_num = 3;\n        }\n        else if (!strcmp(pin, \"PD5\") || !strcmp(pin, \"PH4\"))\n        {\n            pwm_num = 4;\n        }\n        else if (!strcmp(pin, \"PD6\") || !strcmp(pin, \"PH5\"))\n        {\n            pwm_num = 5;\n        }\n        else if (!strcmp(pin, \"PD7\") || !strcmp(pin, \"PH6\"))\n        {\n            pwm_num = 6;\n        }\n        else if (!strcmp(pin, \"PD8\") || !strcmp(pin, \"PH7\"))\n        {\n            pwm_num = 7;\n        }\n        else if (!strcmp(pin, \"PD9\") || !strcmp(pin, \"PH8\"))\n        {\n            pwm_num = 8;\n        }\n        else if (!strcmp(pin, \"PD19\") || !strcmp(pin, \"PD22\") || !strcmp(pin, \"PH9\"))\n        {\n            pwm_num = 9;\n        }\n        else\n        {\n            pwm_num = -1;\n        }\n\n        return pwm_num;\n    }\n\n    /**\n    * @brief 初始化pwm\n    * @details\n    * @param [in] pwm_id   按键id(0 按键0,1 按键1)\n    * @param [in] fre      频率\n    * @param [in] duty     占空比\n    * @retval\n    */\n    void _pwm_init(char *pin, uint64_t fre, float duty)\n    {\n        int res = 0;\n        char path[100];\n        char arg[20];\n        int pwm_id;\n        uint64_t period = 0, duty_cycle = 0;\n\n        pwm_id = _get_pwm_num(pin);\n        if (-1 == pwm_id)   return;\n\n        snprintf(arg, sizeof(arg), \"%d\", pwm_id);\n        res = _write_file_only(\"/sys/class/pwm/pwmchip0/export\", arg, strlen(arg));\n        if (res < 0)    {return;}\n\n        period = 1000000000 / fre;\n        snprintf(path, sizeof(path), \"/sys/class/pwm/pwmchip0/pwm%d/period\", pwm_id);\n        snprintf(arg, sizeof(arg), \"%lld\", period);\n        res = _write_file_only(path, arg, strlen(arg));\n        if (res < 0)    {return;}\n\n        duty = duty > 1.0 ? 1.0 : duty;\n        duty = 1.0 - duty;\n        duty_cycle = period * duty;\n        snprintf(path, sizeof(path), \"/sys/class/pwm/pwmchip0/pwm%d/duty_cycle\", pwm_id);\n        snprintf(arg, sizeof(arg), \"%lld\", duty_cycle);\n        res = _write_file_only(path, arg, strlen(arg));\n        if (res < 0)    {return;}\n\n        snprintf(path, sizeof(path), \"/sys/class/pwm/pwmchip0/pwm%d/enable\", pwm_id);\n        res = _write_file_only(path, \"1\", 1);\n        if (res < 0)    {return;}\n    }\n\n    void _pwm_deinit(char *pin)\n    {\n        int res = 0;\n        char path[100];\n        char arg[20];\n        int pwm_id;\n\n        pwm_id = _get_pwm_num(pin);\n        if (-1 == pwm_id)   return;\n\n        snprintf(path, sizeof(path), \"/sys/class/pwm/pwmchip0/pwm%d/enable\", pwm_id);\n        res = _write_file_only(path, \"0\", 1);\n        if (res < 0)    {return;}\n\n        snprintf(arg, sizeof(arg), \"%d\", pwm_id);\n        res = _write_file_only(\"/sys/class/pwm/pwmchip0/unexport\", arg, strlen(arg));\n        if (res < 0)    {return;}\n    }\n\n    void _pwm_set_duty(char * pin, float duty)\n    {\n        int res = 0;\n        char path[100];\n        char arg[20];\n        int pwm_id;\n        uint64_t period = 0, duty_cycle = 0;\n\n        pwm_id = _get_pwm_num(pin);\n        if (-1 == pwm_id)   return;\n\n        snprintf(path, sizeof(path), \"/sys/class/pwm/pwmchip0/pwm%d/period\", pwm_id);\n        res = _read_file_only(path, arg, sizeof(arg));\n        if (res < 0)    {return;}\n        period = atoi(arg);\n\n        duty = 1.0 - duty;\n        duty_cycle = period * duty;\n        snprintf(arg, sizeof(arg), \"%lld\", duty_cycle);\n        snprintf(path, sizeof(path), \"/sys/class/pwm/pwmchip0/pwm%d/duty_cycle\", pwm_id);\n        res = _write_file_only(path, arg, strlen(arg));\n        if (res < 0)    {return;}\n    }\n\n    /**\n    * @brief 将字符引脚编号转换为数字引脚编号\n    * @param [in] pin   字符引脚编号,格式必须为PAxx~PHxx，且xx的范围为0~31\n    * @retval 返回数字引脚编号，如果为-1，则执行失败\n    */\n    int _get_gpio_num(char* pin)\n    {\n        if (strlen(pin) < 3)\n            return -1;\n        char c;\n        int group_id, group_offset, gpio_num;\n\n        c = pin[0];\n        if (c != 'p' && c != 'P')\n        {\n            return -1;\n        }\n\n        c = pin[1];\n        if ('a' <= c && c <= 'z')\t\t\t// 限制a~z\n        {\n            group_id = c - 'a';\n        }\n        else if ('A' <= c && c <= 'Z')\t    // 限制A~Z\n        {\n            group_id = c - 'A';\n        }\n        else\n        {\n            return -1;\n        }\n\n        group_offset = atoi(pin + 2);\n        if (group_offset > 31)\n        {\n            return -1;\n        }\n\n        gpio_num = (group_id << 5) + group_offset;\n        return gpio_num;\n    }\n\n    /**\n    * @brief 向export文件注册gpio\n    * @param [in] gpio   引脚编号\n    * @retval 返回0，成功，小于0，失败\n    */\n    int gpio_export(uint32_t gpio)\n    {\n        int len, res;\n        char buf[10];\n\n        len = snprintf(buf, sizeof(buf), \"%d\", gpio);\n        if (len > sizeof(buf))\n            return -1;\n\n        res = _write_file_only(\"/sys/class/gpio\" \"/export\", buf, len);\n        if (res < 0)\n        {\n            perror(\"gpio_export\");\n        }\n\n        return res;\n    }\n\n    /**\n    * @brief 向unexport文件取消注册gpio\n    * @param [in] gpio   引脚编号\n    * @retval 返回0，成功，小于0，失败\n    */\n    int gpio_unexport(uint32_t gpio)\n    {\n        int len, res;\n        char buf[10];\n\n        len = snprintf(buf, sizeof(buf), \"%d\", gpio);\n        if (len > sizeof(buf))\n            return -1;\n\n        res = _write_file_only(\"/sys/class/gpio\" \"/unexport\", buf, len);\n        if (res < 0)\n        {\n            perror(\"gpio unexport\");\n        }\n\n        return res;\n    }\n\n    /**\n    * @brief 设置gpio输入/输出模式\n    * @param [in] gpio   引脚编号\n    * @param [in] mode   引脚模式,取值如下:\n    *  \t\t\t\t0,输入模式\n    *  \t\t\t\t1,输出模式，默认低电平\n    *  \t\t\t\t2,输出模式，默认低电平\n    *  \t\t\t\t3,输出模式，默认高电平\n    * @retval 返回0，成功，小于0，失败\n    */\n    int gpio_set_dir(uint32_t gpio, uint32_t mode)\n    {\n        int len, res;\n        char path[40];\n\n        len = snprintf(path, sizeof(path), \"/sys/class/gpio\"  \"/gpio%d/direction\", gpio);\n        if (len > sizeof(path))\n            return -1;\n\n        mode = mode > 3 ? 3 : mode;\n        switch(mode)\n        {\n            case 0:res = _write_file_only(path, \"in\", sizeof(\"in\"));break;\n            case 1:res = _write_file_only(path, \"out\", sizeof(\"out\"));break;\n            case 2:res = _write_file_only(path, \"low\", sizeof(\"low\"));break;\n            case 3:res = _write_file_only(path, \"high\", sizeof(\"high\"));break;\n            default:break;\n        }\n\n        return res;\n    }\n\n    /**\n    * @brief 设置gpio电平\n    * @param [in] gpio   引脚编号\n    * @param [in] value  引脚电平(1,高电平;0,低电平)\n    * @retval 返回0，成功，小于0，失败\n    */\n    int gpio_set_value(uint32_t gpio, uint32_t value)\n    {\n        int len, res;\n        char path[40];\n\n        len = snprintf(path, sizeof(path), \"/sys/class/gpio\"  \"/gpio%d/value\", gpio);\n        if (len > sizeof(path))\n            return -1;\n\n        if (value)\n            res = _write_file_only(path, \"1\", 2);\n        else\n            res = _write_file_only(path, \"0\", 2);\n\n        return res;\n    }\n\n    /**\n    * @brief 读取gpio电平\n    * @param [in] \tgpio   引脚编号\n    * @param [out] value  引脚电平(1,高电平;0,低电平)\n    * @retval 返回0，成功，小于0，失败\n    */\n    int gpio_get_value(uint32_t gpio, uint32_t *value)\n    {\n        int len, res;\n        char path[40], state;\n\n        len = snprintf(path, sizeof(path), \"/sys/class/gpio\"  \"/gpio%d/value\", gpio);\n        if (len > sizeof(path))\n            return -1;\n\n        res = _read_file_only(path, &state, 1);\n        if (res < 0)\n            return res;\n\n        *value = state == '0' ? 0 : 1;\n\n        return res;\n    }\n\n    /**\n    * @brief 初始化gpio\n    * @note 还没有限制io_num的范围，需要注意\n    * @param [in] dev      设备名\n    * @param [in] mode     模式\n    * @param [in] state    初始状态值\n    * @retval 0 成功 <0 失败\n    */\n    void* _gpio_init(char* pin, int mode, int state)\n    {\n        int res = -1;\n\n        int io_num = _get_gpio_num(pin);\n        if (io_num < 0)\n        {\n            return (void *)res;\n        }\n\n        /* 向export文件注册一个gpio */\n        res = gpio_export(io_num);\n        if (res < 0)    return (void *)res;\n\n        /* 设置gpio方向 */\n        res = gpio_set_dir(io_num, mode);\n        if (res < 0)    return (void *)res;\n\n        if (mode > 0)\n        {\n            /* 设置gpio电平 */\n            res = gpio_set_value(io_num, state);\n            if (res < 0)    return (void *)res;\n\n        }\n\n\n        return (void*)res;\n    }\n\n    /**\n    * @brief 初始化gpio\n    * @note 还没有限制io_num的范围，需要注意\n    * @param [in] handle      设备名\n    * @retval\n    */\n    void _gpio_deinit(char* pin)\n    {\n        int res;\n\n        int io_num = _get_gpio_num(pin);\n        if (io_num < 0) return;\n        res = gpio_unexport(io_num);\n        if (res < 0) return;\n    }\n\n    /**\n    * @brief 读gpio电平，只能在输入模式下调用\n    * @note\n    * @param [in]  handle  句柄，用来传入文件描述符\n    * @param [out] state 状态值\n    * @retval\n    */\n    void _gpio_read(char* pin, int* state)\n    {\n        int io_num = _get_gpio_num(pin);\n        if (io_num < 0) return;\n\n        gpio_get_value(io_num, (uint32_t *)state);\n\n    }\n\n    /**\n    * @brief 写gpio电平，只能在输出模式下调用\n    * @note\n    * @param [in] handle  句柄，用来传入文件描述符\n    * @param [in] state   状态值\n    * @retval\n    */\n    void _gpio_write(char* pin, int state)\n    {\n        int io_num = _get_gpio_num(pin);\n        if (io_num < 0) return;\n\n        gpio_set_value(io_num, state);\n    }\n    ```\n### UART\n\n系统输出默认是 **ttyS0** ，排针上的是 **ttyS1** ，而虚拟串口是 **ttyGS0**。\n\n![uart_tty](./../assets/uart_tty.jpg)\n\n可用 `python3 pyserial` 库来测试功能的好与坏，但是需要注意排针丝印可能不准确。\n如果出现串口的 tx 和 rx 没有数据的话可以反接一下，以及确保是共地的。\n\n```python\nimport serial\nser = serial.Serial('/dev/ttyS1', 115200, timeout=1)\nser.write(b'hello world\\n')\nser.close()\n```\n\n.. details:: 点击查看相关 uart.h 代码\n    ```c\n    #ifndef __LINUX_UART_H\n    #define __LINUX_UART_H\n\n    #ifdef __cplusplus\n    extern \"C\"\n    {\n    #endif\n\n    #include \"stdint.h\"\n\n    #define PRINF_HEX_ARR(str,buf,len)\\\n    do{\\\n        char *buff = (char *)buf;\\\n        printf(\"\\e[32m[%s](%d):\\e[0m\", str, len);\\\n        for (int i = 0;i < len; ++i)\\\n        {\\\n            printf(\"0x%.2X \", buff[i] & 0xff);\\\n        }\\\n        printf(\"\\r\\n\");\\\n    } while (0);\n\n    typedef struct{\n        int baud;\n        int data_bits;\n        int stop_bits;\n        char parity;\n    }uart_t;\n\n    int linux_uart_init(char* dev, void* param);\n    void linux_uart_deinit(int fd);\n    int linux_uart_read(int fd, int cnt, uint8_t* buf);\n    int linux_uart_write(int fd, int cnt, uint8_t* buf);\n\n    #ifdef __cplusplus\n    } /* extern \"C\" */\n    #endif\n\n    #endif /* __LINUX_UART_H */\n\n    ```\n\n.. details:: 点击查看相关 uart.c 代码\n\n    ```c\n    #include \"linux_uart.h\"\n\n    #include <stdio.h>\n    #include <sys/ioctl.h>\n    #include <fcntl.h>\n    #include <errno.h>\n    #include <termios.h>\n    #include <linux/serial.h>\n\n\n    static int _get_baud(int baud)\n    {\n        switch (baud)\n        {\n        case 9600:return B9600;\n        case 19200:return B19200;\n        case 38400:return B38400;\n        case 57600:return B57600;\n        case 115200:return B115200;\n        case 230400:return B230400;\n        case 460800:return B460800;\n        case 500000:return B500000;\n        case 576000:return B576000;\n        case 921600:return B921600;\n    #ifdef B1000000\n        case 1000000:return B1000000;\n    #endif\n    #ifdef B1152000\n        case 1152000:return B1152000;\n    #endif\n    #ifdef B1500000\n        case 1500000:return B1500000;\n    #endif\n    #ifdef B2000000\n        case 2000000:return B2000000;\n    #endif\n    #ifdef B2500000\n        case 2500000:return B2500000;\n    #endif\n    #ifdef B3000000\n        case 3000000:return B3000000;\n    #endif\n    #ifdef B3500000\n        case 3500000:return B3500000;\n    #endif\n    #ifdef B4000000\n        case 4000000:return B4000000;\n    #endif\n        default:return -1;\n        }\n    }\n\n\n    static void clear_custom_speed_flag(int _fd)\n    {\n        struct serial_struct ss;\n        if (ioctl(_fd, TIOCGSERIAL, &ss) < 0) {\n            // return silently as some devices do not support TIOCGSERIAL\n            return;\n        }\n\n        if ((ss.flags & ASYNC_SPD_MASK) != ASYNC_SPD_CUST)\n            return;\n\n        ss.flags &= ~ASYNC_SPD_MASK;\n\n        if (ioctl(_fd, TIOCSSERIAL, &ss) < 0) {\n            perror(\"TIOCSSERIAL failed\");\n            exit(1);\n        }\n    }\n\n    /**\n    * @brief 初始化uart\n    * @note\n    * @param [in] dev    设备名\n    * @param [in] param  参数\n    * @retval\n    */\n    int linux_uart_init(char* dev, void* param)\n    {\n        int fd;\n\n        uart_t* cfg = (uart_t *)param;\n\n        int baud = _get_baud(cfg->baud);\n        int data_bits = cfg->data_bits, stop_bits = cfg->stop_bits;\n        char parity = cfg->parity;\n\n        fd = open(dev, O_RDWR | O_NONBLOCK | O_NOCTTY);\n        // fd = open(dev, O_RDWR | O_NOCTTY);\n        if (fd < 0)\n        {\n            return fd;\n        }\n\n        struct termios opt;\n        memset(&opt, 0, sizeof(opt));\n\n        /* 忽略modem，使能读模式 */\n        opt.c_cflag |= CLOCAL | CREAD;\n\n        /* 设置波特率 */\n        opt.c_cflag |= baud;\n\n        /* 设置数据位 */\n        switch (data_bits)\n        {\n        case 7:\n            opt.c_cflag |= CS7;\n            break;\n        case 8:\n            opt.c_cflag |= CS8;\n            break;\n        default:break;\n        }\n\n        /* 设置奇偶校验位 */\n        switch (parity)\n        {\n        case 'N':\n        case 'n':\n            opt.c_iflag &= ~INPCK;\n            opt.c_cflag &= ~PARENB;\n            break;\n        case 'O':\n        case 'o':\n            opt.c_iflag |= (INPCK | ISTRIP);\n            opt.c_cflag |= (PARODD | PARENB);\n            break;\n        case 'E':\n        case 'e':\n            opt.c_iflag |= (INPCK | ISTRIP);\n            opt.c_cflag |= PARENB;\n            opt.c_cflag &= ~PARODD;\n            break;\n        default:break;\n        }\n\n        /* 设置停止位 */\n        switch (stop_bits)\n        {\n        case 1:\n            opt.c_cflag &= ~CSTOPB;\n            break;\n        case 2:\n            opt.c_cflag |= CSTOPB;\n            break;\n        default:break;\n        }\n\n        /* 设置流控制 */\n        opt.c_cflag &= ~CRTSCTS;\n\n        /* 最小字节数与等待时间 */\n        opt.c_cc[VMIN] = 1;\n        opt.c_cc[VTIME] = 0;\n\n        /* 刷新串口，更新配置 */\n        tcflush(fd, TCIOFLUSH);\n        tcsetattr(fd, TCSANOW, &opt);\n\n        clear_custom_speed_flag(fd);\n\n        return fd;\n    }\n\n    void linux_uart_deinit(int fd)\n    {\n        int res;\n\n        res = close(fd);\n        if (res < 0)\n            fprintf(stderr, \"uart close fd(%d) err:%s\\n\", fd, strerror(errno));\n        else\n            fd = -1;\n    }\n    ```\n\n\n### PWM\n\n> pwm0 被锁在屏幕背光了，目前在系统上还没有开 debugfs 或 sysfs 接口去控制。\n\n以 pwm1 示意\n\n```bash\necho 1 > /sys/class/pwm/pwmchip0/export\necho 4167 > /sys/class/pwm/pwmchip0/pwm1/period\necho 2084 > /sys/class/pwm/pwmchip0/pwm1/duty_cycle\necho 1 > /sys/class/pwm/pwmchip0/pwm1/enable\n```\n\n### I2C\n\n使用 i2c-tools 工具包，可使用 i2cdetect -y 0 来查看 i2c 总线上的设备。\n\n```bash\nroot@AXERA:~# i2cdetect -y -r 0\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:                         -- -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- 21 -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- 36 -- -- -- -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- --\nroot@AXERA:~#\n```\n\n这里 **0x21** 和 **0x36** 就代表的板子在 cam0 这个排线上的 /dev/i2c-0 设备存在某个摄像头的 i2c 设备，而读写可用 i2cget 和 i2cset 命令，与其他芯片皆为同理。\n\n### SPI\n\n可参考右边同理事例：[为 AW V831 配置 spidev 模块，使用 py-spidev 进行用户层的 SPI 通信。](https://www.cnblogs.com/juwan/p/14341406.html)\n\n```\nroot@AXERA:~# ./spidev_test -D /dev/spidev1.0 -v\nspi mode: 0x0\nbits per word: 8\nmax speed: 500000 Hz (500 KHz)\nTX | FF FF FF FF FF FF 40 00 00 00 00 95 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF F0 0D  | ......@....�..................�.\nRX | FF FF FF FF FF FF 40 00 00 00 00 95 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF F0 0D  | ......@....�..................�.\nroot@AXERA:~# ./spidev_test -D /dev/spidev1.0 -v\nspi mode: 0x0\nbits per word: 8\nmax speed: 500000 Hz (500 KHz)\nTX | FF FF FF FF FF FF 40 00 00 00 00 95 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF F0 0D  | ......@....�..................�.\nRX | FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  | ................................\nroot@AXERA:~# ./spidev_test -D /dev/spidev1.0 -v\nspi mode: 0x0\nbits per word: 8\nmax speed: 500000 Hz (500 KHz)\nTX | FF FF FF FF FF FF 40 00 00 00 00 95 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF F0 0D  | ......@....�..................�.\nRX | FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  | ................................\n```\n\n### CHIP ID\n\n获取芯片唯一的 id 码。\n\n```\ncat /proc/ax_proc/uid\n```\n\n### ADC（暂未支持）\n\n.. details::点击查看\n\n    硬件上支持，但软件上目前还没写调试工具配合。\n    可参考外围开发手册，这需要专用的代码控制，目前还没有全部补充完。\n\n    1. 设置 THM 寄存器\n    2. 中间需要 delay 一段时间，否则读取出来的值，可能不对.\n    3. 0x2000028 寄存器读取出来的值 DATA\n    4. DAT 和 voltage 的对应关系，voltage = DATA / 1024 * VREF(1.8V)\n    5. 如果读取 chan1/2/3/4，需要读取 0x200002c，0x2000030，0x2000034，0x2000038\n\n    使能 ADC 通道\n    devmem 0x2000020 32 0x1000 //chan0\n    devmem 0x2000020 32 0x800 //chan1\n    devmem 0x2000020 32 0x400 //chan2\n    devmem 0x2000020 32 0x200 //chan3\n    devmem 0x2000020 32 0x100 //chan4\n\n    devmem 0x200002c\n    devmem 0x2000030\n    devmem 0x2000034\n    devmem 0x2000038\n\n### 出厂测试脚本\n\n.. details::点击可查看产品出厂测试时用的 Python 测试脚本\n    ```python\n    test_flag = False\n\n    try:\n        from gpiod import chip, line, line_request\n        config = None # rpi is default value A 0\n        def gpio(gpio_line=0, gpio_bank=\"a\", gpio_chip=0, line_mode = line_request.DIRECTION_OUTPUT):\n            global config\n            if config != None and gpio_line in config:\n                gpio_bank, gpio_chip = config[gpio_line]\n            l, c = [32 * (ord(gpio_bank.lower()[0]) - ord('a')) + gpio_line, chip(\"gpiochip%d\" % gpio_chip)]\n            tmp = c.get_line(l)\n            cfg = line_request() # led.active_state == line.ACTIVE_LOW\n            cfg.request_type = line_mode # line.DIRECTION_INPUT\n            tmp.request(cfg)\n            tmp.source = \"GPIO chip %s bank %s line %d\" % (gpio_chip, gpio_bank, gpio_line)\n            return tmp\n        def load(cfg=None):\n            global config\n            config = cfg\n    except ModuleNotFoundError as e:\n        pass\n\n    key = gpio(21, gpio_chip=2, line_mode = line_request.DIRECTION_INPUT)\n    led0 = gpio(4, gpio_chip=2, line_mode = line_request.DIRECTION_OUTPUT)\n    led1 = gpio(5, gpio_chip=2, line_mode = line_request.DIRECTION_OUTPUT)\n\n    import time\n    import ifcfg\n    import os\n\n    def check_ifconfig():\n        result = []\n        for name, interface in ifcfg.interfaces().items():\n            if name in ['eth0', 'wlan0'] and interface['inet']:\n                result.append(name)\n        return result\n\n    try:\n        if (0 == key.get_value()):\n            os.system(\"export LD_LIBRARY_PATH=/opt/lib:LD_LIBRARY_PATH && /opt/bin/sample_vin_vo -c 2 -e 1 -s 0 -v dsi0@480x854@60 &\")\n            led1.set_value(1)\n            while True:\n                led0.set_value(1)\n                time.sleep(0.2)\n                led0.set_value(0)\n                time.sleep(0.2)\n                tmp = check_ifconfig()\n                if len(tmp) > 1:\n                    led0.set_value(0)\n                    led1.set_value(0)\n                    test_flag = True\n                    break\n            while (0 == key.get_value()):\n                time.sleep(0.2)\n            os.system(\"aplay /home/res/boot.wav\")\n            led0.set_value(1)\n            led1.set_value(1)\n            import pyaudio\n            chunk = 1024      # Each chunk will consist of 1024 samples\n            sample_format = pyaudio.paInt16      # 16 bits per sample\n            channels = 2      # Number of audio channels\n            fs = 44100        # Record at 44100 samples per second\n            p = pyaudio.PyAudio()\n            stream = p.open(format=sample_format,\n                            channels = channels,\n                            rate = fs,\n                            frames_per_buffer = chunk,\n                            input = True, output = True)\n            while (1 == key.get_value()):\n                data = stream.read(chunk, exception_on_overflow = False)\n                stream.write(data)\n            while (0 == key.get_value()):\n                time.sleep(0.2)\n            os.system('killall sample_vin_vo')\n            os.system('killall sample_vin_vo')\n            # Stop and close the Stream and PyAudio\n            stream.stop_stream()\n            stream.close()\n            p.terminate()\n    except Exception as e:\n        print(e)\n    finally:\n        if test_flag:\n            led0.set_value(0)\n            led1.set_value(0)\n\n    '''\n\n    import pyaudio\n    try:\n        chunk = 1024      # Each chunk will consist of 1024 samples\n        sample_format = pyaudio.paInt16      # 16 bits per sample\n        channels = 2      # Number of audio channels\n        fs = 44100        # Record at 44100 samples per second\n        time_in_seconds = 300\n        p = pyaudio.PyAudio()\n        stream = p.open(format=sample_format,\n                        channels = channels,\n                        rate = fs,\n                        frames_per_buffer = chunk,\n                        input = True, output = True)\n        for i in range(0, int(fs / chunk * time_in_seconds)):\n            data = stream.read(chunk)\n            stream.write(data)\n    finally:\n        # Stop and close the Stream and PyAudio\n        stream.stop_stream()\n        stream.close()\n        p.terminate()\n\n    '''\n    ```\n\n\n## 内置开箱应用\n\n### IPCDemo\n\n这是一个典型的 IPC 演示程序，对应的功能模块有：\n\n- ISP：负责从 Sensor 获取图像 RAW 数据并转为 YUV，最终分 3 路通道输出以上信息。\n- IVPS：图像视频处理模块。实现对视频图形进行一分多、Resize、Crop、旋转等功能。\n- VENC / JENC：视频/JPEG 编码输出。\n- Detect：支持人脸或结构化检测。\n- Web 显示：实现 H264 流的 Web 传输和提供 Web 方式查看实时视频。\n- RTSP 推流：实现 H264 流的 RTSP 封装以及传输。\n- 录像 TF 卡存储：封装 H264 流为 MP4 格式文件并保存至 TF 卡或者 FLASH 空间。\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=260625114&bvid=BV1me411T7g8&cid=837160730&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"max-width:640px; max-height:480px;\"> </iframe>\n</p>\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=688159412&bvid=BV1p24y1d7Te&cid=837167669&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"max-width:640px; max-height:480px;\"> </iframe>\n</p>\n\n#### 使用方法\n\n>**注意**：启动命令默认的镜头型号为 **gc4653** ，因不同的摄像头配置文件不一致，使用别的型号时需点击右侧[更换摄像头](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/faq_axpi.html#Q%EF%BC%9A%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2-os04a10-%E6%91%84%E5%83%8F%E5%A4%B4%EF%BC%9F)进行修改。\n\n在终端运行下面的命令即可启动软件，服务默认绑定到 0.0.0.0 地址，直接在浏览器输入 usb0 的 IP 即可访问，使用板子上其他 IP 也可以访问页面（例如：`192.168.233.1:8080`）.\n\n```bash\n/opt/bin/IPCDemo/run.sh /opt/bin/IPCDemo/config/gc4653_config.json\n```\n.. details::点击查看\n    输入启动命令后，终端会打印大量调试信息。\n    ![ipc](./../assets/ipc.jpg)\n\n访问页面后会弹出登录页面，点击登录后页面会弹出下图画面。\n\n![ipc-admin](./../assets/ipc-admin.jpg)\n\n#### 如何抓拍？如何录制？\n\n浏览器抓拍录制（web）\n\n- **抓拍图像**\n  \n软件经过上文的启动后显示画面，右下角有抓拍和录制的功能图标。\n用户可点击摄像头图标进行抓拍喜欢的场景，抓拍的照片浏览器会自动弹出进行下载方便用户查看存储。\n\n![ipc-web](./../assets/ipc-web.jpg)\n\n- **录制视频**\n\n点击右下角的录制图标，即可进入本地录制视频（mp4）模式，再次点击图标即录制完成结束。\n\n![ipc-mp4](./../assets/ipc-mp4.jpg)\n\n用户可在配置页面的`录像回放`选项预览视频进行下载到本地或删除的操作。\n\n![ipc-config](./../assets/ipc-config.jpg)\n\n>**注意**：\n>**20221017** 后的镜像默认打开了录制保存到`/opt/mp4`的目录下。\n>视频录制要储存到文件系统后才能打开，某种意义上用户也可以挂载网络路径来当监控录像使用。\n\n#### 人脸检测\n>基于上文的基础功能，IPCDemo 自身还附带其他一些功能应用.例如**：人脸检测、车牌识别**。\n\n使用前请参考上文使用命令行登录 IPC 网页，登录后先进行相机结构化配置，具体配置流程看下文。\n\n.. details::点击查看配置流程\n    接入页面后选择**配置**在**智能配置**里再进行**结构化配置**，用户可根据自己的需要进行勾选即可。\n\n    ![ipc-video](./../assets/ipc-video.jpg)\n\n设置完成后回到预览页面即可进行人脸及人形识别，IPC 会自动框出识别人脸并且截取人脸的图片，可在预览页面下方点击截取图样放大查看附带信息。\n- 左侧：人脸检测 右侧：人形检测\n  \n<html>\n  <img src=\"./../assets/ipc-model.jpg\" width=45%>\n  <img src=\"./../assets/ipc-person.jpg\" width=45%>\n</html>\n\n#### 车牌识别\n\n使用前请参考上文基础功能使用命令行登录网页，再进行**结构化配置**勾选车牌所需的检测画框即可。\n\n.. details::点击查看 IPC 配置流程\n    接入页面后选择**配置**在**智能配置**里再进行**结构化配置**，用户可根据自己的需要进行勾选即可。\n\n    ![ipc-video](./../assets/ipc-video.jpg)\n\n设置完成即可回到预览页面进行车牌识别，IPC 会自动框出识别到得车牌及读取车牌数字信息，用户可在预览下方点击图片放大查看截取到车牌图片及信息。\n\n![ipc-car](./../assets/ipc-car.jpg)\n\n#### 人体关键点\n\n> 这是一个基于 IPCDemo 的人体关键点开箱示例（暂未开放）\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=773227207&bvid=BV1B14y1Y7A4&cid=837154353&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"max-width:640px; max-height:480px;\"> </iframe>\n</p>\n\n### rtsp\n\n>**rtsp**：也称实时流传输协议，该协议定义了一对多应用程序如何有效地通过 IP 网络传送多媒体数据。\n\n**VLC Media Player**：[点击下载](https://www.videolan.org/vlc/)\n\n使用 RTSP 传送数据前，我们需要先认识工具 `VLC Media Player`。\n\n.. details::点我查看 VLC Media Player 介绍\n    VLC Media Player（VLC 多媒体播放器），是一款可播放大多数格式，而无需安装编解码器包的媒体播放器，以及支持多平台使用、支持 DVD 影音光盘，VCD 影音光盘及各类流式协议。\n\n    ![vl-yolov5s](./../assets/vlc-yolov5s.jpg)\n\n\n运行命令后终端会弹出调试信息，打开 `VLC Media Player` 进行配置网络串流后即可看到画面效果。\n\n```bash\n/home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh\n```\n \n.. details::点击查看终端运行图\n    ![vlr-run](./../assets/vlc-run.jpg)\n\n.. details::点我查看 VLC Media Player 配置步骤\n    打开后在上方选择**媒体**后选择**打开网络串流**进到配置画面。\n    ![vlc](./../assets/vlc.jpg)\n    在网络页面输入**网络 URL ：`rtsp://192.168.233.1:8554/axstream0`**，\n    勾选下方更多选项进行调整缓存后点击下方播放即可。\n    ![vlc-urt](./../assets/vlc-urt.jpg)\n\n- 双屏效果如下图示例：\n  \n<html>\n  <img src=\"./../assets/rtsp-display.jpg\" width=48%>\n  <img src=\"./../assets/rtsp-axpi.jpg\" width=48%>\n</html>\n\n>**注意**：默认摄像头为 os04a10 型号不同请移步[Maix-III 系列 AXera-Pi 常见问题(FAQ)](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/faq_axpi.html)更换参数。\n#### ffplay\n\n工具除了 `VCL` 还可以直接使用 `ffplay`。\n**ffplay** :[点击下载](https://dl.sipeed.com/shareURL/MaixIII/AXera/09_Software_tool)\n\n```bash\nsudo apt install ffmpeg\nffplay rtsp://192.168.233.1:8554/axstream0 -fflags nobuffer\n```\n\n### ONVIF ODM\n\n>在 **20221111** 后的更新的镜像系统，内置了按键录像 mp4 和支持更换 yolov5s 人脸/物体检测模型以及对 ODM（ONVIF）进行支持。\n\n**ONVIF Device Manager**：[点击下载](https://sourceforge.net/projects/onvifdm/)\n\n.. details::点击查看 ODM 软件介绍\n\n    ONVIF 协议作为全球性的网络视频监控开放接口标准，推进了网络视频在安防市场的应用，特别是促进了高清网络摄像头的普及和运用。 越来越多的前端 IPC 厂家和后端 NVR 及存储提供商加入进来。而 ONVIF Device Manager 是 ONVIF 官方基于协议提供的免费第三方的 ONVIF 协议测试工具，与上文的 VLC 相比性能不同，但 ODM 的内容形式更加多样丰富。\n    \n   ![odm](./../assets/odm.jpg)\n\n在终端运行下方命令，设备屏幕会跳出 yolov5s 模型运行画面，接着我们来配置 `ODM` 实现 PC 端显示。\n\n>**注意**：ODM 受网络影响较大，如果有卡顿现象把网络更换成以太网即可。\n>默认摄像头为 os04a10 如型号不同请移步[Maix-III 系列 AXera-Pi 常见问题(FAQ)](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/faq_axpi.html)更换参数。\n\n.. details::点击设备运行效果图\n    ![odm-mipi](./../assets/odm-mipi.jpg)\n\n```bash\n/home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh\n```\n\n打开我们下载好的 `ODM` 软件点击左侧白框的 `Refresh` 按键扫描设备，扫描成功会显示 `IP-Camera` 方框点击后选择下方的 `Live video` 即可在 PC 端看到画面。\n\n![odm-config](./../assets/odm-config.jpg)\n\n还可通过下方命令去查看文件配置：\n\n```bash\n cd /home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/\n ls -l\n```\n\n- **更换模型**\n>20221116 后更新的镜像已在 `run.sh` 内置了不同摄像头参数的源码。\n>20221111 镜像内置 yolov5s 的人脸/物体检测模型，可使用以下命令更改运行脚本内容更换模型。\n\n``` bash\nnano /home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/run.sh\n```\n\n.. details::点击查看修改操作示例\n    运行后会显示 `run.sh` 的编辑页面，对当前启动的模型进行注释或调用其他模型即可，\n    按 **ctrl+X** 键后会提示是否保存修改内容。\n    ![model-save](./../assets/model-save.jpg)\n    根据提示按下 **Y** 键保存，界面会显示修改内容写入的文件名按**回车**键确定，\n    再次运行 `run.sh` 脚本即可看到模型更换成功。\n    ![model-file](./../assets/model-file.jpg)\n    除了上方通过命令修改 `run.sh` 更换还可以通过 `MdbaXterm` 工具查看 `/home/examples/vin_ivps_joint_venc_rtsp_vo_onvif_mp4v2/` 目录下的`run.sh`脚本文件直接修改保存。\n\n- **按键录制 MP4**\n运行 `run.sh` 期间可按下板载的按键 `user` 进行录制视频，按下后 **LED0** 会亮起代表开始录制 MP4，\n\n.. details::点击查看按键示意图\n    ![odm-mp4](./../assets/odm-mp4.jpg)\n\n终端界面会显示下图 `delete file`，当录制完成后再次按下按键停止录制而 LED0 会灭掉，\n\n![odm-adb](./../assets/odm-adb.png)\n\n录制完成的 MP4 文件可在 **`home/examples/`** 目录下查看。\n\n![mp4-file](./../assets/mp4-file.png)\n\n### PP_human\n\n>**20221116** 后更新的系统镜像已内置了 `pp_human` 人体分割应用。\n>还内置了不同摄像头的参数命令在 `run.sh`，只需要调用注释相应源码即可使用。\n\n运行下方的命令后终端会输出调试信息，设备屏幕会显示运行画面。\n\n```bash\n/home/examples/vin_ivps_joint_vo_pp_human_seg/run.sh\n```\n![pp_human](./../assets/pp_human.jpg)\n可使用下方命令进入图形化页面，对 `run.sh` 里不同摄像头参数的源码进行调用或注释。\n\n```bash\nnano /home/examples/vin_ivps_joint_vo_pp_human_seg/run.sh\n```\n\n.. details::点击查看图形化页面\n    修改后按 **ctrl+x** 键会进入保存页面，后续按终端提示操作即可。\n    ![pp_human_adb](./../assets/pp_humana_adb.png)\n\n### uvc_vo\n\n**usb-uvc-gadget**：[点击查看相关仓库](https://github.com/junhuanchen/usb-uvc-gadget)\n\n>**20221123** 镜像内置了 uvc vo 应用，并且还可以在手机端软件使用。\n>目前应用还处于不稳定的状态，第一次启动程序或供电不足会导致设备重启，后续会慢慢优化！\n\n使用前需要准备两条 USB type_c  的数据线以及一条双 type_c 口的数据线。\n把设备的 **UART** 及 **OTG** 口用`USB type-c` 线全部接入 `PC` 端，再运行下方命令终端会弹出无报错调试信息。\n\n```bash\n/home/examples/vin_ivps_joint_venc_uvc_vo/run.sh\n```\n\n.. details::点击查看终端示例图\n    ![uvc_adb](./../assets/uvc_adb.png)\n\n打开 `PC` 端自带相机应用即可在设备屏幕以及 `PC` 端观察到模型检测画面。\n\n![uvc_vo](./../assets/uvc_vo.jpg)\n\n可以使用以下的命令行更换尾缀 `start` 开启、`stop` 停止、`restore` 重启来对 `uvc` 程序进行操作。\n\n```bash\n/home/usb-uvc-gadget/uvc-gadget.sh #start/stop/restore\n```\n\n- **手机端虚拟摄像头**\n\nUVC 也能在安卓手机端的 `app` 上当虚拟摄像头使用，使用前在软件商店下载好 **USB 摄像头专业版** 软件。\n\n.. details::USB 摄像头专业版软件介绍\n    USB 摄像头是一款支持 USB 摄像头、适配采集卡等设备通过 OTG 连接手机并驱动设备展示画面。\n\n    ![uvc_usb](./../assets/uvc_usb.jpg)\n\n把双头 `type-c` 线的分别接上手机端以及设备的 OTG 口，运行上方命令后会自动连接。\n\n![uvc_phone](./../assets/uvc_phone.jpg)\n\n>**注意**：如果需要完全脱离电脑端用手机端供电的话，需要把 uvc 程序写入开机脚本即可。\n\n### ax-pipeline \n\n待更新"}, "/hardware/zh/maixIII/ax-pi/faq_axpi.html": {"title": "Maix-III 系列 AXera-Pi 常见问题（FAQ）", "content": "---\ntitle: Maix-III 系列 AXera-Pi 常见问题（FAQ）\n---\n\n## Q：供电不足怎么办？\n\nA：可以把两根 usb 口接上来供电，板子至少要 USB3.0 1A 的电流才能启动喔！（拉黑 USB2.0 500ma）\n\n## Q：被产品电了怎么办？\n\nA：最近冬天静电来了，产品要注意接地喔。\n\n## Q：如何更换 os04a10 摄像头？\n\nA：**一改参数，二改代码，以下述改动为例**：\n\n- 类似 sample_vin 这类命令改 `-c 0` 就可以启用 os04a10 摄像头，对应 `-c 2` 就是默认提供的 gc4653 摄像头。\n\n- 类似于改代码里的 `COMMON_SYS_CASE_E eSysCase = SYS_CASE_SINGLE_GC4653;` ，详细可看[components/libmaix/lib/arch/axpi/libmaix_cam/libmaix_cam.cpp#L93](https://github.com/sipeed/libmaix/blob/release/components/libmaix/lib/arch/axpi/libmaix_cam/libmaix_cam.cpp#L93)\n\n## Q：运行摄像头有关程序时报错 i2c_read: Failed to read reg: Remote I/O error.!？\n\nA：摄像头接线是否正确、检查摄像头配置是否与型号相匹配、参数是否修改、启动命令行输入是否出错、以及摄像头是否启动；如果以上都是正确的话，摄像头依旧报错就是硬件问题了。\n\n## Q：如何更换其他屏幕？\n\nA：目前默认只提供 5 寸屏幕，支持其他屏幕需要自行修改驱动代码和设备树，以及对应的应用层显示代码。\n\n## Q：运行 xxxx menuconfig 时遇到报错 locale.Error: unsupported locale setting !?\n\nA：可以使用 `sudo localedef -i en_US -f UTF-8 en_US.UTF-8` 恢复一下配置即可。\n\n## Q：运行 IPC ODM 命令时报错 VCEncInit:ERROR codecFormat NOT support by HW !?\n\nA：试着按复位键或者是插拔重启设备即可。\n\n## Q：运行程序后屏幕显示花屏？\n\nA：查看摄像头型号参数是否配置正确。\n\n## Q：运行 ODM 启动命令后报错 i2c_read: Failed to read reg: Remote I/O error.!？\n\nA：修改 `run.sh` 启动脚本里的摄像头参数，脚本默认参数是 os04a10 摄像头，更换为 gc4653 将 `-e 2 -v 0 -c 0` 修改为 `-v 0 -c 2` 即可。\n\n## Q：摄像头、屏幕画面反了倒过来了怎么解决？\n\nA：物理旋转。\n\n![fqa_video](./../assets/fqa_video_a.jpg)\n\n有装配外壳的 AXera-Pi 可参考以下图例：\n\n<html>\n      <img src=\"./../assets/fqa_video_b.jpg\" width=48%>\n      <img src=\"./../assets/fqa_video_c.jpg\" width=48%>\n    </html>\n\n## Q：运行命令后报错：Bus Error！？\n\n![fqa_bus](./../assets/fqa_bus.jpg)\n\nA：这种情况是 SD 卡质量问题导致掉卡，也就是镜像卡里面的程序崩掉了无法读取到。\n\n- 更换质量好一点的 SD 卡或官方购买镜像卡，可参照 `SD` 卡测试选购合适的卡[点击前往查看](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/flash_system.html#%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9-SD-%E5%8D%A1%EF%BC%9F)。\n\n## Q：使用 `ifconfig -a` 查看网络没有 eth0 ip 地址怎么解决？\n\nA：没有联网的话会直接看不到 ip 地址，查看下网线是否有接入、是否接稳了。\n   - 或使用 `dhclient eth0` 手动启动或参考文档[传送门](https://wiki.sipeed.com/hardware/zh/maixIII/ax-pi/basic_usage.html#%E6%9C%89%E7%BA%BF%E4%BB%A5%E5%A4%AA%E7%BD%91%EF%BC%88eth0%EF%BC%89%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95)重新配置 ip 获取地址。\n\n## Q：运行 uvc 命令后一直报错读取不到设备？\n\nA：这种情况一般会少数出现在 Windows 环境上，查看设备管理器是不是有什么显示异常驱动，卸载后即可使用。\n\n## Q：运行 uvc 命令后出现卡住现象？\n\nA：重启即可\n\n## Q：开机后 ifconfig 不显示 wlan0 怎么解决？\n\nA：可能是核心板与底板衔接松了，重新插拔核心板与底板可！\n\n## Q：使用 ssh 登陆后断开报错：packet_write_wait: Connection to 10.xxx.xxx.xxx port 22: Broken pipe！\n\nA: 运行一下`python3 -c \"import os, binascii; os.system('sed -i \\'/iface eth0 inet dhcp/ahwaddress ether {}\\' /etc/network/interfaces'.format(binascii.hexlify(bytes.fromhex(open('/proc/ax_proc/uid').read().split('0x')[1][:-5]),':').decode('iso8859-1'))) if os.system('grep \\'hwaddress ether\\' /etc/network/interfaces -q') != 0 else exit();\"` 后重启即可。"}, "/hardware/zh/maixzero/sense/maix_zero_sense.html": {"title": "M0sense 开发板", "content": "---\ntitle: M0sense 开发板\nkeywords: BL702 ,开发板\nupdate:\n  - date: 2022-11-08\n    version: v0.1\n    author: wonder\n    content:\n      - 初次编写文档\n---\n\n## 概述\n\nSipeed M0sense 是基于[博流智能科技](http://www.bouffalolab.com/)的 BL702 芯片所设计的一款 AIOT 开发板，主控芯片为 Risc-V 架构，支持低功耗蓝牙。板载一个 8P FPC 接口来连接 LCD 屏幕，额外配备了 1 个麦克风、1 个 RGB LED 和一颗六轴传感器芯片，引出了一路 USB 2.0 FS 到 Type-C 座子。\n\n购买链接：暂无\n\n渲染图：\n\n<img src=\"./assets/m0sense_1.png\" alt=\"m0sense_1.png\" width=30%>\n\n实物图：\n\n<div>\n  <img src=\"./assets/m0sense_outlook_top.png\" alt=\"m0sense_outlook_top.png\" width=40%>\n  <img src=\"./assets/m0sense_outlook_bot.png\" alt=\"m0sense_outlook_bot.png\" width=40%>\n</div>\n\n## 视频\n\nM1s Dock 和 M0Sense 总览； M0Sense 在 3:15 处开始，之前的为 M1s Dock 宣传视频.\n\n<iframe src=\"//player.bilibili.com/player.html?aid=559937139&bvid=BV1De4y117sP&cid=887814913&page=1&t=197\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" > </iframe>\n\n## 特点\n\n- 主芯片 BL702 RISC-V 144MHz\n- 支持蓝牙规范 5.0/ 蓝牙低功耗 BLE\n- 板载显示屏接口（可选配 0.68 寸 80x160 显示屏）\n- 板载 1 个模拟麦克风、1 个 RGB LED、1 个 IMU\n- 引出一路 USB 2.0 FS 到 USB Type-C 接口\n\n## 参数\n\n<table>\n    <thead>\n        <tr>\n            <th colspan = \"2\" > M0sense 开发板 </th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td rowspan=\"6\" style=\"white-space:nowrap\">主控 BL702 处理器</td>\n    </tr>\n    <tr>\n        <td>32 bits RISC-V with FPU (Max Freq 144MHz)</td>\n    </tr>\n    <tr>\n        <td>132KB RAM，192KB ROM, 512KB Flash</td>\n    </tr>\n    <tr>\n        <td>\n        · 2 个 32 位通用定时器     <br>\n        · 8 个 DMA 通道           <br>\n        · 1 个 SPI 主/从机        <br>\n        · 2 个 UART              <br>\n        · 1 个 I2C 主机           <br>\n        · 1 个 I2S 主/从机        <br>\n        · 5 个 PWM 通道           <br>\n        · 12 位通用 ADC           <br>\n        · 10 位通用 DAC           <br>\n        </td>\n    </tr>\n    <tr>\n        <td>无线：<br>\n            · 支持 2.4Ghz 蓝牙规范 V5.0<br>\n            · 蓝牙低功耗 1Mbps 和 2Mbps\n        </td>\n    </tr>\n    <tr>\n        <td>\n            USB 2.0 FS 引出到 USB Type-C 接口用来下载固件\n        </td>\n    </tr>\n    <tr>    \n        <td rowspan=\"6\" style=\"white-space:nowrap\"> 板载部件 </td>\n    </tr>\n    <tr>\n        <td>显示屏接口（可选配 0.96 寸 80x160 显示屏）</td>\n    </tr>\n    <tr>\n        <td>板载 1 个模拟麦克风</td>\n    </tr>\n    <tr>\n        <td>1 个 RGB LED</td>\n    </tr>\n    <tr>\n        <td>1 个 6 轴 IMU（QMI8658A）</td>\n    </tr>\n    <tr>\n        <td>陶瓷天线</td>\n    </tr>\n    <tr>    \n        <td rowspan=\"5\" style=\"white-space:nowrap\"> 其他说明 </td>\n    </tr>\n    <tr>\n      <td>\n        3D 模型文件下载：<a href=\"https://dl.sipeed.com/shareURL/Maix-Zero/Maix-Zero/5_3D_file\">点击跳转</a>\n      </td>\n    </tr>\n    <tr>\n        <td>外部供电需求 TYPE-C 接口：5V±10% 0.5A</td>\n    </tr>\n    <tr>\n        <td>温升: &lt;30K</td>\n    </tr>\n    <tr>\n        <td>工作温度范围:-10℃ ~ 65℃</td>\n    </tr>\n    </tbody>\n</table>\n\n<img src=\"./assets/m0sense_size.png\" alt=\"m0sense_size\" width=55%>\n\n## 引脚\n\n<img src=\"./assets/m0sense_pinmap.png\" alt=\"m0sense_pinmap\" width=75%>\n\n## 对比\n\n<table>\n  <thead>\n    <tr>\n      <th>项目</th>\n      <th>Arduino Nano 33 BLE SENSE</th>\n      <th>Sipeed M0sense</th>\n    </tr>\n  </thead>\n  <body>\n    <tr>\n      <td> MCU </td>\n      <td>nRF52840 (Cortex M4)</td>\n      <td>BL702 (RV32)</td>\n    </tr>\n    <tr>\n      <td>Freq</td>\n      <td>64MHz</td>\n      <td>144MHz</td>\n    </tr>\n    <tr>\n      <td>SRAM</td>\n      <td>256KB</td>\n      <td>132KB</td>\n    </tr>\n    <tr>\n      <td>蓝牙</td>\n      <td>支持</td>\n      <td>支持</td>\n    </tr>\n    <tr>\n      <td>IIC/UART/SPI</td>\n      <td>有</td>\n      <td>有</td>\n    </tr>\n    <tr>\n      <td>LED</td>\n      <td>单色</td>\n      <td>RGB 三色</td>\n    </tr>\n    <tr>\n      <td>MIC</td>\n      <td>有</td>\n      <td>有</td>\n    </tr>\n    <tr>\n      <td>IMU</td>\n      <td>有</td>\n      <td>有</td>\n    </tr>\n    <tr>\n      <td>其他传感器</td>\n      <td>APDS9960，LPS22HB，HTS221</td>\n      <td></td>\n    </tr>\n    <tr>\n      <td>LCD</td>\n      <td></td>\n      <td>可选 0.96 寸屏幕</td>\n    </tr>\n    <tr>\n      <td>USB</td>\n      <td>有</td>\n      <td>有</td>\n    </tr>\n    <tr>\n      <td>尺寸</td>\n      <td>45mm x 18mm</td>\n      <td>23mm x 18mm</td>\n    </tr>\n    <tr>\n      <td>模型平台</td>\n      <td>TFLite-Micro + edge impulse</td>\n      <td>TinyMaix + MaixHub</td>\n    </tr>\n    <tr>\n      <td>价格</td>\n      <td>$40</td>\n      <td>$4</td>\n    </tr>\n  </body>\n</table>\n\n## 软件描述\n\n<table>\n    <thead>\n        <tr>\n            <th colspan = \"2\" > M0sense </th>   \n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n          <td>OS</td>\n          <td>FreeRTOS</td>\n        </tr>\n        <tr>\n          <td>开发方式</td>\n          <td>· 原生 C SDK<br>· MaixHAL C 模块<br>· pikascript 脚本</td>\n        </tr>\n        <tr>\n          <td>固件下载</td>\n          <td>·  USB虚拟串口下载<br>· USB虚拟磁盘拖拽更新</td>\n        </tr>\n        <tr>\n          <td>AI 推理框架</td>\n          <td>TinyMaix 推理框架</td>\n        </tr>\n        <tr>\n          <td>AI 模型下载</td>\n          <td>· <a herf=\"https://maixhub.com/\">MaixHub</a> 下载。支持 关键词唤醒，手势识别 等模型</td>\n        </tr>\n        <tr>\n          <td>Sipeed 参考示例</td>\n          <td>· https://github.com/sipeed</td>\n        </tr>\n    </tbody>\n</table>\n\n## 补充资料\n\n- [规格书](https://dl.sipeed.com/shareURL/Maix-Zero/Maix-Zero/1_Specification)\n- [原理图](https://dl.sipeed.com/shareURL/Maix-Zero/Maix-Zero/2_Schematic)\n- [位号图](https://dl.sipeed.com/shareURL/Maix-Zero/Maix-Zero/3_Bit_number_map)\n- [尺寸图](https://dl.sipeed.com/shareURL/Maix-Zero/Maix-Zero/4_Dimensional_drawing)\n- [3D 模型文件](https://dl.sipeed.com/shareURL/Maix-Zero/Maix-Zero/5_3D_file)\n\n---\n\n- [SDK](https://github.com/bouffalolab/bl_mcu_sdk) (Github) \n- 交流 QQ 群：`592731168` 。[点我加群](https://jq.qq.com/?_wv=1027&k=uyKNhTeu)\n- 论坛：[bbs.sipeed.com](https://bbs.sipeed.com/)\n\n## 注意事项\n\n<table>\n    <tr>\n        <th>项目</th>\n        <th>注意事项</th>\n    </tr>\n    <tr>\n        <td>静电防护</td>\n        <td>请避免静电打到 PCBA 上；接触 PCBA 之前请把手的静电释放掉</td>\n    </tr>\n    <tr>\n        <td>容忍电压</td>\n        <td> 每个 GPIO 的工作电压已经在原理图中标注出来，请不要让 GPIO 的实际工作的电压超过额定值，否则会引起 PCBA 的永久性损坏 </td>\n    </tr>\n    <tr>\n        <td>FPC 座子</td>\n        <td>在连接 FPC 软排线的时候，谲确保排线无偏侈地完整地插入到排线中</td>\n    </tr>\n    <tr>\n        <td>插拔</td>\n        <td>请完全断电后才进行插拔操作</td>\n    </tr>\n    <tr>\n        <td>避免短路</td>\n        <td>请在上电过程中，避免任何液体和金属触碰到 PCBA 上的元件的焊盘，否则会导致路，烧毁 PCBA</td>\n    </tr>\n</table>\n\n## 联系\n\nM0sense 可以在多种场景实现客户不同方面的需要，技术支持和商业合作请联系使用邮箱 [support@sipeed.com](support@sipeed.com)"}, "/hardware/zh/maix/core_module.html": {"title": "Sipeed M1/M1W", "content": "---\ntitle: Sipeed M1/M1W\nkeywords: maixpy, k210, AIOT, 边缘计算, M1/M1W\ndesc: maixpy  Sipeed M1/M1W \n---\n\n## M1/M1W\n\nM1/M1W模块是基于嘉楠堪智科技的边缘智能计算芯片 K210 (RISC-V架构) 设计的一款AIOT模块。主控芯片内置64位双核高性能低功耗处理器，每个核都有浮点运算单元(FPU) ,具备卷积人工神经网络硬件加速器(KPU)和快速傅里叶变换加速器(FFT)、搭载现场可编程IO阵列(FPIOA)，支持多种主流Al编程框架。M1W模块内置标准802.11 b/g/n协议的ESP8285 WiFi芯片，可让模块轻松联网。\n\n![M1/M1W](./assets/m1_m1w/M1_Dan.png)\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n\n## M1/M1W 参数\nM1/M1W Al模块系统主要由电源(3 Channel DC-DC)、Flash芯片(16M)电路、K210芯片和WiFi芯片四部分组成。K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM。模块在Al机器视觉、听觉性能方便表现突出，芯片总算力可达1TOPS，芯片内置多种硬件加速单元(KPU、FPU，FFT等)，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。M1W模块嵌入无线WiFi功能，可轻松实现联网控制。\n\n\n<p><img loading=\"M1/M1W\" src=\"./assets/m1_m1w/M1_vs_M1W.png\" width = 500 ></p>\n<p><img loading=\"M1/M1W\" src=\"./assets/m1_m1w/M1_pin.png\" width = 500 ></p>\n<p><img loading=\"M1/M1W\" src=\"./assets/m1_m1w/M1W_2.png\" width=500 ></p>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>神经网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块软件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>操作系统</td><td>FreeRtos and Standrad development ki</td>\n    </tr>\n    <tr>\n        <td>编程语言</td><td>MicroPython</td>\n    </tr>\n    <tr>\n        <td>机器视觉</td><td>支持卷积神经网络</td>\n    </tr>\n    <tr>\n        <td>机器听觉</td><td>高性能音频处理器(APU)</td>\n    </tr>\n    <tr>\n        <td>开发环境</td><td>串口终端、MaixPy IDE</td>\n    </tr>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块硬件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>尺寸</td><td>25.4*25.4*3.3mm</td>\n    </tr>\n    <tr>\n        <td>引脚</td><td>72 PIN全引脚引出</td>\n    </tr>\n    <tr>\n        <td>供电电压</td><td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td><td>-30°C ~85°C</td>\n    </tr>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">Wi-Fi功能参数</th>\n        </tr>\n    </thead>\n    <tr>\n        <td>主控</td>\n        <td>ESP8285</td>\n    </tr>\n    <tr>\n    <td>无线标准</td><td>802.11 b/g/n</td>\n    </tr>\n    <tr>\n    <td>频率范围</td><td>2400Mhz - 2483.5Mhz</td>\n    </tr>\n    <tr>\n    <td>天线</td><td>标准IPEX接口天线</td>\n    </tr>\n    <tr>\n    <td>Wi-Fi模式</td><td>支持Station / SoftAP /SoftAP+Station</td>\n    </tr>\n</table>\n\n> 为了让Al模块能应用于更多场合，Sipeed团队还推出了无WiFi功能版本的M1模块，如果用户无需使用无线联网的功能，可以选择我们的M1模块。M1模块和M1W模块的AI功能一致，使用方法基本相同，主要区别就是M1W模块比M1模块多了WiFi功能。\n\n## 资料下载\n\n芯片 K210 Datasheet: [Kendryte 官网](https://canaan-creative.com/)\nM1W 资料下载: [dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-M1&M1W)\n\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/index.html": {"title": "Sipeed Hardware", "content": "---\ntitle: Sipeed Hardware\nkeywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载\ndesc: 矽速科技的硬件资料站\n---\n\n# Maix—I\n\n[English](./../../en/maix/index.html)\n\n## K210 核心模组\n- [M1/M1w](./core_module.html)\n- [M1n](./core_modules/k210_core_modules.html)\n\n## Maix 系列开发板\n\n\n<table role=\"table\" class=\"center_table\">\n  <tbody>\n    <tr>\n      <th scope=\"col\">型号</th>\n      <th scope=\"col\">图片</th>\n    </tr>\n    <tr>\n      <td> Maix Go</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_go.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_go/Go.jpg\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Dock</td>\n      <td><a href=\"./maixpy_develop_kit_board/Maix_dock.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_dock/Dan_Dock.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Duino</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_duino.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_duino/maixduino_0.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Bit</td>\n      <td> <a href=\"./maixpy_develop_kit_board/maix_bit.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_bit/Bit.png\" width=\"260\"></a> </td>\n    </tr>\n    <tr>\n      <td>Maix Cube</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_cube.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_cube/maix_cube.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Amigo</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_Amigo.html\" target=\"_blank\"><img src=\"./assets/dk_board/maxi_amigo/maix_amigo_0.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n    <td>Maix nano</td>\n    <td><a href=\"./maixpy_develop_kit_board/maix_nano.html\"><img src=\"./assets/dk_board/maix_nano/maix_nano.jpg\" width=\"260\" alt=\"Maxi nano\"></a></td>\n    </tr>\n  </tbody>\n</table>\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/m1s/m1s_module.html": {"title": "M1s 模组", "content": "---\ntitle: M1s 模组\nkeywords: M1s ,模组\nupdate:\n  - date: 2022-11-09\n    version: v0.2\n    author: wonder\n    content:\n      - 修改部分描述错误\n      - 增加注意事项\n      - 增加软件描述栏目\n  - date: 2022-10-18\n    version: v0.1\n    author: wonder\n    content:\n      - 初次编写文档\n---\n\n## 模组概述\n\nSipeed M1s 模组是基于[博流智能科技](http://www.bouffalolab.com/)的 BL808 芯片所设计的一款 AIOT 模组，主控芯片包含三个核心，具有 WiFi/BT/BLE/Zigbee 等无线互联单元，包含多个 CPU 以及音频编码译码器、视频编码译码器和 AI 硬件加速器（BLAI-100），适用于各种高性能和低功耗应用领域。\n\n购买链接：[淘宝](https://item.taobao.com/item.htm?id=691108452443)\n\n<img src=\"./assets/m1s_module/m1s_module_outlook.png\" alt=\"m1s_module_outlook\" width=35%>\n\n## 模组特点\n\n- 主芯片 BL808 RV64 480MHz + RV32 320MHz + NPU BLAI 100GOPS\n- 板载 SPI FLASH（默认 16MByte）\n- 支持2.4G WIFI / BT / BLE\n- 支持 IPEX 一代天线座子和 PCB 板载天线\n- 邮票孔引出所有 IO\n\n## 模组参数\n\n<table>\n    <thead>\n        <tr>\n            <th colspan = \"2\" > M1s 模组 </th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td rowspan=\"8\" style=\"white-space:nowrap\">主控 BL808 处理器</td>\n    </tr>\n    <tr>\n        <td>三核异构RISC-V CPUs：<br>· RV64GCV 480MHz <br>· RV32GCP 320MHz <br>· RV32EMC 160MHz</td>\n    </tr>\n    <tr>\n        <td>AI NN 通用硬件加速器：<br>· BLAI-100 用于视频/音频检测/识别，100GOPS 算力</td>\n    </tr>\n    <tr>\n        <td>内置 768KB SRAM + 64MB UHS PSRAM</td>\n    </tr>\n    <tr>\n        <td>编解码：<br>- MJPEG and H264(Baseline/Main)<br>- 1920x1080@30fps + 640x480@30fps\n        </td>\n    </tr>\n    <tr>\n        <td>接口：<br>- 摄像头接口 ：DVP 和 MIPI-CSI<br>- 显示接口：SPI、DBI、DPI(RGB)</td>\n    </tr>\n    <tr>\n        <td>无线：<br>- 支持 Wi-Fi 802.11 b/g/n<br>- 支持 Bluetooth 5.x Dual-mode(BT+BLE)<br>- 支持 Wi-Fi / 蓝牙 共存</td>\n    </tr>\n    <tr>\n      <td>USB 2.0 HS OTG</td>\n    </tr>\n    <tr>    \n        <td rowspan=\"3\" style=\"white-space:nowrap\"> 板载部件 </td>\n    </tr>\n    <tr>\n        <td>板载 SPI FLASH（可选容量）</td>\n    </tr>\n    <tr>\n        <td>支持 IPEX 一代天线座子和 PCB 板载天线</td>\n    </tr>\n    </tbody>\n    <tr>    \n        <td rowspan=\"6\" style=\"white-space:nowrap\"> 其他说明 </td>\n    </tr>\n    <tr>\n        <td>\n        尺寸：31mm (L) x 18mm (W)\n        </td>\n    </tr>\n    <tr>\n      <td>\n        3D 模型文件下载：<a href=\"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/5_3D_file\">点击跳转</a>\n      </td>\n    </tr>\n    <tr>\n        <td>外部供电需求：<br>VDDIO4/VDDIO3/VDDIO1/ 和 3V3 这几路电源必须给模块提供才能正常工作</td>\n    </tr>\n    <tr>\n        <td>温升: &lt;30K</td>\n    </tr>\n    <tr>\n        <td>工作温度范围:-10℃ ~ 65℃</td>\n    </tr>\n    </tbody>    \n</table>\n\n<img src=\"./assets/m1s_module/m1s_module_size.png\" alt=\"m1s_module_size\" width=35%>\n\n## 引脚分布\n\n<img src=\"./assets/m1s_module/m1s_pins.png\" alt=\"m1s_pins\" width=55%>\n\n## 产品对比\n\n<table>\n<thead>\n<tr>\n  <th style=\"text-align:left\">项目</th>\n  <th style=\"text-align:left\">M1(K210)</th>\n  <th style=\"text-align:left\">M1s(BL808)</th>\n  <th style=\"text-align:left\">ESP32-S3-WROOM-N16R8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td style=\"text-align:left\">CPU</td>\n  <td style=\"text-align:left\">RV64@400MHz x2</td>\n  <td style=\"text-align:left\">· RV64GCV@480MHz<br>· RV32GCP@320MHz<br>· RV32EMC@160MHz</td>\n  <td style=\"text-align:left;white-space:nowrap\">Xtensa LX7@240MHz x2</td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">RAM</td>\n  <td style=\"text-align:left\">8MB SRAM</td>\n  <td style=\"text-align:left;white-space:nowrap\">· 768KB SRAM <br>·  64MB UHS PSRAM(2000MHz)</td>\n  <td style=\"text-align:left\">· 512KB SRAM<br>· 8MB PSRAM</td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">Flash</td>\n  <td style=\"text-align:left\">16MB</td>\n  <td style=\"text-align:left\">16MB</td>\n  <td style=\"text-align:left\">16MB</td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">OS</td>\n  <td style=\"text-align:left\">· FreeRTOS<br>· No-mmu Linux</td>\n  <td style=\"text-align:left\">· FreeRTOS<br>· Linux</td>\n  <td style=\"text-align:left\">RTOS</td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">NPU</td>\n  <td style=\"text-align:left;white-space:nowrap\">230GOPS with limited OPS</td>\n  <td style=\"text-align:left;white-space:nowrap\">100GOPS with rich OPS</td>\n  <td style=\"text-align:left\"></td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">Camera</td>\n  <td style=\"text-align:left\">DVP, up to VGA</td>\n  <td style=\"text-align:left\">MIPI + DVP, up to 1080P h264</td>\n  <td style=\"text-align:left\">DVP</td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">Display</td>\n  <td style=\"text-align:left\">· SPI<br>· 8bits MCU LCD</td>\n  <td style=\"text-align:left\">· SPI<br>· 8bits MCU LCD<br>· RGB LCD</td>\n  <td style=\"text-align:left\">· SPI<br>· 8bits MCU LCD</td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">Audio</td>\n  <td style=\"text-align:left\">I2S</td>\n  <td style=\"text-align:left\">· I2S<br>· Analog Audio Input/Output</td>\n  <td style=\"text-align:left\">I2S</td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">Wireless</td>\n  <td style=\"text-align:left\"></td>\n  <td style=\"text-align:left\">WIFI+BLE+Zigbee</td>\n  <td style=\"text-align:left\">WIFI + BLE</td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">USB</td>\n  <td style=\"text-align:left\"></td>\n  <td style=\"text-align:left\">USB2.0 OTG HS</td>\n  <td style=\"text-align:left\">USB1.1 OTG</td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">Accelerator</td>\n  <td style=\"text-align:left\">FFT</td>\n  <td style=\"text-align:left\">· Scaler<br>·  OSD<br>·  MJPED<br>·  G2D<br>·  H264</td>\n  <td style=\"text-align:left\"></td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">Perpheral</td>\n  <td style=\"text-align:left\">UART, SPI, IIC</td>\n  <td style=\"text-align:left\">UART, SPI, IIC, SDIO ETH(RMII), ADC/DAC</td>\n  <td style=\"text-align:left\">UART, SPI, IIC, SDIO, ADC</td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">Size</td>\n  <td style=\"text-align:left\">25.4 x 25.4 mm</td>\n  <td style=\"text-align:left\">31 x 18 mm</td>\n  <td style=\"text-align:left\">25.5 x 18 mm</td>\n</tr>\n<tr>\n  <td style=\"text-align:left\">Price</td>\n  <td style=\"text-align:left\">$6</td>\n  <td style=\"text-align:left\">$6</td>\n  <td style=\"text-align:left\">$4.3(digikey)</td>\n</tr>\n</tbody>\n</table>\n\n## 软件描述\n\n<table>\n    <thead>\n        <tr>\n            <th colspan = \"2\" > M1s 模组 </th>   \n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n          <td>OS</td>\n          <td>· 完备支持FreeRTOS<br>· 基础支持Linux</td>\n        </tr>\n        <tr>\n          <td>开发方式</td>\n          <td>· 原生C SDK<br>· MaixHAL C 模块<br>· pikascript python 脚本</td>\n        </tr>\n        <tr>\n          <td>固件下载</td>\n          <td>· 串口下载<br>· 虚拟磁盘拖拽式更新</td>\n        </tr>\n        <tr>\n          <td>AI 推理框架</td>\n          <td>· 支持原生SDK的BLAI加速推理引擎<br>· 支持通用TinyMaix推理引擎</td>\n        </tr>\n        <tr>\n          <td>AI 模型下载</td>\n          <td>· <a herf=\"https://maixhub.com/\">MaixHub</a> 下载。支持 人脸检测，识别，姿态检测，手势检测 等</td>\n        </tr>\n        <tr>\n          <td>Sipeed 参考示例</td>\n          <td>· https://gitee.com/sipeed/M1s_BL808_example</td>\n        </tr>\n    </tbody>\n</table>\n\n## 模组资料\n\n- [规格书](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/1_Specification)\n- [原理图](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/2_Schematic)\n- [封装库](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/7_Package)\n- [位号图](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/3_Bit_number_map)\n- [尺寸图](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/4_Dimensional_drawing)\n- [3D 模型文件](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/5_3D_file)\n- [芯片数据手册](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/6_Chip_Manual)\n\n---\n\n- [SDK](https://gitee.com/sipeed/M1s_BL808_SDK) (gitee) \n- [Examples](https://gitee.com/sipeed/M1s_BL808_example)（gitee）\n- 交流 QQ 群：`592731168` 。[点我加群](https://jq.qq.com/?_wv=1027&k=uyKNhTeu)\n- 论坛：[bbs.sipeed.com](https://bbs.sipeed.com/)\n\n## 注意事项\n\n<table>\n    <tr>\n        <th>项目</th>\n        <th>注意事项</th>\n    </tr>\n    <tr>\n        <td>静电防护</td>\n        <td>请避免静电打到 PCBA 上；接触 PCBA 之前请把手的静电释放掉</td>\n    </tr>\n    <tr>\n        <td>容忍电压</td>\n        <td> 每个 GPIO 的工作电压已经在原理图中标注出来，请不要让 GPIO 的实际工作的电压超过额定值，否则会引起 PCBA 的永久性损坏 </td>\n    </tr>\n    <tr>\n        <td>FPC 座子</td>\n        <td>在连接 FPC 软排线的时候，谲确保排线无偏侈地完整地插入到排线中</td>\n    </tr>\n    <tr>\n        <td>插拔</td>\n        <td>请完全断电后才进行插拔操作</td>\n    </tr>\n    <tr>\n        <td>避免短路</td>\n        <td>请在上电过程中，避免任何液体和金属触碰到 PCBA 上的元件的焊盘，否则会导致路，烧毁 PCBA</td>\n    </tr>\n    <tr>\n        <td>设计建议</td>\n        <td>为该模组设计底板时，建议先看这个帖子 <a href=\"https://bbs.sipeed.com/thread/1721\">https://bbs.sipeed.com/thread/1721</a></td>\n    </tr>\n    <tr>\n        <td>BANK 划分</td>\n        <td>\n            VDDIO1：GPIO 0-8，1.8V/3.3V<br>\n            VDDIO2：GPIO 11-15，GPIO 40-41, 3.3V only<br>\n            VDDIO3：GPIO 16-23，1.8V/3.3V<br>\n            VDDIO4：GPIO 24-39，1.8V/3.3V<br>        \n        </td>\n    </tr>    \n    <tr>\n        <td>BOOT 模式选择</td>\n        <td>\n        在启动时，芯片判定 BOOT 引脚的电平，选择两个启动选项之一<br>\n        · BOOT 高电平：从 FLASH 存储启动\n        · BOOT 低电平：进入串口下载模式\n        </td>\n    </tr>\n</table>\n\n## 联系方式\n\nM1s 模组可以在多种场景实现客户不同方面的需要，技术支持和商业合作请联系使用邮箱 [support@sipeed.com](support@sipeed.com)"}, "/hardware/zh/maix/m1s/other/others.html": {"title": "M1s DOCK 额外事项", "content": "---\ntitle: M1s DOCK 额外事项\nkeywords: M1s DOCK ,BL808, M1s\nupdate:\n  - date: 2022-11-22\n    version: v0.1\n    author: wonder\n    content:\n      - 新建文档\n---\n\n这里写一些使用相关的注意事项\n\n## 拆卸屏幕\n\n默认发货的板卡的摄像头和屏幕是同一方向的，有时候因为一些原因比如调整摄像头方向需要拆卸屏幕，这里写一下注意事项。\n\n| 屏幕与摄像头同向                                              | 摄像头放在背部                                        |\n| ------------------------------------------------------------- | ----------------------------------------------------- |\n| ![screen_camera_same](./assets/others/screen_camera_same.jpg) | ![camera_in_back](./assets/others/camera_in_back.jpg) |\n\n屏幕与板卡是通过泡沫胶粘在一起的，因此拆卸屏幕的时候需要撕开泡沫胶。这时需要注意应该对屏幕背板的金属层用力，而不是扣屏幕边缘。\n\n<table>\n    <tr>\n        <td><img alt=\"sponge_glue_strip\" src=\"./assets/others/sponge_glue_strip.jpg\" width=\"150%\"></td>\n        <td><img alt=\"sponge_glue_strip_top\" src=\"./assets/others/sponge_glue_strip_top.jpg\"  width=\"150%\"></td>\n        <td>旁边两张图可以看到<br>屏幕与板子是通过泡沫胶粘在一起的</td>\n    </tr>\n</table>\n<table>\n    <tr>\n        <td><img alt=\"screen_back_plane\" src=\"./assets/others/screen_back_plane.png\" width=\"150%\"></td>\n        <td>中间为屏幕背板金属层，<br>旁边的黑色部分为屏幕边缘，<br>拆卸的时候后需要对屏幕背板金属层用力</td>\n    </tr>\n</table>\n<table>\n    <tr>\n        <td><img alt=\"screen_connector\" src=\"./assets/others/screen_connector.jpg\" ></td>\n        <td>打开面板后注意屏幕与板子的连接方式如左图所示，<br>不要连接反了</td>\n    </tr>\n</table>\n\n## 更换摄像头方向\n\n进行完前面的[拆卸屏幕](#拆卸屏幕)后期，可以将摄像头调整的前后方向了。\n唯一要注意的就是在连接摄像头排线的时候别接反了。\n\n<table>\n    <tr>\n        <td><img alt=\"camera_direction_connector\" src=\"./assets/others/camera_direction_connector.jpg\" ></td>\n        <td>连接的时候注意将摄像头上的 1 与板子上的 1 对上就行</td>\n    </tr>\n</table>"}, "/hardware/zh/maix/m1s/other/start.html": {"title": "M1s DOCK 上手", "content": "---\ntitle: M1s DOCK 上手\nkeywords: M1s DOCK ,BL808, M1s\nupdate:\n  - date: 2022-11-23\n    version: v0.1\n    author: wonder\n    content:\n      - 初次编辑\n---\n\nM1s Dock 设计精巧，可以用来所很多有意思的事，这里简单说明一下一些使用方法。\n\n## 初见\n\n首次对 M1s Dock 板子上电，屏幕会显示摄像头所拍摄到的内容，且按两侧的按键显示屏上的数字会有变化。\n\n## U 盘烧录\n\n推荐使用这种方法来进行烧录，主要用来给板子上的 C906 核心烧录运行程序。\n\n先使用 TypeC 数据线将电脑与板子的 OTG 口连接起来，再同时按住板子上面两侧的按键（已经在下面图片中指明），然后按一下板子上的 RST 键就可以进入 U 盘烧录模式。\n\n<table>\n    <tr>\n        <td><img src=\"./assets/start/udisk_burn.png\" alt=\"udisk_burn\" style=\"transform:rotate(0deg);\"></td>    \n        <td>同时按住两侧的按键然后按一下 RST 键来复位板子，并让它进入 U 盘烧录模式</td>\n    </tr>\n</table>\n\n板子成功进入 U 盘烧录模式后在电脑上会显示出一个容量很小的磁盘，直接把固件 <a href=\"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/demo_bin\">点我跳转部分例程固件</a> 拖拽进去即可完成烧录。文件存放进去后数秒后板子会重启，U 盘被弹出，表示烧录完成，看不到效果的话可以给板子重新插拔板子 USB 来完全重启一次再来查看烧录结果。\n\n<img src=\"./assets/start/udisk_in_computer.png\" alt=\"udisk_burn\" style=\"transform:rotate(0deg);\">\n\n## 串口烧录\n\n上面的 U 盘烧录方法适用于给 C906 核心烧录代码，当板子出现固件错误或者需要进行固件升级等操作时，我们需要通过串口来给板子烧录固件。\n\n### 给 M1s 烧录\n\n使用 TypeC 数据线将电脑与板子的 UART 口连接起来，此时电脑上会出现两个串口 （如果出现鼠标不能动的现象请拔掉 USB 并且查看 [更新板载 bl702 固件](#给板载-bl702-进行烧录) 相关内容来修复问题)\n\n给 M1s 烧录需要用到博流官方烧录工具，前往 https://dev.bouffalolab.com/download 下载名称为 `Bouffalo Lab Dev Cube` 的文件。解压后就得到了用来烧录板子的应用程序。\n\n![bouffalo_cube](./assets/start/bouffalo_cube.png)\n\n解压后的文件夹中主要关注 `BLDevCube`、 `BLDevCube-macos` 和 `BLDevCube-ubuntu` 三个文件，用于在不同系统启动这个烧录工具。\n\n![application](./assets/start/application.png)\n\n启动软件后选择 bl808 ，紧着这软件的 IOT 页面选择分区表文件[点我下载](https://dl.sipeed.com/fileList/MAIX/M1s/M1s_Dock/7_Firmware/partition/partition_cfg_16M_m1sdock.toml)（图里②）\n\n<table>\n    <tr>\n        <td><img src=\"./assets/start/chip_selection.png\" alt=\"chip_selection\" style=\"transform:rotate(0deg);\"></td>    \n        <td><img src=\"./assets/start/choose_partition.png\" alt=\"choose_partition\" style=\"transform:rotate(0deg);\" width=\"70%\"></td>\n    </tr>\n</table>\n\n选择完上面的分区表文件后，烧录工具的可选项就变多了，主要关注 `boot2`, `firmware`, `d0fw` 三项\n\n<img src=\"./assets/start/firmware_choose.png\" alt=\"firmware_choose\" style=\"transform:rotate(0deg);\">\n\n上图中，`boot2` 是固定的，位于 `BLDevCube\\chips\\bl808\\builtin_imgs\\boot2_isp_bl808_v6.4_rc6` 目录下，就是在解压的烧录程序文件夹的子目录里面；`firmware` 是 E907 核心运行的固件 ；`d0fw`是 C906 核心运行的固件，前面的 U 盘烧录里面的固件就是给这个核心烧录的。E907 的固件文件和 C906 的固件文件均可以通过 [M1s_dock example](https://gitee.com/sipeed/M1s_BL808_example) 来编译得到。\n\n默认固件可以在 [这里下载到](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware/factory)\n\n正确的选择固件后，在窗口右侧点击一下 `Refresh` 来刷新串口，正常情况有两个串口号相邻的串口可供选择，如果没有两个串口请参考下面的 [烧录 BL702](#给板载-bl702-进行烧录)来查看解决方法。在双串口中需要选择串口号较大的那个。设置波特率 2000000。\n\n![burn_steps](./assets/start/burn_steps.png)\n\n点击下载后按住板子上的 BOOT 键和 RST 键， 然后先松开 RST 键再松开 BOOT 键来给板子烧录固件。\n\n<table>\n    <tr>\n        <td><img src=\"./assets/start/boot_rst.jpg\" alt=\"boot_rst\" style=\"transform:rotate(0deg);\"></td>    \n        <td><img src=\"./assets/start/finish_burning.png\" alt=\"finish_burning\" style=\"transform:rotate(0deg);\" width=\"70%\"></td>\n    </tr>\n</table>\n\n### 给板载 bl702 进行烧录\n\n一般来说板子出问题才进行这里的烧录。\n\n在给板子通电前按住板子上的 BOOT 按键，然后通过板子上的 UART USB 接口连接电脑，此时板载 bl702 进入下载模式，打开 `BLDevCube` 烧录软件，选择 `BL702` 芯片，在打开的软件界面选择 MCU 模式，接着可以在 [这里](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware) 下载到 bl702 的固件，名称为 `usb2dualuart_bl702` 开头的就是我们需要烧录的文件。\n\n<table>\n    <tr>\n        <td><img src=\"./assets/start/select_bl702.png\" alt=\"select_bl702\" style=\"transform:rotate(0deg);\"></td>    \n        <td><img src=\"./assets/start/mcu_mode.png\" alt=\"mcu_mode\" style=\"transform:rotate(0deg);\" width=\"70%\"></td>\n    </tr>\n</table>\n\n点击 `Refresh`，选择唯一的串口（如果看到的不是唯一串口，记得是先按住 BOOT 键，再给板子上电），设置波特率 2000000， 点击下载烧录。\n\n![burn_bl702](./assets/start/burn_bl702.png)\n\n烧录结束后，重新插拔一次 USB 来重新启动 bl702 以应用新的固件。\n\n![finish_burn_702](./assets/start/finish_burn_702.png)\n\n## SDK 编译"}, "/hardware/zh/maix/m1s/other/get_key.html": {"title": "M1s 获取机器码", "content": "---\ntitle: M1s 获取机器码\nkeywords: M1s DOCK ,BL808, M1s\nupdate:\n  - date: 2022-11-10\n    version: v0.1\n    author: wonder\n    content:\n      - 初次编辑\n---\n\n在 [MaixHub](https://maixhub.com/) 下载模型的时候会要求输入机器码，这里说明一下怎么获得机器码。\n\n如果进行下面步骤后没有得到机器码的话，查看[常见问题](#常见问题)\n\n## 简述\n\n简述步骤如下：\n- 将开发板通过 UART 串口与电脑连接（电脑设备管理器中会出现两个串口）\n- 使用任意串口工具，设置波特波特率为 2000000 （1 个 2 和 6 个 0），打开开发板在电脑中所显示的较大的串口号\n- 按下开发板上的 RST 按键，在打印的串口信息如下（仅作示例）\n\n```bash\n# 省略若干\n[MTD] >>>>>> Hanlde info Dump >>>>>>\n      name D0FW\n      id 0\n      offset 0x00100000(1048576)\n      size 0x00200000(2048Kbytes)\n      xip_addr 0x580f0000\n[MTD] <<<<<< Hanlde info End <<<<<<\nD0FW addr:0x580f0000 size:0x200000\nMM CPU select PLL--->MM CPU select 400Mhz\nUART CLK select MM XCLK--->XCLK select XTAL\nI2C CLK select MM XCLK--->XCLK select XTAL\nSPI CLK select 160Mhz\nMM BUS CLK select 160Mhz\nXCLK select XTAL\nirq handle: 3 reset ev\n\n------------------------ CHIP KEY --------------------------\nkey:57F80642C3F97E2655772C48AF17455EC9E79BBF76C16EED4E0EC1096D664435\n------------------------------------------------------------\n```\n\n- 可以从最后面的 `CHIP KEY` 得到下载模型所需要的机器码了\n\n> 每块板子的 `CHIP KEY` 都不一样，上面仅作示范参考，实际 `CHIP KEY` 根据每个人操作来获得。\n\n## 详述\n\n1. 将板子的 UART 口通过 Type-C 数据线与电脑连接起来\n   ![uart_connect](./assets/get_key/uart_connect.png)\n\n2. 打开电脑串口工具（根据自己的串口软件自行更改），设置波特率为 2000000 （1 个 2 和 6 个 0），打开开发板在电脑上显示的较大串口号\n   <img src=\"./assets/get_key/baudrate_2000000.png\" width=45% alt=\"baudrate_2000000\">\n   <img src=\"./assets/get_key/bigger_com_port.png\" width=45% alt=\"bigger_com_port\">\n\n3. 打开串口；按下板子上面的 RST 按键。在串口打印信息的最后看到 `CHIP KEY` 。\n\n<table>\n    <tr>\n    <th>按一下 RST 按键再松开</th>\n    <th>串口软件显示出来机器码</th>\n    </tr>\n    <tr>\n    <td><img src=\"./assets/get_key/rst_key.png\" alt=\"rst_key\"></td>\n    <td><img src=\"./assets/get_key/chip_key.png\" alt=\"chip_key\"></td>\n    </tr>\n</table>\n\n## 常见问题\n\n### 串口乱码\n\n确认自己设置的波特率为 2000000 （2M）\n\n### 复位后的信息中没有 CHIP KEY\n\n这种情况可以通过更新为最新固件来解决，[点我跳转到最新固件下载地址](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware)，选择文件名为 `firmware_m1sdock` 开头的文件，烧录方法请参考[该网页](https://github.com/sipeed/M1s_BL808_example) (Github) 里面的 **Download e907 firmware**\n\n### 没有显示出两个串口\n\n可以参考[该网页](https://github.com/sipeed/M1s_BL808_example) (Github) 里面的 **Download bl702 firmware** 重新烧录一次串口固件，双串口固件下载地址为 [这里](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/7_Firmware)，其名称以 `usb2dualuart_bl702.bin` 开头\n\n### 没有显示出任何串口\n\n首先应当确认自己所接通的是 UART 口，然后可以根据本篇所述的[没有显示出两个串口](#没有显示出两个串口)重新烧录一下串口固件"}, "/hardware/zh/maix/m1s/m1s_dock.html": {"title": "M1s DOCK 开发板", "content": "---\ntitle: M1s DOCK 开发板\nkeywords: M1s DOCK ,BL808, M1s\nupdate:\n  - date: 2022-11-09\n    version: v0.2\n    author: wonder\n    content:\n      - 修改部分描述错误\n      - 增加 SDK(github) 和 Example(github) 链接\n      - 增加注意事项\n      - 增加软件描述栏目\n  - date: 2022-11-04\n    version: v0.1\n    author: wonder\n    content:\n      - 初次编写\n---\n\n## 产品概述\n\nSipeed M1s Dock 是基于 [Sipeed M1s](./m1s_module.html) 模组来设计的一款核心板，引出了 MIPI CSI、SPI LCD 等 FPC 接口，免去接线难的烦恼。使用最精简的设计，用于客户对模组进行模组评估，或者爱好者直接上手游玩等用途。\n\n购买链接：[淘宝](https://item.taobao.com/item.htm?id=691108452443)\n\n<table>\n  <tr>\n  <td><img alt=\"m1s_dock_top\" src=\"./assets/m1s_dock/m1s_dock_top.jpg\"></td>\n  <td><img alt=\"m1s_dock_bottom\" src=\"./assets/m1s_dock/m1s_dock_bottom.jpg\"></td>\n  </tr>\n</table>\n\n## 宣传视频\n\nM1s Dock 和 M0Sense 总览：3:15 之前的都是 M1s Dock。\n\n<iframe src=\"//player.bilibili.com/player.html?aid=559937139&bvid=BV1De4y117sP&cid=887814913&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 板卡特点\n\n-\t主芯片 BL808 RISC-V 480Mhz + NPU BLAI-100\n-\t板载 USB 转 UART 调试器（可实现一键点击烧录，无需按实体按键）\n-\t板载显示屏座子（可选配 1.69 寸 240x280 电容触摸屏）\n-\t板载 MIPI 摄像头座子（可选配 200W 像素摄像头）\n-\t支持 2.4G WIFI / BT / BLE\n-\t板载 1 个模拟麦克风、1 个 LED、1 个 TF 卡座\n-\t引出一路 USB-OTG 到 USB Type-C 接口\n\n### 硬件参数\n\n<table>\n    <thead>\n        <tr>\n            <th colspan = \"2\" > M1s Dock </th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td rowspan=\"9\" style=\"white-space:nowrap\">主控 BL808 处理器</td>\n    </tr>\n    <tr>\n        <td>多核 RISC-V (Max Freq 480MHz)</td>\n    </tr>\n    <tr>\n        <td>AI NN 通用硬件加速器 —— BLAI-100 用于视频/音频检测/识别</td>\n    </tr>\n    <tr>\n        <td>内嵌 64MB DRAM</td>\n    </tr>\n    <tr>\n        <td>编解码：<br>- MJPEG and H264(Baseline/Main)<br>- 1920x1080@30fps + 640x480@30fps\n        </td>\n    </tr>\n    <tr>\n        <td>ISP（图像信号处理）：详情请查看<a href=\"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s/6_Chip_Manual\">芯片规格书</a></td>\n    </tr>\n    <tr>\n        <td>接口：<br>- 摄像头接口 ：DVP 和 MIPI-CSI<br>- 显示接口：SPI、DBI、DPI(RGB)</td>\n    </tr>\n    <tr>\n        <td>无线：<br>- 支持 Wi-Fi 802.11 b/g/n<br>- 支持 Bluetooth 5.x Dual-mode(BT+BLE)<br>- 支持 Wi-Fi / 蓝牙 共存</td>\n    </tr>\n    <tr>\n      <td>USB 2.0 HS OTG （引出到 USB Type-C 接口）</td>\n    </tr>\n    <tr>    \n        <td rowspan=\"5\" style=\"white-space:nowrap\"> 板载部件 </td>\n    </tr>\n    <tr>\n        <td>板载 USB 转 UART 调试器（使用官方下载工具可实现一键点击烧录，无需按实体按键）</td>\n    </tr>\n    <tr>\n        <td>板载 1 个显示屏座子（可选配 1.69 寸 240 x 280 电容触摸屏）</td>\n    </tr>\n    <tr>\n        <td>板载 MIPI 摄像头座子（可选配 200W 像素摄像头）</td>\n    </tr>\n    <tr>\n        <td>板载 1 个模拟麦克风、1 个 LED、1 个 TF 卡座 </td>\n    </tr>\n    <tr>    \n        <td rowspan=\"5\" style=\"white-space:nowrap\"> 其他说明 </td>\n    </tr>\n    <tr>\n      <td>\n        3D 模型文件下载：<a href=\"https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/5_3D_file\">点击跳转</a>\n      </td>\n    </tr>\n    <tr>\n        <td>外部供电需求 TYPE-C 接口：5V±10% 0.5A</td>\n    </tr>\n    <tr>\n        <td>温升: &lt;30K</td>\n    </tr>\n    <tr>\n        <td>工作温度范围:-10℃ ~ 65℃</td>\n    </tr>\n    </tbody>    \n</table>\n\n### 外设框图\n\n<table width=40%>\n  <tr>\n  <td><img alt=\"m1s_dock_function_block_top\" src=\"./assets/m1s_dock/m1s_dock_function_block_top.jpg\"></td>\n  <td><img alt=\"m1s_dock_function_block_top\" src=\"./assets/m1s_dock/m1s_dock_function_block_top.jpg\"></td>\n  </tr>\n</table>\n\n### 尺寸图\n\n<img alt=\"m1s_dock_size\" src=\"./assets/m1s_dock/m1s_dock_size.png\" width=45%>\n\n### 引脚图\n\n<img alt=\"m1s_doc_pin_map\" src=\"./assets/m1s_dock/m1s_doc_pin_map.png\" width=45%>\n\n## 产品对比\n\n| 项目    | Maix Bit                 | ESP32 cam                     | M1s Dock                                   |\n| :------ | :----------------------- | :---------------------------- | :----------------------------------------- |\n| 处理器  | K210                     | ESP32                         | M1s(BL808)                                 |\n| 摄像头  | 0.3MP DVP GC0328         | 2MP DVP OV2640 with flash LED | 2MP MIPI OV2685(two-side) with flash LED   |\n| 显示屏  | 2.4 inch 320x240         |                               | 1.68 inch 280x240 带电容触摸               |\n| 音频    | I2S MEMS MIC             |                               | Analog MEMS MIC + LineOut                  |\n| SD 卡槽 | SPI 模式                 | SPI 模式                      | · SDHC 模式 <br>· JTAG 模式                |\n| 按键    | Reset <br> Boot          | Reset                         | · Reset <br>· Boot <br>· User x 2          |\n| USB     | USB to Serial x 1        |                               | · USB to Dual Serial  x 1 <br>· USB OTG HS |\n| 其他    |                          |                               | 4P x 1.25mm 连接器（串口）                 |\n| 引脚    | 2 x 18 pins,可用于面包板 | 2 x 8 pins                    | 2 x 16 pins,可用于面包板                   |\n| JTAG    |                          |                               | 可选 TF2JTAG                               |\n| 外壳    |                          |                               | 可选                                       |\n| 尺寸    | 25 x 53 mm               | 27 x 41 mm                    | 27 x 55 mm                                 |\n\n## 软件描述\n\n<table>\n    <thead>\n        <tr>\n            <th colspan = \"2\" > M1s Dock </th>   \n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n          <td>OS</td>\n          <td>· 完备支持 FreeRTOS<br>· 基础支持 Linux</td>\n        </tr>\n        <tr>\n          <td>开发方式</td>\n          <td>· 原生 C SDK<br>· MaixHAL C 模块<br>· pikascript python 脚本</td>\n        </tr>\n        <tr>\n          <td>固件下载</td>\n          <td>· 串口下载<br>· 虚拟磁盘拖拽式更新</td>\n        </tr>\n        <tr>\n          <td>AI 推理框架</td>\n          <td>· 支持原生 SDK 的 BLAI 加速推理引擎<br>· 支持通用 TinyMaix 推理引擎</td>\n        </tr>\n        <tr>\n          <td>AI 模型下载</td>\n          <td>· <a herf=\"https://maixhub.com/\">MaixHub</a> 下载。支持 人脸检测，识别，姿态检测，手势检测 等</td>\n        </tr>\n        <tr>\n          <td>Sipeed 参考示例</td>\n          <td>· https://gitee.com/sipeed/M1s_BL808_example</td>\n        </tr>\n    </tbody>\n</table>\n\n## 补充资料\n\n- [规格书](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/1_Specification)\n- [原理图](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/2_Schematic)\n- [位号图](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/3_Bit_number_map)\n- [尺寸图](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/4_Dimensional_drawing)\n- [3D 模型文件](https://dl.sipeed.com/shareURL/MAIX/M1s_Dock/M1s/5_3D_file)\n- [芯片数据手册](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/6_Chip_Manual)\n- [触摸屏手册](https://dl.sipeed.com/shareURL/MAIX/M1s/M1s_Dock/6_Chip_Manual/touch_screen)\n- [博流官方文档](https://dev.bouffalolab.com/home/)\n\n---\n\n- [SDK](https://gitee.com/sipeed/M1s_BL808_SDK) (gitee) \n- [Examples](https://gitee.com/sipeed/M1s_BL808_example)（gitee）\n- 交流 QQ 群：`816177882` 。[点我加群](https://jq.qq.com/?_wv=1027&k=0fOkj3EB)\n- 论坛：[bbs.sipeed.com](https://bbs.sipeed.com/)\n\n## 注意事项\n\n<table>\n    <tr>\n        <th>项目</th>\n        <th>注意事项</th>\n    </tr>\n    <tr>\n        <td>静电防护</td>\n        <td>请避免静电打到 PCBA 上；接触 PCBA 之前请把手的静电释放掉</td>\n    </tr>\n    <tr>\n        <td>容忍电压</td>\n        <td> 每个 GPIO 的工作电压已经在原理图中标注出来，请不要让 GPIO 的实际工作的电压超过额定值，否则会引起 PCBA 的永久性损坏 </td>\n    </tr>\n    <tr>\n        <td>FPC 座子</td>\n        <td>在连接 FPC 软排线的时候，谲确保排线无偏侈地完整地插入到排线中</td>\n    </tr>\n    <tr>\n        <td>插拔</td>\n        <td>请完全断电后才进行插拔操作</td>\n    </tr>\n    <tr>\n        <td>避免短路</td>\n        <td>请在上电过程中，避免任何液体和金属触碰到 PCBA 上的元件的焊盘，否则会导致路，烧毁 PCBA</td>\n    </tr>\n</table>\n\n## 联系\n\nSipeed M1s Dock 开发板可以在多种场景实现客户不同方面的需要，技术支持和商业合作请联系使用邮箱 [support@sipeed.com](support@sipeed.com)"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_bit.html": {"title": "Maix Bit", "content": "# Maix Bit\n\n## 教程&快速上手\n\n相关的使用教程入口<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Bit开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n\n## 外观\n<img src=\"./../assets/dk_board/maix_bit/Bit.png\" alt=\"Maxi bit\" >\n\n## 特性\n\nMaixBit开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>按键*2 <li>RGB灯*1<li>MEMS Microphone*1<li>USB to UART<li>128Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>所有IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>53.3*25.4mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料下载\nSipeed-Maix-Bit 资料下载：[Sipeed-Maix-Bit](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Bit/Maix-Bit_V2.0_with_MEMS_microphone)\n\nSipeed-Maix-Bit 规格书下载：[Sipeed-Maix-Bit](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Bit/Specifications/Sipeed%20Maix-Bit%20%E8%A7%84%E6%A0%BC%E4%B9%A6%20V2.0.pdf)\n\nSipeed-Maix-Bit 原理图下载：[Sipeed-Maix-Bit](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Bit/Maix-Bit_V2.0_with_MEMS_microphone/Maix-Bit_V2.0_Schematic.pdf)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_go.html": {"title": "Maix Go", "content": "# Maix Go\n\n## 教程&快速上手\n\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Go开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n\n## 外观\n<img src=\"./../assets/dk_board/maix_go/Go.jpg\" alt=\"Maxi go\" >\n\n## 特性\n\nMAIX Go开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>三向拨轮按键 <li>RGB灯*1<li>1W 小喇叭<li>USB to UART<li>16Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>麦克风阵列接口<li>部分IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>60*88mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA）</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料下载\nSipeed-Maix-Go 资料下载：[Sipeed-Maix-Go](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-GO)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/Maix_dock.html": {"title": "Maix Dock(M1/M1W)", "content": "# Maix Dock(M1/M1W)\n\n## 教程&快速上手\n\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Dock开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n> 上电即可开机，不需要开机操作\n\n<img src=\"./../assets/dk_board/maix_dock/Maix_Dock.jpg\" alt=\"11\" width=\"300\">\n\n\n\n## 外观\n<img src=\"./../assets/dk_board/maix_dock/Maix_Dock_3.png\" alt=\"11\" >\n<img src=\"./../assets/dk_board/maix_dock/Maix_Dock_2.png\" alt=\"11\" >\n\n## 特性\n\nMaixDock 开发是以M1W AI模块作为核心单元，功能非常强大。模块内置64位双核处理器芯片，拥有8M的片上SRAM，在AI机器视觉、听觉性能方面表现突出，内置多种硬件加速单元（KPU、FPU、FFT等），总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法，也可以进行语言方向扫描和语言数据输出的前置处理工作。\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>按键*2 <li>RGB灯*1<li>MEMS Microphone*1<li>USB to UART<li>128Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>音频接口(支持外接2x3W扬声器)<li>所有IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>52.3*37.3mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料\nSipeed-Maix-Dock 资料下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Dock)\n\nSipeed-Maix-Dock 规格书下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Dock/Specifications)\n\nSipeed-Maix-Dock 原理图下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Dock/Maix-Dock_11.27/Maix-Dock_11.27-schematic.pdf)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_duino.html": {"title": "MaixDuino 开发板", "content": "# MaixDuino 开发板\n\n## 概述\n\n  SIPEED MaixDuino 是基于我们 M1 模块(主控:Kendryte K210)开发的一款外形兼容 Arduino 的开发板\n  <br/>MaixDuino 集成摄像头、TF卡槽、用户按键、TFT显示屏、MaixDuino 扩展接口等, 用户可使用 MaixDuino 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板.\n\n## MaixDuino 外观及功能介绍\n\n### 外观一览\n\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_0.png)\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_1.png)\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_2.png)\n\n### 板载功能介绍\n\n- 电源输入 DC05: 6~12V 直流\n- 电源输入 + 程序下载调试接口: USB Type-C 接口\n- DVP 24PIN: 标准 Camera DVP 24PIN 接口\n- TF 扩展槽:\n- ESP32: ESP32 SPI 连接(ESP32 支持 WIFI 与 蓝牙)\n- I2C DAC\n- PA PAM8403A\n\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_3.jpg)\n\n## MaixDuino参数\nMaixduino开发板以M1Al模块作为核心单元，功能非常很强大，模块内置64位双核处理器芯片，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。此外，开发板还配置了ESP32模块(WiFi+蓝牙一体)，简单的操作即可轻松联网。\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n<table role=\"table\" class=\"center_table\">\n  <thead>\n    <tr>\n      <th colspan = \"2\">ESP32模块</th>\n    </tr>\n  </thead>\n  <tr>\n    <td>主控</td>\n    <td>ESP32-D0WDQ6(Xtensa 32-bit内核)</td>\n  </tr>\n  <tr>\n    <td>无线标准</td>\n    <td>802.11b/g/n</td>\n  </tr>\n  <tr>\n    <td>无线频率</td>\n    <td>2400MHz-2483.5MHz</td>\n  </tr>\n  <tr>\n    <td>无线协议</td>\n    <td>2.4G WiFi+双模蓝牙(BT&BLE4.2)</td>\n  </tr>\n  <tr>\n    <td>天线</td>\n    <td>PCB板载天线</td>\n  </tr> \n</table>\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>RGB灯*1<li>MEMS Microphone*1<li>USB转串口*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>音频接口（支持外接3扬声器）<li>部分IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>60*88mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n\n## 资料相关链接\n\n- [MaixDuino 原理图](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maixduino)\n- <a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy的使用教程入口 </a> （推荐）\n- <a href=\"/soft/maixduino/zh/\" target=\"_blank\"> arduino的使用教程入口 </a>\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_nano.html": {"title": "Maix nano", "content": "# Maix nano\n\n## 教程&快速上手\n\n相关的使用教程入口<a href=\"./../../../../soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Nano开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n\n## 外观\n<img src=\"./../assets/dk_board/maix_nano/maix_nano.jpg\" alt=\"Maxi nano\" >\n\n## 特性\n\nMAIX Nano开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n![maix_nano](./../assets/dk_board/maix_nano/maix_nano.png)\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源和接口</td>\n        <td><li>DVP摄像头接口*1 <li>大部分IO通过金手指方式引出，方便二次开发<li>USB to UART<li>128Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>25.0*22.0mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、Standrad development ki等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料下载\nM1n 资料下载：[dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-M1n)\nM1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_Amigo.html": {"title": "MaixAmigo", "content": "# MaixAmigo\n\n## 使用教程\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 概述\n\n  SIPEED MaixAmigo 是基于我们 M1n 模块(主控:Kendryte K210)开发的一款集学习开发和商用一体的人脸识别产品.\n  <br/>MaixAmigo 集成前后摄像头、TF卡槽、用户按键、TFT显示屏、锂电池、扬声器麦克风、扩展接口等, 用户可使用 MaixAmigo 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板.\n\n## MaixAmigo 外观及功能介绍\n\n### 外观一览\n\n![MaixAmigo](./../assets/dk_board/maxi_amigo/image-20200730120223557.png)\n\n### 板载硬件功能介绍\n\n- 3.5 寸 **TFT** 屏幕: 分辨率 **320x480***\n- 3.5 寸电阻触摸屏： FT6X36\n- 芯片复位按键\n- 电源按键: 短按开机, 长按 *8S* 关机\n- 三个功能按键\n- Grove 接口: 板载 3 个**Grove** 数字接口, 传感器,控制器扩展无限可能~\n- SP-MOD 接口: 板载 3 个更加强大,更高扩展性的 **SP-MOD** 数字接口, I2C,SPI(标准,双线,四线模式)等接口均可以使用\n  - 后续支持乐高手柄功能\n- TF 卡槽: 多媒体资源扩展,支持大容量储存\n- 摄像头: 搭载 **OV7740** **30W** 像素 与 **GC0328 30W 像素** **Sensor**\n- Type-C 接口: USB-TypeC 电源、调试接口,正反盲插\n\n\n- 电源管理控制单元: AXP173\n  - 板载 600mAh 锂电池,支持用户充放电控制\n- 音频驱动 IC: ES8374\n  - 支持音频录制,播放\n- 三轴加速度传感器: MSA301\n\n### 板载扩展接口\n\nMaixAmigo 对用户开放了两个高度扩展的接口: SP-MOD 与 Grove 接口,\n用户可以很方便的进行 DIY\n\n#### SP-MOD 接口\n\nSP-MOD 即为 sipeed module, simplify PMOD, super module\n\n| 接口 | 接口描述 |\n|---|---|\n|SP-MODE 接口描述|![spmod_interface_1](./../../../assets/spmod/spmod_interface_1.png)|\n|硬件接口|![spmod_interface_2](./../../../assets/spmod/spmod_interface_2.png)|\n\n#### Grove 接口\n\nGrove 接口的线缆有 4 种颜色, 用户可以根据颜色快速区别\n![grove_interface](./../assets/interface_grove/grove_interface.jpg)\n\n| pin | 颜色 | 描述 |\n| --- | --- | --- |\n| pin 1 | 黄色 | (例如, I2C Grove Connectors上的SCL) |\n| pin 2 | 白色 | (例如, I2C Grove Connectors上的SDA) |\n| pin 3 | 红色 |   VCC (所有的Grove接口红色都是VCC) |\n| pin 4 | 黑色 |   GND (所有的Grove接口红色都是GND) |\n\nGrove模块主要有 4 种接口:\n\n- Grove Digital 数字接口:\n\n    Grove 数字接口由 Grove 插头的四条标准线组成.\n    两条信号线通常称为 D0 和 D1 .\n    大多数模块只使用 D0, 但有些(像LED Bar Grove显示屏)使用两者.通常核心板会将板卡上的第一个Grove连接头称为 D0, 第二个称为 D1.第一个接头会连接到主控芯片的 DO/D1 管脚, 第二个连接头会连接到主控芯片的D1/D2引脚, 后面的连接头以此类推.\n\n|pin  |Function | Note |\n| ---|---|---|\n| pin1 | Dn | 第一个数字输入 | \n| pin2 | Dn+1 | 第二个数字输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove Analog 模拟接口\n    Grove模拟接口由Grove插头的四条标准线组成.\n    两条信号线通常称为A0和A1.\n    大多数模块只使用A0，但有些（像LED Bar Grove显示屏）使用两者.\n    通常核心板会将板卡上的第一个Grove连接头称为A0，第二个称为A1。第一个接头会连接到主控芯片的AO/A1管脚，第二个连接头会连接到主控芯片的A1/A2引脚，后面的连接头以此类推.\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | An | 第一个模拟输入 | \n| pin2 | An+1 | 第二个模拟输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n\n- Grove UART :\n    The Grove UART 是特殊的一种数字输入输出接口\n    它使用引脚 1 和引脚 2 进行串行输入和发送\n    引脚1是 RX 线(用于接收数据, 因此是输入)\n    其中引脚 2 是 TX 线(用于向 Grove 模块传输数据)\n\n| pin  | Function | Note |\n| --- | --- | --- |\n| pin1 | RX | 串行接收 |\n| pin2 | TX | 串行发送 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove I2C:\n    有许多类型的 I2C Grove 传感器可用.MaixAmigo 上的 Grove 只支持 3.3V 传感器\n\n  Grove I2C 连接器具有标准布局.引脚 1 是SCL信号, 引脚 2 是SDA信号\n\n| pin  | Function | Note |\n| --- | --- | --- |\n| pin1 | SCL | I2C 时钟 |\n| pin2 | SDA | I2C 数据 |\n| pin3 | VCC | 供电引脚, 5V/3.3V |\n| pin4 | GND | 地 |\n\n### 板载 I2C 设备\n\nMaixAmigo 板载 I2C 传感器/IC\n\n| IC | 设备 id | I2C 地址(7位地址) |\n| --- | --- | --- |\n| ES8374 | 0x08 | 0x10 |\n| MSA301 | 0x13 | 0x26 |\n| AXP173 | 0x68 | 0x34 |\n\n## 参数\nMaix Amigo内置64位400Mhz双核高性能处理器,拥有8M的片上SRAM，16MiB FLASH大容量存储,轻松处理多媒体应用,在AI机器视觉、听觉性能方便表现突出，内置多种硬件加速单元（KPU、FPU，FFT等)，总算力最高可达1TOPS,可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音扫描和语音数据输出的前置处理工作\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>摄像头帧率</td>\n        <td>OV7740/QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>离线语音识别，声场</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持MobileNetV1/V2<li>人脸识别<li>ASR</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>硬件加速单元</td>\n        <td><li>KPU卷积运算加速器<li>FPU浮点运算加速器<li>APU音频处理器<li>FFT傅里叶变换加速器</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>3.5寸TFT屏幕<li>复位按键*1<li>功能按键*3<li>前后摄像头*2<li>LED*3<li>加速度传感器*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>音频接口(支持外接扬声器)<li>TF卡槽<li>Grove标准接口<li>SP-MOD接口(支持SP-MOD接口模块)</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>104.3*63.3*16.5mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>USB-type或内部锂电池（520mAh）</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>软件环境</td>\n    <td>MaixPy（microPython）</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，MicroPython</td>\n    </tr>\n</table>\n\n## 相关资料下载\n\nMaix-Amigo 资料下载：[Sipeed-Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Amigo)\n\nMaix-Amigo 规格书下载：[Sipeed-Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Amigo/ProductSpecification)\n\nMaix-Amigo IPS 版本 原理图下载：<a href=\"https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Amigo/2970/Maix_Amigo_2970(Schematic).pdf\">Maix_Amigo_2970(Schematic).pdf</a>\n\nMaix-Amigo TFT 版本 原理图下载：<a href=\"https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Amigo/2960/Maix_Amigo_2960(Schematic).pdf\">Maix_Amigo_2960(Schematic).pdf</a>\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/develop_kit_board.html": {"title": "Maix 系列开发板", "content": "# Maix 系列开发板\n\n\n##  Maix 系列开发板\n\n目前 MaixPy 系列开发板有一下这几款型号:\n\n- Maix Go\n\n- Maix Dock\n\n- Maix Duino\n\n- Maix Bit\n\n- Maix Cube\n\n- Maix Amigo\n<style type=\"text/css\">\nth {\n    background-color: #fbfbfb;\n    border: 2px solid #f1f1f1;\n}\n</style>\n\n## 差异对比\n<table>\n  <tbody>\n    <tr>\n      <th width=\"226\" scope=\"col\" >&nbsp;</th>\n      <th width=\"226\" scope=\"col\" ><a href=\"maix_go.html\"><img src=\"../assets/dk_board/maix_go/Go.jpg\" width=\"200\"  alt=\"\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"maix_bit.html\"><img src=\"../assets/dk_board/maix_bit/Bit.png\" width=\"200\"  alt=\"Bit\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"maix_cube.html\"><img src=\"../assets/dk_board/maix_cube/maix_cube_1.png\" width=\"200\"  alt=\"maix_cube\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"Maix_dock.html\"><img src=\"../assets/dk_board/maix_dock/Dan_Dock.png\" width=\"200\"  alt=\"\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"maix_duino.html\"><img src=\"../assets/dk_board/maix_duino/DSC_08141.png\" width=\"200\"  alt=\"\"/></a></th>    \n      <th width=\"226\" scope=\"col\"><a href=\"maix_Amigo.html\"><img src=\"../assets/dk_board/maxi_amigo/amigo.png\" width=\"200\"   alt=\"\"/></a> </th>  \n    </tr>\n    <tr>\n      <td>型号 </td>\n      <td>Maix Go</td>\n      <td>Maix Bit</td>\n      <td>Maix Cube</td>\n      <td><p>Maix Dock</p></td>\n      <td>Maix Duino</td>\n      <td>Maix Amigo</td>\n    </tr>\n    <tr>\n      <td>USB IC</td>\n      <td>STM32</td>\n      <td>CH552/CH340</td>\n      <td>GD32/CH552</td>\n      <td>CH340</td>\n      <td>CH552</td>\n      <td>GD32</td>\n    </tr>\n    <tr>\n      <td>核心模块</td>\n      <td>M1</td>\n      <td>M1</td>\n      <td>M1n</td>\n      <td>M1/M1W</td>\n      <td>M1</td>\n      <td>M1n</td>\n    </tr>\n    <tr>\n      <td height=\"48\">WIFI 功能</td>\n      <td>M1W 模块集成 ESP8285</td>\n      <td>---</td>\n      <td>---</td>\n      <td>Dock M1 (不支持 WIFI)<br/>\n        Dock M1W(支持,M1W 模块集成 ESP8285)</td>\n      <td>板载 ESP32 （支持 WIFI, 蓝牙功能暂时未支持）</td>\n      <td>---</td>\n    </tr>\n  </tbody>\n</table>\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_hat.html": {"title": "Grove AI HAT", "content": "---\ntitle: Grove AI HAT\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy  Grove AI HAT\n---\n\n## 外观及功能介绍\n\n### 外观一览\n\n![Grove AI HAT](./../../../../soft/maixpy/assets/hardware/grove_ai_hat/grove_ai_hat1.png)\n\n### 板载功能\n\n| 项目             | 说明                                                   |\n| ---------------- | ------------------------------------------------------ |\n| CPU：            | 双核 64bit RISC-V / 400MHz (双精度FPU集成)             |\n| 内存：           | 8MiB 64bit 片上 SRAM                                   |\n| 存储：           | 16MiB Flash                                            |\n| 屏幕（套餐）：   | 2.4 寸 TFT, 电容触摸屏幕分辨率：320\\*240               |\n| 摄像头（套餐）： | 搭载 **OV7740** 或 **OV5642** **30W** 像素 **Sensor** |\n| 按键：           | 复位按键，电源按键（短按开机，长按 *8S* 关机）         |\n| USB：            | Type-C 接口，正反盲插                                  |\n| 板载传感器：     | 三轴加速度传感器（ADXL345BCCZ-RL），ADC（ADS1115IDGS） |\n\n### 硬件板载扩展接口\n\n该开发版对用户开放了四个 [Grove](https://wiki.sipeed.com/soft/maixpy/zh/modules/grove/index.html) 接口,用户可以很方便的进行 DIY。\n\n### 板载 I2C 设备\n\n| 传感器  | 功能         | I2C 地址(7位地址) | SCL  | SDA  | 示例代码               |\n| ------- | ------------ | ----------------- | ---- | ---- | ---------------------- |\n| ADS1115 | ADC          | 0x48              | IO23 | IO24 | [script](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/others/ads1115) |\n| ADXL345 | 三轴加速度计 | 0x53              | IO23 | IO24 | [script](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/others/adxl345) |\n\n## 资源下载\n\n[原理图](http://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Grove_AI_HAT/Grove_AI_HAT_for_Edge_Computing_v1.0_SCH_190514.pdf)"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_cube.html": {"title": "MaixCube", "content": "# MaixCube\n\n## 使用教程\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 概述\n\n  SIPEED MaixCube 是基于我们 M1n 模块(主控:Kendryte K210)开发的一款集学习开发和商用一体的人脸识别产品.\n  <br/>MaixCube 集成摄像头、TF卡槽、用户按键、TFT显示屏、锂电池、扬声器麦克、扩展接口等, 用户可使用 Maix Cube 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板.\n\n## MaixCube 外观及功能介绍\n\n### 外观一览\n\n![maixcube_product_appearance](./../assets/dk_board/maix_cube/maixcube_product_appearance.png)\n\n### 板载功能介绍\n\n- 电源管理控制单元: AXP173\n  - 板载 200mAh 锂电池,支持用户充放电控制\n- 音频驱动 IC: ES8374\n  - 支持音频录制,播放\n- 三轴加速度传感器: MSA301\n- Camera OV7740:\n- 1.3 IPS LCD:\n- RGB: 板载两颗 RGB LED\n- USB Type-C:Type-C 接口,正反盲插\n\n\n### 板载扩展接口\n\nMaix Cube 对用户开放了两个高度扩展的接口: SP-MOD 与 Grove 接口,\n用户可以很方便的进行 DIY\n\n#### SP-MOD 接口\n\nSP-MOD 即为 sipeed module, simplify PMOD, super module\n\n| 接口 | 接口描述 |\n| --- |--- |\n|SP-MODE 接口描述|![spmod_interface_1](./../../../assets/spmod/spmod_interface_1.png)|\n|硬件接口|![spmod_interface_2](./../../../assets/spmod/spmod_interface_2.png)|\n\n#### Grove 接口\n\n- Grove 模块接口\n\nGrove 接口的线缆有 4 种颜色, 用户可以根据颜色快速区别\n\n![grove_interface](./../assets/interface_grove/grove_interface.jpg)\n\n| --- | 颜色 | 描述 |\n| --- | --- | --- |\n| pin 1 | 黄色 | (例如, I2C Grove Connectors上的SCL) |\n| pin 2 | 白色 | (例如, I2C Grove Connectors上的SDA) |\n| pin 3 | 红色 |   VCC (所有的Grove接口红色都是VCC) |\n| pin 4 | 黑色 |   GND (所有的Grove接口红色都是GND) |\n\nGrove模块主要有 4 种接口:\n\n- Grove Digital 数字接口:\n    Grove 数字接口由 Grove 插头的四条标准线组成.\n    两条信号线通常称为 D0 和 D1 .\n    大多数模块只使用 D0, 但有些(像LED Bar Grove显示屏)使用两者.通常核心板会将板卡上的第一个Grove连接头称为 D0, 第二个称为 D1.第一个接头会连接到主控芯片的 DO/D1 管脚, 第二个连接头会连接到主控芯片的D1/D2引脚, 后面的连接头以此类推.\n\n| pin  |Function | Note |\n| ---|---|---|\n| pin1 | Dn | 第一个数字输入 | \n| pin2 | Dn+1 | 第二个数字输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove Analog 模拟接口\n    Grove模拟接口由Grove插头的四条标准线组成.\n    两条信号线通常称为A0和A1.\n    大多数模块只使用A0，但有些（像LED Bar Grove显示屏）使用两者.\n    通常核心板会将板卡上的第一个Grove连接头称为A0，第二个称为A1。第一个接头会连接到主控芯片的AO/A1管脚，第二个连接头会连接到主控芯片的A1/A2引脚，后面的连接头以此类推.\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | An | 第一个模拟输入 | \n| pin2 | An+1 | 第二个模拟输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n\n- Grove UART :\n    The Grove UART 是特殊的一种数字输入输出接口\n    它使用引脚 1 和引脚 2 进行串行输入和发送\n    引脚1是 RX 线(用于接收数据, 因此是输入)\n    其中引脚 2 是 TX 线(用于向 Grove 模块传输数据)\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | RX | 串行接收 |\n| pin2 | TX | 串行发送 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove I2C:\n    有许多类型的 I2C Grove 传感器可用.MaixAmigo 上的 Grove 只支持 3.3V 传感器\n\n  Grove I2C 连接器具有标准布局.引脚 1 是SCL信号, 引脚 2 是SDA信号\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | SCL | I2C 时钟 |\n| pin2 | SDA | I2C 数据 |\n| pin3 | VCC | 供电引脚, 5V/3.3V |\n| pin4 | GND | 地 |\n\n### 板载 I2C 设备\n\nMaixCube  板载 I2C 传感器/IC\n\n| IC | 设备 id | I2C 地址(7位地址) |\n| --- | --- | --- |\n|ES8374|0x08|0x10|\n|MSA301|0x13|0x26|\n|AXP173|0x68|0x34|\n\n## MaixCube参数\n![maixcube_resources](./../assets/dk_board/maix_cube/maixcube_resources.png)\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至500MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>摄像头帧率</td>\n        <td>OV7740/QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>离线语音识别，声场</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持MobileNetV1/V2<li>人脸识别<li>ASR</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>硬件加速单元</td>\n        <td><li>KPU卷积运算加速器<li>FPU浮点运算加速器<li>APU音频处理器<li>FFT傅里叶变换加速器</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>按键*3<li>摄像头*1<li>RGB LED*2 <li>1.3寸TFT屏幕<li>Electret Microphone*1<li>128Mbit Flash*1<li>加速度传感器*1<li>0.5W扬声器</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>TF卡槽<li>Grove标准接口<li>SP-MOD接口(支持SP-MOD接口模块)</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>40*40*18.6mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>USB-type或内部锂电池（200mAh）</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>软件环境</td>\n    <td>MaixPy（microPython）</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，MicroPython</td>\n    </tr>\n</table>\n\n## 相关资料下载\nSipeed-Maix-Cube 资料下载：[Sipeed-Maix-Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube)\n\nSipeed-Maix-Cube 规格书下载：[Sipeed-Maix-Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube/ProductSpecification/Sipeed%20Maix%20Cube%20Datasheet%20V1.0.pdf)\n\nSipeed-Maix-Cube 原理图下载：[Sipeed-Maix-Cube.pdf](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube/Maix-Cube-2757)\n\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/M1n.html": {"title": "Sipeed M1n", "content": "---\ntitle: Sipeed M1n\nkeywords: maixpy, k210, AIOT, 边缘计算, M1n\ndesc: maixpy  Sipeed M1/M1W \n---\n\n## M1n\n\nSiPEEDM1n是基于基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-v架构64位双核)设计的一款AIOT开发板。板载DVP双摄像头接口、Flash、并把大部分IO通过金手指方式引出，模块设计小巧精致、布局走线合理规范，用户可直接应用于商用产品，也可以通过转接板对此模块进行开发。\n![M1n](./assets/m1n/M1n_1.png)\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n\n## M1n 参数\nM1n模块以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPs ,可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n<p><img loading=\"M1/M1W\" src=\"./assets/m1n/M1n.png\" width = 500 ></p>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块软件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>操作系统</td><td>FreeRtos and Standrad development ki</td>\n    </tr>\n    <tr>\n        <td>编程语言</td><td>MicroPython</td>\n    </tr>\n    <tr>\n        <td>机器视觉</td><td>支持卷积神经网络</td>\n    </tr>\n    <tr>\n        <td>机器听觉</td><td>高性能音频处理器(APU)</td>\n    </tr>\n    <tr>\n        <td>开发环境</td><td>串口终端、MaixPy IDE</td>\n    </tr>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块硬件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>尺寸</td><td>22.0*25.0mm</td>\n    </tr>\n    <tr>\n        <td>引脚</td><td>部分引脚金手指引出</td>\n    </tr>\n    <tr>\n        <td>供电电压</td><td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td><td>-30°C ~85°C</td>\n    </tr>\n</table>\n\n\n\n\n## 资料下载\n\n芯片 K210 Datasheet: [Kendryte 官网](https://canaan-creative.com/)\nM1W 资料下载: [dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-M1&M1W)\nM1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf)\n\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/longan/index.html": {"title": "Longon 开发板", "content": "# Longon 开发板\n\n龙眼系列开发板是sipeed基于国产mcu芯片来设计的板子。方便与MCU开发者快速上手使用免于设计板子的麻烦。"}, "/hardware/zh/longan/Zero/index.html": {"title": "", "content": "敬请期待"}, "/hardware/zh/longan/Nano/examples/printf.html": {"title": "串口打印", "content": "串口打印\n==========\n\n很多时候，串口打印都是一个非常方便的调试手段，通过串口打印的信息，可以方便的定位程序错误位置\n\n本文基于 longan nano 演示如何实现 printf 通过串口打印\n\n本文选择串口0作为串口打印信息的端口，外设使用前，自然需要进行初始化\n\n```c\nvoid init_uart0(void)\n{\t\n\t/* enable GPIO clock */\n    rcu_periph_clock_enable(RCU_GPIOA);\n    /* enable USART clock */\n    rcu_periph_clock_enable(RCU_USART0);\n\n    /* connect port to USARTx_Tx */\n    gpio_init(GPIOA, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_9);\n    /* connect port to USARTx_Rx */\n    gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_10);\n\n\t/* USART configure */\n    usart_deinit(USART0);\n    usart_baudrate_set(USART0, 115200U);\n    usart_word_length_set(USART0, USART_WL_8BIT);\n    usart_stop_bit_set(USART0, USART_STB_1BIT);\n    usart_parity_config(USART0, USART_PM_NONE);\n    usart_hardware_flow_rts_config(USART0, USART_RTS_DISABLE);\n    usart_hardware_flow_cts_config(USART0, USART_CTS_DISABLE);\n    usart_receive_config(USART0, USART_RECEIVE_ENABLE);\n    usart_transmit_config(USART0, USART_TRANSMIT_ENABLE);\n    usart_enable(USART0);\n\n    usart_interrupt_enable(USART0, USART_INT_RBNE);\n}\n```\n\n这里首先的开启了端口时钟和串口时钟，在初始化完管脚后，就进行了串口的功能配置\n\n我们一般比较关心的就是串口的波特率，这里设置成了 115200\n\n然后我们还需要重新实现 _put_char ，将 printf 重映射\n\n```c\nint _put_char(int ch)\n{\n    usart_data_transmit(USART0, (uint8_t) ch );\n    while ( usart_flag_get(USART0, USART_FLAG_TBE)== RESET){\n    }\n\n    return ch;\n}\n```\n\n这样就可以快乐的使用 printf 了"}, "/hardware/zh/longan/Nano/examples/badapple.html": {"title": "Bad Apple 演示视频", "content": "Bad Apple 演示视频\n==================\n\n本文目的是使用板载的 160*80 分辨率的 OLED 屏幕播放 bad apple 视频\n\n## 主要工作介绍\n\n+ 移植 OLED 屏幕的驱动\n+ 移植 tf 卡驱动和 fatfs 文件系统\n+ 将视频按自己需要的帧率转换为一帧帧的图片然后打包到 tf 卡\n+ 在 gd32v 上读取 tf 卡中的图片并进行显示\n\n### 屏幕驱动\n\n使用硬件 SPI 驱动屏幕，首先需要初始化 SPI\n\n```c\nvoid spi_config(void)\n{\n    spi_parameter_struct spi_init_struct;\n    /* deinitilize SPI and the parameters */\n    OLED_CS_Set();\n    spi_struct_para_init(&spi_init_struct);\n\n    /* SPI0 parameter config */\n    spi_init_struct.trans_mode           = SPI_TRANSMODE_FULLDUPLEX;\n    spi_init_struct.device_mode          = SPI_MASTER;\n    spi_init_struct.frame_size           = SPI_FRAMESIZE_8BIT;\n    spi_init_struct.clock_polarity_phase = SPI_CK_PL_HIGH_PH_2EDGE;\n    spi_init_struct.nss                  = SPI_NSS_SOFT;\n    spi_init_struct.prescale             = SPI_PSC_8;\n    spi_init_struct.endian               = SPI_ENDIAN_MSB;\n    spi_init(SPI0, &spi_init_struct);\n\n\tspi_crc_polynomial_set(SPI0,7);\n\tspi_enable(SPI0);\n}\n```\n\n初始化完成后就可以实现数据指令的发送\n\n```c\nvoid LCD_Writ_Bus(u8 dat)\n{\n\tOLED_CS_Clr();\n\n\twhile(RESET == spi_i2s_flag_get(SPI0, SPI_FLAG_TBE));\n        spi_i2s_data_transmit(SPI0, dat);\n\twhile(RESET == spi_i2s_flag_get(SPI0, SPI_FLAG_RBNE));\n        spi_i2s_data_receive(SPI0);\n\n\tOLED_CS_Set();\n}\n\nvoid LCD_WR_DATA8(u8 dat)\n{\n\tOLED_DC_Set();//写数据\n\tLCD_Writ_Bus(dat);\n}\n\nvoid LCD_WR_DATA(u16 dat)\n{\n\tOLED_DC_Set();//写数据\n\tLCD_Writ_Bus(dat>>8);\n\tLCD_Writ_Bus(dat);\n}\n\nvoid LCD_WR_REG(u8 dat)\n{\n\tOLED_DC_Clr();//写命令\n\tLCD_Writ_Bus(dat);\n}\n```\n\n`LCD_Writ_Bus` 完成了 SPI 的收发，通过控制命令数据线，完成命令和数据的发送\n\nOLED 屏幕在使用前还需要设置它的一些参数，比如屏幕开启、数据帧的格式等等，这些在参数在屏幕初始化的时候，通过写命令再写数据的方式写入。想修改这些参数需要依靠屏幕配套的数据手册，不过一般可以参数屏幕生产商提供的例程中的参数。\n\n### tf 卡驱动和 fatfs 文件系统\n\ntf 卡在 longan 上也是使用 SPI 驱动的。为了更快的访问速率，也是使用硬件 SPI 驱动。使用前也需要初始化，方式和屏幕的 SPI 初始化类似，就不再累述。\n\nfatfs 是一个专为小型嵌入式设备设计的文件系统。fatfs 符合 ANSI C(C89)规范，并且和磁盘 I/O 层完全分离。\n\n具体的移植也很简单，直接参照 fatfs 提供的 stm32 的工程移植进行\n\n这里提供该工程的[下载地址](http://dl.sipeed.com/LONGAN/Nano/Firmware/badapple_demo_tools/ffsample.7z)，完整版可以去 fatfs 的[官网下载](http://elm-chan.org/fsw/ff/ffsample.zip)\n\n主要的工作在于实现 fatfs 的几个基本函数 `disk_initialize` `disk_status` `disk_read` `disk_ioctl`\n\n这些函数又是基于 SPI 通信的，还需要修改 SPI 接收发送的实现\n\n```c\nstatic\nBYTE xchg_spi (\n\tBYTE dat\t/* Data to send */\n)\n{\n\twhile(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_TBE));\n        spi_i2s_data_transmit(SPI1, dat);\n\twhile(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_RBNE));\n        return(spi_i2s_data_receive(SPI1));     /* Return received byte */\n}\n\nstatic\nvoid rcvr_spi_multi (\n\tBYTE *buff,\t\t/* Pointer to data buffer */\n\tUINT btr\t\t/* Number of bytes to receive (even number) */\n)\n{\n\tdo\n\t{\n\t\t*buff = xchg_spi(0xff);\n\t\tbuff++;\n\t} while (btr--);\n\n}\n```\n\n### 视频预解码\n\nmp4 格式的视频，单片机因为没有硬件的加速，无法胜任解码播放的工作，所以只能靠手工预解码，相当于按照一定的帧率对原视频进行截图\n\n这里需要使用到 PotPlayer XnViewMP\n\n首先使用 PotPlayer 打开视频，快捷键 ctrl+G 打开连续截图\n\n打开后如图\n\n![](./../assets/examples/potplayer.png)\n\n其中格式一定要 BMP，尺寸按照屏幕的尺寸设置，时间我这里设置的是 100ms 也就是 1s 十帧的样子，采集数量就自己计算一下视频总时间再乘每秒帧数，我这里就是 219s * 10 = 2190\n\n最后得到的图片是 32位 的 BMP，转换起来不方便，就用 XnViewMP 转换为 24位 的 BMP\n\n打开 XnViewMP ，选择要转换的图片，快捷键 ctrl+U 打开批量转换，在动作中选择 24位 进行转换，如图\n\n![](./../assets/examples/XnViewMP.png)\n\n然后就是将这些图片打包到 tf 卡，这里为了方便，修改了网上的一个开源项目 [bmp2hex](https://github.com/robertgallup/bmp2hex)，重新整理了一个工具，可以[点击下载](http://dl.sipeed.com/LONGAN/Nano/Firmware/badapple_demo_tools/tools_bmp2hex.zip)\n\n使用方法很简单，把下载的这个压缩包放到之前生成的图片集中，进行解压\n\n使用工具前需要确保所有图片的名字是 数字.bmp ，不是的话可以先运行一遍 rename.py 这个脚本，直接在命令行输入 `python rename.py` 即可\n\n根据自己图片总数修改 genhex.py 这个脚本的第4行中的数字，比如我有 2190张 图片，这里的数字就写 2190\n\n然后就运行这个脚本，在命令行输入 `python genhex.py`，时间可能比较久，需要耐心等待\n\n最后运行完毕后会生成一个 bmp.bin 文件，将这个文件放入到 tf 卡中即可\n\n### 读取图片\n\n最后的读取图片并显示其实很简单了，主要涉及到的就是文件操作，关于 fatfs 的 API [可以点击这里阅读](http://elm-chan.org/fsw/ff/doc/open.html)\n\n首先需要将 tf 卡挂载到文件系统，这里需要使用到 f_mount 这个函数\n\n```c\nfr = f_mount(&fs, \"\", 1);\n```\n\n挂载上后，就找到对应的文件然后打开，这里涉及到 f_open\n\n```c\nfr = f_open(&fil, \"bmp.bin\", FA_READ);\n```\n\n文件打开后，就可以读取图片信息并显示了，这里 160*80 尺寸的 16位真彩图片，一张有 25600 字节，longan 上的处理器无法直接创建一个这么大的数组，所以只能分两次进行读取，每次读取完进行一次偏移，最后通过循环读取总共的 2189 张图片，这里涉及到 f_read f_lseek\n\n```c\nfor (int i=0; i<2189;i++)\n{\n        fr = f_read(&fil, image, sizeof(image), &br);\n        LCD_ShowPicture(0,0,159,39);\n        offset += 12800;\n        f_lseek(&fil, offset);\n        LEDB_TOG;\n        fr = f_read(&fil, image, sizeof(image), &br);\n        LCD_ShowPicture(0,40,159,79);\n        offset += 12800;\n        f_lseek(&fil, offset);\n        LEDB_TOG;\n}\n```\n\n最后，本工程可以到 github 下载体验，[点击进行传送](https://github.com/sipeed/Longan_GD32VF_examples)"}, "/hardware/zh/longan/Nano/Longan_nano.html": {"title": "Longan nano ", "content": "# Longan nano \n\n## 介绍\n\nLongan Nano是基于兆易创新(GigaDevice)的GD32VF103CBT6(RISC-V架构)芯片设计的极简开发板。开发板将芯片所有IO引出，设计小巧精致，板载Type-C、LCD、SD卡、JTAG等接口，方便广大学生、工程师、极客爱好者们接触学习最新一代的 RISC-V处理器。\n\n![Longan_nano_pin](./../../../assets/Longan/nano/Longan_nano.124.jpg)\n\n## 参数\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | 基于 RISC-V 32 位内核的 GD32VF103CBT6 |\n| 内核功耗 | 仅传统 Cortex-M3 的 1/3 |\n| 存储 | 128KB Flash, 32KB SRAM |\n|外设 | 4 x general purpose 16-bit timer, 2 x basic 16-bit timer, 1 x advanced 16-bit timer,<br>Watchdog, RTC, Systick<br>3 x USART, 2 x I2C, 3 x SPI, 2 x I2S, 2 x CAN, 1 x USBFS (OTG), 2 x ADC (10 channel), 2 x DAC |\n| 按键 | 1 个复位按键和 1 个 BOOT 按键（连接到 GPIO） |\n| 屏幕接口 | SPI 接口（标配 0.96 寸 160x80 RGB IPS LCD） |\n| 存储接口 | 板载 TF 卡座子 |\n| 调试接口 | 2x4 排针引出 JTAG 调试接口和串口 |\n| 晶振 | 8MHz 无源晶振 + 32.768KHz RTC 无源晶振 |\n| LED | 板载 1 个 RGB LED |\n| GPIO 数量 | 2 引出 28 个 GPIO 到排针 |\n### 新版照片\n![](./../../../assets/Longan/nano/Longan-nano_PINOUT.svg)\n \n![](./../../../assets/Longan/nano/longan-nano-1.png)\n### 旧版照片\n![](./../../../assets/Longan/nano/longan_nano_pinout_old.png)\n\n![](./../../../assets/Longan/nano/longan-nano-old.png)\n\n## 使用\n\n[Longan使用](/soft/longan/zh/readme.md)\n\n## 产品技术支持\nLongan Nano 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/zh/longan/Nano/get_started/debug.html": {"title": "Debug 调试", "content": "Debug 调试\n======\n\n## 连接调试器\n| 开发板 | 调试器 |\n| :----: | :----: |\n|  JTDO  |  TDO   |\n|  JTDI  |  TDI   |\n|  JTCK  |  TCK   |\n|  JTMS  |  TMS   |\n|  3V3   |  3V3   |\n|  GND   |  GND   |\n\n## 修改配置文件\n修改工程配置文件 `platformio.ini`， 在下面添加\n\n```ini\ndebug_tool = jlink\n```\n\n根据实际调试器型号选择。目前支持的调试器列表\n\n* `jlink`\n* `gd-link`\n* `ft2232`\n* `sipeed-rv-debugger`\n* `altera-usb-blaster`\n* `um232h`\n* `rv-link`\n\n## 一键调试\n\n切换到 VS CODE 左侧的 `DEBUG` 界面， 点击绿色箭头即可进行调试。\n\n![](./../assets/pio_debug_longan.png)."}, "/hardware/zh/longan/Nano/get_started/sipeed-debugger.html": {"title": "使用 Sipeed 调试器", "content": "---\ntitle: 使用 Sipeed 调试器\n---\n\n## Sipeed rv debugger\n\n\n## Sipeed rv debugger lite"}, "/hardware/zh/longan/Nano/get_started/pio.html": {"title": "PIO 配置", "content": "PIO 配置\n=====\n\n## 安装 VS-CODE\nVS CODE 是一款比较常用的开发工具。前往[VScode官网](https://code.visualstudio.com/ \"VScode官网\")，下载安装对应操作系统版本的安装包即可。\n\n## 安装 PIO 插件\n打开 VSCode -> 点击左侧扩展 -> 搜索 PlatformIO -> 点击安装插件 -> 等待安装完成 -> 重启 VSCODE\n\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/0d501a8515a735fba54e2f5de908cd1e.png)\n\n## 安装 GD32V 平台定义\n\nPIO 目前提供**命令行**与**图形界面**两种方式来安装。下面将分别介绍：\n（PS : 推荐命令行，因为能看到下载进度条。）\n\n### 命令行\n\n点击PIO图标 -> 点击左下方的New Terminal-> 在终端窗口中执行下面的安装指令\n\n* 发布版 （稳定版本）\n```\nplatformio platform install gd32v\n```\n\n* 开发版（与Github同步）\n```\nplatformio platform install https://github.com/sipeed/platform-gd32v\n```\n![](./../assets/pio_install_gd32v.png)\n\n注：受国内网络环境影响，安装过程需要较长时间，请耐心等待。\n\n\n### 图形界面\n\n打开VS CODE -> 点击左侧 PIO 图标 -> 点击左下方的 Open 选项 -> 点击 Platforms 页面 -> 点击 Advanced Installation 打开添加窗口\n![](./../assets/pio_install_add_gd32v_step1.png)\n\n在打开的窗口中输入下面的网址\n```\nhttps://github.com/sipeed/platform-gd32v.git\n```\n\n点击 Install 即可添加完成。\n\n![](./../assets/pio_install_add_gd32v_step2.png)\n\n耐心等待即可安装成功。 （安装失败多为网络原因， 请更换网络环境后再次尝试）\n![](./../assets/pio_install_add_gd32v_step3.png)"}, "/hardware/zh/longan/Nano/get_started/blink.html": {"title": "Blink 闪灯程序", "content": "---\ntitle: Blink 闪灯程序\n---\n\n## 创建 Blink 工程\n\n* 打开 PIO 主页 选择 `Project Examples`\n\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/d977e844490e6ccc4625f701883a29f5.png)\n\n* 选择 `arduino blink` 点击 `Import` 导入示例程序 （初次导入需要下载架构文件及工具，需要等待较长时间）\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/82943a6b74077e6210e2d9421cb5438f.png)\n\n* 导入成功后即可见到示例工程\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/1262373ca7b0b483e30dac1124adaabf.png)\n\n## 工程配置文件\n\n\n* 我们首先需要编辑工程配置文件 `platformio.ini` 根据自己的开发板型号，删掉其他开发板环境。\n\n![](./../assets/pio_ini_cfg.png)\n\n配置示例\n```ini\n[env:sipeed-longan-nano]\nplatform = gd32v          ;平台，选择gd32v\nframework = arduino       ;可选 gd32vf103-sdk 或 arduino\nboard = sipeed-longan-nano ; 开发板\nmonitor_speed = 115200     ; 串口监视器波特率\nupload_protocol = serial   ; 下载工具 默认串口， 可选 dfu、jlink、gd-link 等\ndebug_tool = jlink         ; 调试工具 默认jlink ，可选 sipeed-rv-debugger 等\n```\nPIO 可以在配置文件中实现设置宏定义， 控制编译流程等自定义功能，高级用法请参阅 [PIO 官方文档](https://docs.platformio.org/en/latest/projectconf.html).\n\n## 一键编译\n\n点击左下角的 `Build` 即可构建项目\n![](./../assets/pio_complie.png)\n\n## 连接开发板\n### 串口 ISP 下载\n* 准备 USB 转 串口下载器\n* 连接开发板与下载器\n* 修改 `platformio.ini` 文件， 添加下面一行内容：\n```ini\nupload_protocol = serial\n```\n* 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入下载模式。\n\n### JTAG 下载\n* 准备J-link 或 Sipeed RV 调试器\n* 连接开发板\n* 修改 `platformio.ini` 文件， 添加下面一行内容：\n```ini\nupload_protocol = jlink\n```\n或者\n```ini\nupload_protocol = sipeed-rv-debugger\n```\n\n### USB DFU 下载\n* **首次** 使用需要安装 libusb 驱动程序， 请参考此步骤 [使用 Zaidig 安装驱动](###使用zadig安装驱动).\n* 准备 USB Type-c 数据线\n* 使用数据线连接电脑与开发板\n* 修改 `platformio.ini` 文件， 添加下面一行内容：\n```ini\nupload_protocol = dfu\n```\n* 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入 DFU 模式。\n\n\n## 一键下载\n\n按照上面步骤选择好下载方式后，即可使用 PIO 内置工具一键下载。\n\n点击左下角的 `Upload` 即可向开发板上传程序。\n\n![](./../assets/pio_upload.png)\n\n### 使用Zadig安装驱动\nPIO 内置 dfu-util 下载工具，使用此工具需要为开发板安装 libusb 驱动。（注意： 与 GD 官方驱动不同）\n\n建议通过 Zadig 安装 winusb 驱动。[下载地址](https://github.com/pbatard/libwdi/releases/download/b721/zadig-2.4.exe)\n\n下载成功后打开 Zadig\n\n在下拉栏中选择 GD32V， 替换驱动选择 WinUSB, 点击替换按钮，即可替换成功。\n![](./../assets/dfu_zadig.png)\n### DFU 图形界面下载\n\n下载DFU工具：<https://dl.sipeed.com/shareURL/LONGAN/Nano/Tools>\n在里面找到 `GD32_MCU_Dfu_Tool_V3.8.1.5784_1.rar` 文件并下载\n\n解压出两个文件夹：\n\n- GD32 MCU Dfu Drivers_v1.0.1.2316 \n- GD32 MCU Dfu Tool_v3.8.1.5784\n\n先进入driver文件夹，安装对应的驱动文件，注意使用管理员权限运行\n\n![](./../assets/examples/how_to_install_dfu.png)\n\n再回到Tools目录下运行 GD32 MCU Dfu Tool.exe\n将 Longan Nano 插到电脑，按住板子上 Boot0 键的时候按下 reset 键。\n就可以看到 DFU 工具中识别到了 GD32VF 芯片\n\n选择对应的固件文件，并勾选烧录后校验，点击OK，即可进行烧录\n\n- 烧录完成之后不会自动复位，需要自己手工按下复位按键(按下reset)。\n\n![](./../assets/examples/how_to_use_dfu.png)"}, "/hardware/zh/longan/Nano/get_started/rv-link.html": {"title": "使用 RV-LINK", "content": "使用 RV-LINK\n=========\n\n## 什么是 RV-LINK\n\n**RV-LINK** 是一个基于 RISC-V 开发板的仿真器固件，通过烧写 **RV-LINK** 固件， 可以将 **Sipeed Longan Nano** 开发板变成一个 `jtag` 调试器，用来调试另一块 Longan 或者其他支持 jtag 调试的开发板。 RV-LINK 项目地址: [https://gitee.com/zoomdy/RV-LINK](https://gitee.com/zoomdy/RV-LINK)\n\n## 烧写 RV-LINK 固件\n\n### 使用 PlatformIO 工程一键烧录\n* 下载 RV-LINK 源码\n\n    项目源码下载地址：[http://dl.sipeed.com/LONGAN/Nano/Tools/RV-LINK-pio-src-v0.1.zip](http://dl.sipeed.com/LONGAN/Nano/Tools/RV-LINK-pio-src-v0.1.zip)\n\n    也可以从RV-LINK官方项目下载: [https://gitee.com/zoomdy/RV-LINK](https://gitee.com/zoomdy/RV-LINK)\n* 使用 VSCODE 打开工程目录\n\n    将上面下载的源码解压到单独的文件夹\n    然后使用 VSCODE 打开源码文件夹\n\n    如下图所示：\n    ![](./../assets/pio_open_rvlink.png)\n\n    通常使用 DFU 方式烧录固件，**不需要**修改配置文件。(使用 DFU 方式下载请安装 libusb 驱动, 参考[使用Zadig安装驱动](blink.md/#使用zadig安装驱动))\n\n    如果需要更改烧录方式，可以通过修改 `platformio.ini` 文件来修改， 具体配置方式请参考：[修改工程配置文件](blink.md/#工程配置文件)\n\n* 使用 PIO 烧录固件\n\n    连接开发板，使开发板进入烧录模式后，点击左下角的箭头符号即可进行烧录。\n\n    烧录成功后，可以看到开发板上的绿灯闪烁，将开发板连接到电脑USB口之后，可以在设备管理器中看到多出了一个串口设备。此时 Longan 板子就成功变成了 RV-LINK 调试器。\n\n### 其他烧录方式\n\n参考文档： [将 Longan Nano 开发板变成 RISC-V 仿真器](https://gitee.com/zoomdy/RV-LINK/wikis/%E5%B0%86%20Longan%20Nano%20%E5%BC%80%E5%8F%91%E6%9D%BF%E5%8F%98%E6%88%90%20RISC-V%20%E4%BB%BF%E7%9C%9F%E5%99%A8)\n\n## 使用 RV-LINK 调试\n\n### 连接开发板\n\n将刷好 RV-LINK 固件的开发板与待调试开发板 jtag 连线按下表连接\n\n| RV-LINK | 待调试开发板 |\n| :----: | :----: |\n|  JTDO  |  JTDO  |\n|  JTDI  |  JTDI  |\n|  JTCK  |  JTCK  |\n|  JTMS  |  JTMS  |\n|  3V3   |  3V3   |\n|  GND   |  GND   |\n\n#### WIN7 用户安装 GD 串口驱动\n\n见此链接[安装 USB 串口驱动](https://gitee.com/zoomdy/RV-LINK/wikis/GDB%20%E4%BD%BF%E7%94%A8%20RV-LINK%20%E4%BB%BF%E7%9C%9F%E5%99%A8%E8%B0%83%E8%AF%95%20RISC-V%20%E7%A8%8B%E5%BA%8F?sort_id=1667650#%E5%AE%89%E8%A3%85-usb-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8)\n\n### 在 PlatformIO IDE 中使用 RV-LINK\n\nRV-LINK 在 PlatformIO IDE 可以和其他调试器一样，支持一键启动调试。\n\n只需要在工程的 `platformio.ini` 配置文件中，指定调试器选项和调试器端口选项。\n\n示例代码\n\n```ini\n[env:sipeed-longan-nano]\nplatform = gd32v\nframework = gd32vf103-sdk\nboard = sipeed-longan-nano\nmonitor_speed = 115200\nupload_protocol = rv-link ; rv-link下载选项\ndebug_tool = rv-link ; rv-link调试选项\ndebug_port = COM2    ; 使用rv-link 必填此项 调试器串口\n```\n\n### 在其他平台使用 RV-LINK\n\n参考 [RV-LINK WIKI](https://gitee.com/zoomdy/RV-LINK/wikis/)"}, "/hardware/zh/longan/One/index.html": {"title": "", "content": "敬请期待"}, "/hardware/zh/modules_spmod/spmod_eink.html": {"title": "SPMOD - Eink", "content": "# SPMOD - Eink\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_eink/sp_eink.png\" alt=\"XXX\" style=\"zoom:40%;\" />\n\nSPMOD_Eink(墨水屏模块)采用 GDEW0154M09 电子墨水屏。\n\n## SPMOD - Eink 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI接口与屏幕底板相连\n- 电子墨水屏：GDEW0154M09是一款1.54”，SPI接口控制，拥有24P FPC(0.5mm间距)接口的电子墨水屏。拥有超广可视角。\n- 支持 1 bit 黑/白显示\n- 分辨率：200x200\n- 模块尺寸：35*30*3.8mm\n\n### GDEW0154M09 电子墨水屏介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.3V~3.6V |\n| 工作电流 | 1~3mA |\n| 工作温度范围 | -40℃~85℃ |\n| 休眠电流 | <5uA |\n| 屏幕大小 | 1.54英寸 |\n| 有效显示区域 | 27.6mm |\n| 分辨率 | 200*200 |\n| 色彩 | 1 bit 黑/白显示 |\n| 对外接口 | 24P FPC (0.5mm间距) |\n> 内部集成电路包含门缓冲器、源缓冲器，接口，时序控制逻辑，振荡器，DC-DC，SRAM，LUT，VCOM\n\n\n###  SPMOD_Eink 模块引脚定义：\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G | 模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | D/C | I | 数据/命令输入切换引脚 |\n| 4 | RES | I |  模块复位引脚，低有效 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I |SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，主机输出从机输入 |\n| 8 | BSY | O | BUSY状态输出引脚 |\n\n<img src=\"../../assets/spmod/spmod_eink/sp_eink_back.png\" height=\"300\" />\n\n- 接线方式：\n\n|  MCU:FUN(IO)   | SP_Eink |\n| :------------: | :-----: |\n|  GPIOHS(IO_7)  |   RES   |\n| SPIOHS(IO_15)  |   D/C   |\n| SPIOHS(IO_20)  |   CS   |\n| SPI:SCK(IO_21) |   SCK   |\n| SPI:MOSI(IO_8) |   SI    |\n|  GPIOHS(IO_6) |   BSY   |\n|  2.3-3.6V   |  3.3V   |\n|   GND    |   GND   |\n\n<img src=\"../../assets/spmod/spmod_eink/connection.png\" height=\"250\">\n\n### 基本指令列表\n\n| 指令  |       功能       |\n| :---: | :--------------: |\n| 0x10  | 开始发送黑白图像 |\n| 0x13  | 开始发送红白图像 |\n| 0x12  |  刷新图像到屏幕  |\n\n*更多指令信息参考[GDEW0154M09.pdf](https://dl.sipeed.com/shareURL/MAIX/HDK/Spmod_CN/sp_eink)*\n\n## 使用例程\n\n* 流程\n\n  1. 初始化配置\n  2. 创建 Image 并填充\n  3. 发送图像并刷新\n\n### C 示例：\n\n```c\n\n  spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  fpioa_set_function(SPI_Eink_CS_PIN_NUM, FUNC_SPI1_SS0);   // SPI_Eink_CS_PIN_NUM: 20;\n  fpioa_set_function(SPI_Eink_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_Eink_SCK_PIN_NUM: 21;\n  fpioa_set_function(SPI_Eink_MOSI_PIN_NUM, FUNC_SPI1_D0);  // SPI_Eink_MOSI_PIN_NUM: 8;\n\n  fpioa_set_function(SPI_Eink_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_DC_GPIO_NUM);   // SPI_Eink_DC_PIN_NUM: 21;\n  fpioa_set_function(SPI_Eink_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_RST_GPIO_NUM); // SPI_Eink_RST_PIN_NUM: 7;\n  fpioa_set_function(SPI_Eink_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_BL_GPIO_NUM);   // SPI_Eink_BL_PIN_NUM: 6;\n\n  gpiohs_set_drive_mode(SPI_Eink_DC_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_Eink_RST_GPIO_NUM, GPIO_DM_OUTPUT);\n\n  gpiohs_set_pin(SPI_Eink_DC_GPIO_NUM, GPIO_PV_HIGH);\n  gpiohs_set_pin(SPI_Eink_RST_GPIO_NUM, GPIO_PV_HIGH);\n\n  gpiohs_set_drive_mode(SPI_Eink_BL_PIN_NUM, GPIO_DM_INPUT_PULL_UP);\n  gpiohs_set_pin_edge(SPI_Eink_BL_PIN_NUM, GPIO_PE_BOTH);\n\n    EPD_DisplayInit(); //EPD init\n\n  //Paint initialization\n  Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE); //Set screen size and display orientation\n  Paint_SelectImage(BlackImage);                                 //Set the virtual canvas data storage location\n\n  Paint_Clear(WHITE); //clear paint\n  Paint_DrawString_EN(0, 0, \"sipeed\", &Font8, WHITE, BLACK);   //5*8\n  Paint_DrawString_EN(0, 10, \"sipeed\", &Font12, WHITE, BLACK); //7*12\n  Paint_DrawString_EN(0, 25, \"sipeed\", &Font16, WHITE, BLACK); //11*16\n  Paint_DrawString_EN(0, 45, \"sipeed\", &Font20, WHITE, BLACK); //14*20\n  Paint_DrawString_EN(0, 80, \"sipeed\", &Font24, WHITE, BLACK); //17*24\n  EPD_FullDisplay(BlackImage, BlackImage, 0);                  //display image\n\n```\n\n### MaixPy 例程：\n\n```python\n\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n              polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8)\n\n  fm.register(20, fm.fpioa.GPIOHS20, force=True) # SPI_Eink_SS_PIN_NUM: 20;\n  fm.register(15, fm.fpioa.GPIOHS15, force=True) # SPI_Eink_DC_PIN_NUM: 15;\n  fm.register(6, fm.fpioa.GPIOHS6, force=True) # SPI_Eink_BUSY_PIN_NUM: 6;\n  fm.register(7, fm.fpioa.GPIOHS7, force=True) # SPI_Eink_RST_PIN_NUM: 7;\n\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  dc = GPIO(GPIO.GPIOHS15, GPIO.OUT)\n  busy = GPIO(GPIO.GPIOHS6, GPIO.IN, GPIO.PULL_DOWN)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.OUT)\n\n  epd = SPEink(spi1, cs, dc, rst, busy, SPEink_WIDTH, SPEink_HEIGHT, SPEink_ROTATION)\n  epd.init()\n\n  img = image.Image()\n  img = img.resize(200, 200)\n  img.draw_line(0, 0, 100, 100)\n\n  epd.display(img)\n\n```\n\n### 运行环境\n\n|  语言  |  开发板  |          SDK/固件版本          |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*MaixPy固件建议自行从最新源码编译*\n\n### 运行结果\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_eink/sp_eink_c.png\" height=\"250\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_eink/sp_eink_py.png\" height=\"250\" />\n\n### 移植\n\n修改以下参数即可\n\n* C\n\n  ```c\n    // board_config.h\n    #define SPI_INDEX 1\n    #define SPI_SCLK_RATE 600 * 1000\n    #define SPI_CHIP_SELECT_NSS 0 //SPI_CHIP_SELECT_0\n\n    #define SPI_Eink_CS_PIN_NUM 20\n    #define SPI_Eink_SCK_PIN_NUM 21\n    #define SPI_Eink_MOSI_PIN_NUM 8\n\n    #define SPI_Eink_DC_PIN_NUM 15\n    #define SPI_Eink_BL_PIN_NUM 6\n    #define SPI_Eink_RST_PIN_NUM 7\n\n    #define SPI_Eink_DC_GPIO_NUM 15\n    #define SPI_Eink_BL_GPIO_NUM 6\n    #define SPI_Eink_RST_GPIO_NUM 7\n  ```\n\n* MaixPy\n\n  ```python\n  ################### config ###################\n    SPI_Eink_NUM = SPI.SPI1\n    SPI_Eink_DC_PIN_NUM = const(15)\n    SPI_Eink_BUSY_PIN_NUM = const(6)\n    SPI_Eink_RST_PIN_NUM = const(7)\n    SPI_Eink_CS_PIN_NUM = const(20)\n    SPI_Eink_SCK_PIN_NUM = const(21)\n    SPI_Eink_MOSI_PIN_NUM = const(8)\n    SPI_Eink_FREQ_KHZ = const(600)\n  ##############################################\n  ```\n\n\n## 参考设计\n\n- SPMOD_Eink 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_eink/sipeed_spmod_eink.png\" height=\"250\" />\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/SDK](https://dl.sipeed.com/shareURL/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/HDK](https://dl.sipeed.com/shareURL/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_bt.html": {"title": "SPMOD - BT", "content": "# SPMOD - BT\n\n\n## 概述\n\n![](./../../assets/spmod/spmod_bt/sp_bt.png)\n\nSPMOD-BT(蓝牙 模块)采用 YDJ-23。\n\n## SPMOD - BT 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用 SP-MOD UART 和蓝牙模块通讯\n- JDY-23蓝牙模块：支持BLE 5.0（兼容 BLE4.0、BLE4.2）。具有UART接口。模块支持AT指令控制。具备超低功耗特性和高可靠性\n- 板载两个状态指示LED，模块状态一目了然\n- 模块尺寸：25.6\\*20.2\\*3.2mm\n\n### JDY-23 蓝牙介绍：\n\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作频段：| 2.4G |\n| 发射功率：| 4db（最大） |\n| 通信接口：| UART |\n| 工作电压：| 1.8V~3.6V |\n| 工作温度：| -40℃ - 80℃ |\n| 天线：| 板载PCB天线 |\n| 接收灵敏度：| -97dbm |\n| 主从支持：| 从机 |\n| 蓝牙版本：| BLE 5.0（兼容 BLE4.0、BLE4.2） |\n| 唤醒状态电流：| 800uA（广播模式） |\n| 浅睡状态电流：| <50uA (广播模式) |\n| 深度睡眠电流：| 9uA （无广播） |\n| 默认串口波特率：| 9600 |\n\n### SPMOD_BT 模块引脚定义：\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G | 模块电源地 |\n| 2 | AWK | I/O | 模块休眠唤醒引脚，低有效 |\n| 3 | STA | I/O | 蓝牙连接状态连接，连接成功时输出高电平 |\n| 4 | RX | I | 模块UART数据接受引脚，连接上位机TX |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | --- | NC | 悬空引脚，无功能 |\n| 7 | RST | I/O | 模块复位引脚，低电平有效 |\n| 8 | TX  | O | 模块UART数据发送引脚，连接上位机的RX |\n\n<img src=\"../../assets/spmod/spmod_bt/back.jpg\" height=\"250\" />\n\n- 接线方式：\n\n| MCU:FUN(IO) | SP_BT |\n| :---------: | :---: |\n| UART:TX(IO_7) | RX |\n| USRT:RX(IO_6) | TX |\n| 1.8-3.3V | 3.3V |\n| GND | GND |\n\n<img src=\"../../assets/spmod/spmod_bt/connection.png\" height=\"250\">\n\n### 主要 AT 指令列表：\n\n| 指令 | 描述 |\n| --- | --- |\n|AT+POWR | 显示模块发送功率 |\n|AT+RST\t| 软复位 |\n|AT+MAC\t| 显示MAC 地址 |\n|AT+NAME | 显示广播名 |\n|AT+HOSTEN | 从模式或 IBEACON 工作模式 |\n|AT+IBUUID | IBEACON 的 UUID |\n|AT+DISC | 指令断开连接 |\n|AT+SLEEP | 睡眠 |\n|AT+MTU | 设置模块发送的发包数长 |\n\n*更多AT指令请参考[JDY-23-V2.1.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_bt)*\n\n## 使用例程\n\n* 流程\n  1. 发送 AT 指令\n  2. 接收数据\n  3. 判断是否设置成功\n\n### C 示例：\n\n\n```c\n\n  // set uart rx/tx func to io_6/7\n  fpioa_set_function(6, FUNC_UART1_RX + UART_NUM * 2);\n  fpioa_set_function(7, FUNC_UART1_TX + UART_NUM * 2);\n  uart_init(UART_DEVICE_1);\n  uart_configure(UART_DEVICE_1, 9600, 8, UART_STOP_1, UART_PARITY_NONE);\n\n  //change the name of sp_bt module to MAIXCUBE\n  uart_send_data(UART_NUM, \"AT+NAMEMAIXCUBE\\r\\n\", strlen(\"AT+NAMEMAIXCUBE\\r\\n\")); //send AT order\n  msleep(100);\n  ret = uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response\n  if(ret != 0 && strstr(rcv_buf, \"OK\"))\n  {\n     printk(LOG_COLOR_W \"set name success!\\r\\n\");\n  }\n\n  // get the name of sp_bt module\n  uart_send_data(UART_NUM, \"AT+NAME\\r\\n\", strlen(\"AT+NAME\\r\\n\")); //send AT order\n  msleep(100);\n  ret = uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response\n  if(ret != 0 && strstr(rcv_buf, \"NAME\"))\n  {\n     printk(LOG_COLOR_W \"get name success!\\r\\n\");\n  }\n\n```\n\n### MaixPy 例程：\n\n```python\n    # set uart rx/tx func to io_6/7\n  fm.register(6,fm.fpioa.UART1_RX)\n  fm.register(7,fm.fpioa.UART1_TX)\n  uart = UART(UART.UART1,9600,8,1,0,timeout=1000, read_buf_len=4096)\n\n  #change the name of sp_bt module to MAIXCUBE\n  uart.write(\"AT+NAMEMAIXCUBE\\r\\n\") #send AT order\n  time.sleep_ms(100)\n  read_data = uart.read() #receive response\n  if read_data:\n      read_str = read_data.decode('utf-8')\n      count = read_str.count(\"OK\")\n      if count != 0:\n          uart.write(\"set name success\\r\\n\")\n\n  # get the name of sp_bt module\n  uart.write(\"AT+NAME\\r\\n\") #send AT order\n  time.sleep_ms(100)\n  read_data = uart.read() #receive response\n  if read_data:\n      read_str = read_data.decode('utf-8')\n      count = read_str.count(\"NAME\")\n      if count != 0:\n          uart.write(\"get name success\\r\\n\")\n```\n\n*注意发送AT指令后一定要加上\\r\\n*\n\n### 运行结果:\n\n  使用[BLE Utility](../../tools/bledebugger.apk)连接设备后进行收发测试结果如下:\n\n  <center class=\"third\">\n      <img src=\"../../assets/spmod/spmod_bt/res.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_bt/res1.png\" height=\"250\"/>\n  </center>\n\n### 运行环境:\n\n  |  语言  |  开发板  | SDK/固件版本                   |\n  | :----: | :------: | :----------------------------- |\n  |   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n  | MaixPy | MaixCube | maixpy v0.5.1                  |\n\n## 参考设计\n\n- SPMOD_BLE 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_bt/sipeed_spmod_bt.png\" height=\"250\" />\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/SDK](https://dl.sipeed.com/shareURL/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/HDK](https://dl.sipeed.com/shareURL/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_psram.html": {"title": "SPMOD - PSRAM", "content": "# SPMOD - PSRAM\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_psram/sp_psram.png\" width=\"\" height=\"300\" />\n\nSPMOD_PSRAM(PSRAM模块)采用 IPS6404L-SQ 芯片。\n\n## SPMOD - PSRAM 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI/QPI接口连接\n- Pseudo−SRAM芯片：IPS6404L-SQ是一个容量为64Mbit，SPI/QPI接口，具有出色的可靠性的和响应时间的伪随机动态存储器芯片。\n- 工作频率：104MHz\n- SPI读取响应时间：30.3ns\n- 模块尺寸：15.0\\*10.0\\*13.3mm\n\n###  IPS6404L-SQ 迫真静态随机存储器介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.7V~3.6V |\n| 工作电流 | 10mA |\n| 工作温度 | -30℃~85℃ |\n| 休眠电流 | <250μA |\n| 工作频率 | 104Mhz |\n| SPI读取响应时间 | 30.3ns |\n| 其他操作响应时间 | 9.3ns |\n| 对外接口 | PI/QPI可选，默认SPI |\n\n\n###  SPMOD_PSRAM 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND  | G | 模块电源地 |\n| 2 | CS | I  | SPI片选引脚 |\n| 3 | D1 | I/0 | MISO数据引脚，模块数据输出 |\n| 4 | D3 | I/O | 无功能 (QSPI模式下为IO3) |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | D0 | I/0 | MOSI数据引脚，模块数据输入 (QSPI模式下为IO0) |\n| 8 | D2 | I/O | 无功能 (QSPI模式下为IO2) |\n\n\n<img src=\"\" width=\"300\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_PSRAM 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_psram/sipeed_spmod_psram.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_lcd1.14.html": {"title": "SPMOD - LCD 1.14", "content": "# SPMOD - LCD 1.14\n\n\n## 概述\n\n![](../../assets/spmod/spmod_lcd1.14/sp_lcd.png)\n\nSPMOD_LCD1.14(1.14寸 LCD 屏幕模块)采用 ST7735S TFT LCD屏。\n\n## SPMOD - LCD1.14 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 采用常见 LCD 驱动 IC ST7735S(4 线 SPI 通讯)\n- 分辨率：240\\*135\n- 模块尺寸：35.0\\*20.0mm\n\n### ST7735S TFT LCD屏 介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.5V~4.8V |\n| 工作电流 | <20mA |\n| 工作温度 | -30℃ ~ 85℃ |\n| 休眠电流 | <0.1mA |\n| 屏幕大小 | 1.14英寸 |\n| 有效显示区域 | 1.7mm * 10.8mm |\n| 分辨率 | 160*80 |\n| 色彩 | 132个RGB通道 |\n| 对外接口 | 8P FPC (0.5mm间距) |\n> 内部集成电路包含DC / DC转换器、可调VCOM生成器、非易失性（NV）存储器（用于存储初始寄存器设置）、显示时钟的振荡器以及时序控制器\n\n\n###  SPMOD_LCD1.14 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G  | 模块电源地 |\n| 2 | CS | I  | SPI片选引脚 |\n| 3 | D/C | I  | 数据/命令输入切换引脚  |\n| 4 | RST | I  | 模块复位引脚，低有效 |\n| 5 | 3V3 | V  | 模块电源输入正 |\n| 6 | SCK | I  | SPI串行时钟引脚 |\n| 7 | SI | I/O  | MOSI数据引脚，主机输出从机输入 |\n| 8 | BL | I  | 背光控制引脚，低电平关闭背光 |\n\n<img src=\"../../assets/spmod/spmod_lcd1.14/back.png\" width=\"300\" />\n\n- 接线方式:\n\n|   MCU:FUN(IO)   | SP_LCD |\n| :-------------: | :----: |\n|  GPIOHS7(IO_7)  |  RST   |\n| GPIOHS15(IO_15) |  D/C   |\n| SPI:SS0(IO_20)  |   CS   |\n| SPI:SCK(IO_21)  |  SCK   |\n| SPI:MOSI(IO_8)  |   SI   |\n|  GPIOHS6(IO_6)  |   BL   |\n|  2.5~4.8V   |  3.3V  |\n|  GND   |  GND   |\n\n<img src=\"../../assets/spmod/spmod_lcd1.14//connection.png\" height=\"250\">\n\n## 使用例程\n\n* 流程\n\n  1. 初始化配置\n  2. 创建 Image 并填充\n  3. 发送图像并刷新\n\n### C 示例：\n\n```c\n\n  fpioa_set_function(SPI_IPS_LCD_CS_PIN_NUM, FUNC_SPI1_SS0);   // SPI_IPS_LCD_CS_PIN_NUM: 20;\n  fpioa_set_function(SPI_IPS_LCD_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_IPS_LCD_SCK_PIN_NUM: 21;\n  fpioa_set_function(SPI_IPS_LCD_MOSI_PIN_NUM, FUNC_SPI1_D0);  // SPI_IPS_LCD_MOSI_PIN_NUM: 8;\n  fpioa_set_function(SPI_IPS_LCD_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_DC_GPIO_NUM);   // SPI_IPS_LCD_DC_PIN_NUM: 15; SPI_IPS_LCD_DC_GPIO_NUM: 15;\n  fpioa_set_function(SPI_IPS_LCD_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_RST_GPIO_NUM); // SPI_IPS_LCD_RST_PIN_NUM: 7; SPI_IPS_LCD_RST_GPIO_NUM: 7;\n  fpioa_set_function(SPI_IPS_LCD_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_BL_GPIO_NUM);   // SPI_IPS_LCD_BL_PIN_NUM: 6; SPI_IPS_LCD_BL_GPIO_NUM: 6;\n\n  // set gpiohs work mode to output mode\n  gpiohs_set_drive_mode(SPI_IPS_LCD_DC_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_IPS_LCD_RST_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_IPS_LCD_BL_GPIO_NUM, GPIO_DM_OUTPUT);\n\n  spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  ips_lcd_init(); // init\n  LCD_ShowPicture(0, 0, LCD_W, LCD_H, gImage_nanke); // display\n```\n\n### MaixPy 例程：\n\n```python\n\n  # 20: SPI_LCD_CS_PIN_NUM;\n  fm.register(SPI_LCD_CS_PIN_NUM, fm.fpioa.GPIOHS20, force=True)\n  # 15: SPI_LCD_DC_PIN_NUM;\n  fm.register(SPI_LCD_DC_PIN_NUM, fm.fpioa.GPIOHS15, force=True)\n  # 6: SPI_LCD_BUSY_PIN_NUM;\n  fm.register(SPI_LCD_BUSY_PIN_NUM, fm.fpioa.GPIOHS6, force=True)\n  # 7: SPI_LCD_RST_PIN_NUM;\n  fm.register(SPI_LCD_RST_PIN_NUM, fm.fpioa.GPIOHS7, force=True)\n\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  dc = GPIO(GPIO.GPIOHS15, GPIO.OUT)\n  busy = GPIO(GPIO.GPIOHS6, GPIO.OUT)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.OUT)\n\n  # 21: SPI_LCD_SCK_PIN_NUM; 8: SPI_LCD_MOSI_PIN_NUM;\n  spi1 = SPI(SPI_LCD_NUM, mode=SPI.MODE_MASTER, baudrate=SPI_LCD_FREQ_KHZ * 1000,\n              polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=SPI_LCD_SCK_PIN_NUM, mosi=SPI_LCD_MOSI_PIN_NUM)\n\n  ips = SPLCD114(spi1, cs, dc, rst, busy, IPS_WIDTH, IPS_HEIGHT, IPS_MODE)\n\n  # create an 'image' and fill it\n  img = image.Image()\n  img.draw_rectangle(80, 80, 30, 30)\n\n  # display\n  ips.display(img)\n\n\n```\n\n### 运行环境\n\n|  语言  |  开发板  |          SDK/固件版本          |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*MaixPy固件建议自行从最新源码编译*\n\n### 运行结果\n\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_c.png\" height=\"250\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_py.png\" alt=\"sp_lcd1.14_py\" height=\"250\" />\n\n### 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n```c\n  // board_config.h\n  #define SPI_INDEX           1\n  #define SPI_SCLK_RATE       600*1000\n  #define SPI_CHIP_SELECT_NSS 0 // SPI_CHIP_SELECT_0\n\n  #define SPI_IPS_LCD_CS_PIN_NUM      20\n  #define SPI_IPS_LCD_SCK_PIN_NUM     21\n  #define SPI_IPS_LCD_MOSI_PIN_NUM    8\n\n  #define SPI_IPS_LCD_DC_PIN_NUM     15\n  #define SPI_IPS_LCD_BL_PIN_NUM      6\n  #define SPI_IPS_LCD_RST_PIN_NUM     7\n\n  #define SPI_IPS_LCD_DC_GPIO_NUM     15\n  #define SPI_IPS_LCD_BL_GPIO_NUM     6\n  #define SPI_IPS_LCD_RST_GPIO_NUM    7\n\n  #define USE_HORIZONTAL 3    // 0/1 is horizontal, and 2/3 is vertical.\n```\n\n* Maixpy\n\n```python\n  ################### config ###################\n  SPI_LCD_NUM = SPI.SPI1\n  SPI_LCD_DC_PIN_NUM = const(15)\n  SPI_LCD_BUSY_PIN_NUM = const(6)\n  SPI_LCD_RST_PIN_NUM = const(7)\n  SPI_LCD_CS_PIN_NUM = const(20)\n  SPI_LCD_SCK_PIN_NUM = const(21)\n  SPI_LCD_MOSI_PIN_NUM = const(8)\n  SPI_LCD_FREQ_KHZ = const(600)\n  ##############################################\n```\n\n\n## 参考设计\n\n- SPMOD_LCD1.14 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_lcd1.14/sipeed_spmod_lcd1.14.png\" height=\"250\" />\n\n\n-----\n\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_lora.html": {"title": "SPMOD - LoRa", "content": "# SPMOD - LoRa\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_lora/sp_lora.png\"  width=\"\" height=\"300\" />\n\nSPMOD_LoRa(LoRa 模块)采用 M-XL8 模块。\n\n## SPMOD - LoRa 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用 SP-MOD SPI 和 LoRa 模块通讯\n- LoRa 模块：M-XL8 SX1276 模块是一个 SPI 接口，内置 LoRaTM 调制解调器和可调功率放大器的 LoRa 模块，它具有高性能和可靠性\n- 370MHz-1200MHz, 最大20dBm (100mW)持续发射功率\n- 模块尺寸：25.0\\*10.0\\*4.3mm\n\n### M-XL8 SX1276 LoRa 模块 介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作频段 | 370MHz-1200Mhz |\n| 发射功率 | 20dBm（最大） |\n| 通信接口 | SPI |\n| 工作电压 | 1.8V~6.3V |\n| 工作温度 | -40℃ - 80℃ |\n| 天线 | 外置天线，IPEX或焊接 |\n| 接收灵敏度 | -148dbm |\n| RSSI动态范围 | 127dB |\n| 最大链路预算 | 168dB |\n| 收发状态电流 | 9.9mA |\n| 睡眠状态电流 | 50nA |\n| 调制方式 | FSK, GFSK, MSK, GMSK, LoRaTM及OOK |\n> 内置LoRaTM调制解调器，内置CRC，继承+12dBm可调PA+LNA\n\n\n###  SPMOD_lora 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G  | 模块电源地 |\n| 2 | CS | I/O | SPI片选引脚 |\n| 3 | SO | I/O | MISO数据引脚，主机输入从机输出 |\n| 4 | RST | I | 模块复位引脚，低有效 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，主机输出从机输入 |\n| 8 | IRQ | I | 连接至模块DIO0，可编程决定功能 |\n\n<img src=\"../../assets/spmod/spmod_lora/back.png\" width=\"300\" />\n\n- 接线方式:\n\n|   MCU:FUN(IO)   | SP_LCD |\n| :-------------: | :----: |\n|  GPIOHS7(IO_7)  |  RST   |\n| SPI:MISO(IO_15) |   SO   |\n| SPI:SS0(IO_20)  |   CS   |\n| SPI:SCK(IO_21)  |  SCK   |\n| SPI:MOSI(IO_8)  |   SI   |\n|   GPIOH(IO_6)  |  IRQ   |\n|  1.8-6.3V    |  3.3V  |\n|   GND      |  GND   |\n\n<img src=\"../../assets/spmod/spmod_lora//connection.png\" height=\"250\">\n\n## 使用例程\n\n* 流程\n\n  1. 创建 LoRa 对象并初始化\n  2. 发送或者接收数据\n\n### C 示例：\n\n  ```c\n\n  fpioa_set_function(SPI_LoRa_SX127X_CS_PIN_NUM, FUNC_SPI1_SS0);   // CS: 20\n  fpioa_set_function(SPI_LoRa_SX127X_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SCLK: 21\n  fpioa_set_function(SPI_LoRa_SX127X_MOSI_PIN_NUM, FUNC_SPI1_D0);  // MOSI: 8\n  fpioa_set_function(SPI_LoRa_SX127X_MISO_PIN_NUM, FUNC_SPI1_D1);  // MISO: 15\n\n  fpioa_set_function(SPI_LoRa_SX127X_IRQ_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_IQR_GPIO_NUM); // IQR: 6\n  fpioa_set_function(SPI_LoRa_SX127X_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_RST_GPIO_NUM); // RST: 7\n\n  spi_init(SPI_DEVICE_1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  sx1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LoRa_SF_8,\n                 SX1278_LoRa_BW_20_8KHZ, 10);\n\n  if (master == 1)\n  {\n      printf(\"====MASTER====\\r\\n\");\n      ret = sx1278_LoRaEntryTx(&SX1278, 16, 2000);\n  }\n  else\n  {\n      printf(\"====SALAVE====\\r\\n\");\n      ret = sx1278_LoRaEntryRx(&SX1278, 16, 2000);\n  }\n\n  ```\n\n### MaixPy 例程：\n\n  ```python\n\n  fm.register(20, fm.fpioa.GPIOHS20, force=True) # RST\n  fm.register(7, fm.fpioa.GPIOHS7, force=True) # CS\n\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.IN)\n  # The other pins are configured at SPI initialization time\n\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=100 * 1000,\n               polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8, miso = 15)\n\n  lora = SX127x(spi=spi1, pin_ss=cs)\n  lora.init()\n\n  #######receiver###########\n  receive(lora)\n\n  ########sender###########\n  # send(lora)\n\n\n  ```\n\n### 运行环境\n\n|  语言  |  开发板  |          SDK/固件版本          |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*MaixPy固件建议自行从最新源码编译*\n\n### 运行结果\n\n* C\n\n  <center class=\"third\">\n\t  <img src=\"../../assets/spmod/spmod_lora/lora_send_log_c.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_lora/lora_recv_log_c.png\" height=\"250\"/>\n  </center>\n\n* MaixPy\n\n  <center class=\"third\">\n\t  <img src=\"../../assets/spmod/spmod_lora/lora_send_log.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_lora/lora_recv_log.png\" height=\"250\"/>\n  </center>\n\n### 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n  ```c\n    // board_config.h\n    #define SPI_INDEX           1\n    #define SPI_SCLK_RATE       600*1000\n    #define SPI_CHIP_SELECT_NSS 0//SPI_CHIP_SELECT_0\n\n    #define SPI_LoRa_SX127X_CS_PIN_NUM      20\n    #define SPI_LoRa_SX127X_SCK_PIN_NUM     21\n    #define SPI_LoRa_SX127X_MOSI_PIN_NUM    8\n    #define SPI_LoRa_SX127X_MISO_PIN_NUM    15\n\n    #define SPI_LoRa_SX127X_IRQ_PIN_NUM     6\n    #define SPI_LoRa_SX127X_RST_PIN_NUM     7\n\n    #define SPI_LoRa_SX127X_IQR_GPIO_NUM    6\n    #define SPI_LoRa_SX127X_RST_GPIO_NUM    7\n  ```\n\n* MaixPy\n\n  ```python\n    ################### config ###################\n    LoRa_RST = const(20)\n    LoRa_CS = const(7)\n    LoRa_SPI_SCK = const(21)\n    LoRa_SPI_MOSI = const(8)\n    LoRa_SPI_MISO = const(15)\n    LoRa_SPI_NUM = SPI.SPI1\n    LoRa_SPI_FREQ_KHZ = const(100)\n    ##############################################\n  ```\n\n## 参考设计\n\n- SPMOD_LoRa 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_lora/sipeed_spmod_lora.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_weather.html": {"title": "SPMOD - Weather", "content": "# SPMOD - Weather\n\n\n## 概述\n\n\n<img src=\"../../assets/spmod/spmod_weather/sp_weather.png\"\n\nSPMOD - Weather (气象站模块), 集成三轴传感器 QMC7983,与温湿度气压传感器 BME280。\n\n<img src=\"../../assets/spmod/spmod_weather/demo.gif\"  width=\"500\" >\n\n## SPMOD - Weather 介绍\n\n特性：\n\n- 采用 **Sipeed-SPMOD** 接口(2*4PIN 2.54mm 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD I2C接口连接\n- 磁性传感器：QMC7983是一个内置灵敏度补偿与NTC的三轴磁性传感器，I2C接口输出（最高频率400KHz），具有出色的动态范围和精度以及超低的功耗\n- 磁感应量程：±30 高斯\n- 温湿度气压传感器：BME280是同时集成了温湿度与气压传感器的数字传感器\n- 模块尺寸：25.0\\*10\\*2.9mm\n\n\n## 传感器特性：\n\n| 磁性传感器 | QMC7983 |\n| --- | --- |\n| 工作电压 | 2.6V~3.6V |\n| 工作电流 | 70uA |\n| 休眠电流 | <1uA |\n| 磁感应量程 | ±30 高斯 |\n| 精度 | 每 LSB 1mG|\n| RMS 噪声 | 2 mG |\n| 对外接口 |I2C，默认地址 0x2C,可通过选择电阻调节 |\n\n-----\n\n| 温湿度气压传感器 | BME280 |\n| --- | --- |\n| 工作电压 | 1.71V~3.6V |\n| 工作电流 | <633uA |\n| 休眠电流 | <5uA |\n| 湿度传感器的关键参数： | --- |\n| 响应时间（𝜏63％）| 1s |\n| 精度公差 | ±3％ 相对湿度 |\n| 磁滞 | < 2％ 相对湿度 |\n| 气压力传感器的关键参数： | --- |\n| RMS 噪声 | 0.2 Pa（等效 到海拔 1.7 厘米） |\n| 偏移温度系数 | ±1.5 Pa/K（等效温度变化 1°C 时，达到海拔 ±12.6 cm1s） |\n| 对外接口 | I2C，默认地址 0x76, 可通过选择电阻调节 |\n\n###  SPMOD_Weather 模块引脚定义：\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明      |\n| -------- | -------- | ---- | ------------- |\n| 1  | GND | G  | 模块电源地 |\n| 2  | NC | NC  | 悬空引脚，无功能 |\n| 3  | NC | NC  | 悬空引脚，无功能 |\n| 4  | SDA | I/O  | 模块I2C串行数据引脚 |\n| 5  | 3V3 | V  | 模块电源输入正 |\n| 6  | NC | NC  | 悬空引脚，无功能 |\n| 7  | NC | NC  | 悬空引脚，无功能 |\n| 8  | SCL | I  | 模块I2C串行时钟引脚 |\n\n<img src=\"../../assets/spmod/spmod_weather/back.png\" width=\"300\" />\n\n## 接线方式\n\n<img src=\"../../assets/spmod/spmod_weather/connection.png\" height=\"250\">\n\n|  MCU:FUN(IO)  | SP_RFID |\n| :-----------: | :-----: |\n| I2C:SDA(IO_7) |   SDA   |\n|   NC(IO_15)   |   NC    |\n|   NC(IO_20)   |   IRQ   |\n|   NC(IO_21)   |   NC    |\n| GPIOHS(IO_8)  |   SHT   |\n| I2C:SCL(IO_6) |   SCL   |\n|   2.8~3.5V    |  3.3V   |\n|      GND      |   GND   |\n\n## 使用例程\n\n* 流程\n  1. 初始化  weather=SPWeather(i2c=i2c_bus) # create sp_weather\n    while 1:\n        time.sleep_ms(500)\n        print(weather.qmc_read_xyz) # QMC7983 read data\n        print(weather.bme_values) # BME280 read data\n  2. 校准(可选)\n  3. 读取距离(多种模式可选)\n\n### C 示例：\n\n```c\n\n    fpioa_set_function(Weather_SCL, FUNC_I2C0_SCLK + Weather_I2C_DEVICE * 2); // Weather_SCL: 6;\n    fpioa_set_function(Weather_SDA, FUNC_I2C0_SDA + Weather_I2C_DEVICE * 2); // Weather_SDA: 7;\n\n    maix_i2c_init(Weather_I2C_DEVICE, 7, 400000); // Weather_I2C_DEVICE: 0;\n\n    rslt = qmc_init(); // Magnetic sensor QMC7983 init\n    rslt = bme280_init(&dev); // Temperature, humidity and pressure sensors BME280 init\n    stream_sensor_data_normal_mode(&dev); // read and print sensor data\n\n```\n\n### MaixPy 例程：\n\n```python\n\n    i2c_bus = I2C(I2C.I2C0, freq=100*1000, scl=6, sda=7) # scl: io_6, sda: io_7\n\n    weather=SPWeather(i2c=i2c_bus) # create sp_weather\n    while 1:\n        time.sleep_ms(500)\n        print(weather.qmc_read_xyz) # QMC7983 read data\n        print(weather.bme_values) # BME280 read data\n\n```\n\n## 运行环境\n\n|  语言  |  开发板  | SDK/固件版本 |\n| :----: | :------: | :--- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1 |\n\n## 运行结果\n\n* C\n\n    <img src=\"../../assets/spmod/spmod_weather/log_c.png\" height=\"200\">\n\n* MaixPy\n\n    <img src=\"../../assets/spmod/spmod_weather/log_py.png\" height=\"200\">\n\n## 参考设计\n\n- SPMOD_Weather 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_weather/sipeed_spmod_weather.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_ethernet.html": {"title": "SPMOD - Ethernet", "content": "# SPMOD - Ethernet\n\n\n## 概述\n\n![](../../assets/spmod/spmod_ethernet/sp_ethernet.png)\n\nSPMOD_Ethernet(网络扩展模块)采用 W5500 以太网主控芯片。\n\n## SPMOD - Ethernet 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI接口连接\n- 主控芯片：W5500 是一款集成全硬件 TCP/IP 协议栈的嵌入式以太网控制器。\n- SPI 速率理论上可达80MHz\n-\t集成以太网数据链路层（MAC）和10BaseT/100BaseTX 以太网物理层（PHY），支持自动协商（10/100-Based全双工/半双工）\n- 模块尺寸：35.76\\*19.74\\*8.7mm\n\n###  W5500 以太网主控芯片介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.97V~3.63V |\n| 工作电流 | <132mA |\n| 工作温度 | -40℃~85℃ |\n| 休眠电流 | <15mA |\n| SPI 时钟 | 最高80MHz |\n| 全硬件TCP/IP协议栈 | 支持TCP、UDP、ICMP、IPv4、ARP、IGMP、PPPoE协议 |\n\n> 支持8路独立硬件 Socket 同时通信\n,通信效率互不影响\n,内部32K字节收发缓存供TCP/IP包处理\n,支持掉电模式、网络唤醒\n,集成 10BaseT / 100Base-T 以太网 PHY\n,支持自动协商（全/半双工，10M/100M)\n,不支持自动极性变换MDIX\n\n\n###  SPMOD_Ethernet 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G |  模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | SO | I/0 | MISO数据引脚，主机输入从机输出 |\n| 4 | NC | NC | 悬空引脚，无功能 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/0 | MOSI数据引脚，主机输出从机输入 |\n| 8 | NC | NC | 悬空引脚，无功能 |\n\n\n<img src=\"\" width=\"300\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_Ethernet 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_ethernet/sipeed_spmod_ethernet.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_template.html": {"title": "SPMOD - XXX", "content": "# SPMOD - XXX\n\n\n## 概述\n\n<img src=\"../../assets/spmod/sipeed_spmod_xxx.jpg\" alt=\"XXX\" style=\"zoom:60%;\" />\n\nSPMOD_XX(XX 模块)采用XXX。\n\n## SPMOD - XXX 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- XXX\n- 模块尺寸：X.XX\\*XX.X\\*XX.Xmm\n\n### XXXX 介绍\n\nXXXXX\n\n- XXXX\n\n| XXXX  功能特点：|\n| --- |\n| --- |\n| --- |\n| --- |\n\n\n\n\n###  SPMOD_XXX 模块引脚定义：\n\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1        | GND      | G    | XX         |\n| 2        | XXX      | I    | XX         |\n| 3        | MISO     | O    | XX         |\n| 4        | XXX      | I    | XX         |\n| 5        | XXX      | O    | XX         |\n| 6        | SCK      | I    | XX         |\n| 7        | MOSI     | I    | XX         |\n| 8        | VCC      | G    | XX         |\n\n\n## 使用例程\n\n- MaixPy 例程：\n\n> NOTE: 待更新\n\n- STM32 例程：\n\n## 参考设计\n\n\n- SPMOD_XXX 原理图：\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_rfid.html": {"title": "SPMOD - RFID", "content": "# SPMOD - RFID\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_rfid/sp_rfid.png\" style=\"padding-right:100px;\" width=\"\" height=\"300\" />\n\nSPMOD_RFID (NFC 模块)采用复旦微电子 FM17510 高度集成的非接触式（13Mhz）的读写芯片。\n\n## SPMOD - RFID 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-MOD SPI和RFID模块通讯\n- 64Byte收发缓冲FIFO\n- RIFC IC 为 FM17510。\n- 模块尺寸：25.0\\*20.1\\*6.2mm\n\n### FM17510 介绍\n\nFM17510 是一款高度集成的工作在 13.56MHz 下的非接触读写器芯片，支持符合 ISO/IEC 14443 TypeA 协议的非接触读写器模式。\n\n同时提供了低功耗的外部卡片侦测功能，方便电池供电、需要低功耗工作、并且需要实时处理任意 时刻会进入射频场的外部卡片的读写器设备。\n\nFM17510 具有低电压、低功耗、 单端驱动等特点。适用于低功耗、低电压、低成本要求的非接触读。\n\n- FM1750XX 在软硬件层面上兼容 MFRC552，支持工作模式：\n\n\n| FM17510  功能特点：|\n| --- |\n| 支持 ISO/IEC 14443 TypeA 读写器模式 |\n| 读写器模式支持 M1 加密算法 |\n| ISO14443 TYPEA 支持通讯速率 106kbps， 212kbps， 424kbps |\n| 支持 SPI 串行接口，最高 10Mbps |\n| Host 接口独立电源供电，电压范围 2.2~3.6V |\n| 工作温度范围 -40℃ ~ 85℃ |\n| 64Byte 收发缓冲 FIFO |\n| 中断输出模式灵活可配 |\n| 多种低功耗模式 : Soft powerdown模式 , Hard powerdown 模式, Deep powerdown 模式（典型值 1uA） |\n| 支持低功耗外部卡片侦测功能 |\n| 可编程定时器 |\n| 内置振荡电路外接 27.12MHz 晶振 |\n| 宽电压工作范围 2.2V~3.6V |\n| 内置 CRC 协处理器 |\n| 可编程 I/O 引脚|\n\n\n\n###  SPMOD_RFID 模块引脚定义：\n\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 | Note |\n| --- | --- | --- | --- | --- |\n| 1 | GND | G | 模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | SO | I/O | MISO数据引脚，主机输入从机输出 |\n| 4 | NPD | I | 复位/休眠控制引脚 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，主机输出从机输入 |\n| 8 | IRQ | O | 模块中断输出引脚 |\n\n\n> 当 NPD 引脚为低电平时，模块进入休眠状态；当 NPD 引脚输入一个上升沿时，模块复位。\n\n<img src=\"../../assets/spmod/spmod_rfid/back.png\" height=\"300\" />\n\n- 接线方式:\n\n|   MCU:FUN(IO)   | SP_RFID |\n| :-------------: | :-----: |\n|    NC(IO_7)     |   NPD   |\n| SPI:MISO(IO_15) |   SO    |\n| SPI:SS0(IO_20)  |   CS    |\n| SPI:SCK(IO_21)  |   SCK   |\n| SPI:MOSI(IO_8)  |   SI    |\n|  NC(IO_6)    |   IRQ   |\n|  2.2~3.6V    |  3.3V   |\n|  GND       |   GND   |\n\n<img src=\"../../assets/spmod/spmod_rfid/connection.png\" height=\"250\">\n\n\n## 使用例程\n\n* 流程\n  1. 初始化\n  2. 扫描并绑定卡片\n  3. 读写数据\n\n### C 示例：\n\n```c\n\n  fpioa_set_function(RFID_CS_PIN, FUNC_GPIOHS0 + RFID_CS_HSNUM); // RFID_CS_PIN: 20;\n  fpioa_set_function(RFID_CK_PIN, FUNC_GPIOHS0 + RFID_CK_HSNUM); // RFID_CK_PIN: 21;\n  fpioa_set_function(RFID_MO_PIN, FUNC_GPIOHS0 + RFID_MO_HSNUM); // RFID_MO_PIN: 8;\n  fpioa_set_function(RFID_MI_PIN, FUNC_GPIOHS0 + RFID_MI_HSNUM); // RFID_MI_PIN: 15;\n\n  gpiohs_set_drive_mode(spi_io_cfg.hs_cs, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_clk, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_mosi, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_miso, GPIO_DM_INPUT);\n\n  // detected card\n  PcdRequest(0x52, type)\n\n  // auth and bind...\n\n  // read or write 16 bytes data from sector 0x11\n  PcdWrite(0x11, w_buf)\n  PcdRead(0x11, &r_buf)\n\n```\n\n### MaixPy 例程：\n\n```python\n\n  # 20: CS_NUM;\n  fm.register(20, fm.fpioa.GPIOHS20, force=True)\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n\n  # RFID_SCK: 21; RFID_SI:8; RFID_SO: 15;\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n          polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8, miso=15)\n\n  # Create an object of the class MFRC522\n  MIFAREReader = MFRC522(spi1, cs)\n\n  # detected and auth, bind...\n\n  # read or write 16 bytes data from sector 0x11\n  MIFAREReader.MFRC522_Write(0x11, data)\n  MIFAREReader.MFRC522_Read(0x11)\n\n```\n### 运行环境\n\n|  语言  | 开发板   | SDK/固件版本                   |\n| :----: | :------- | :----------------------------- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1                  |\n\n### 运行结果\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_rfid/c_log.png\" height=\"200\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_rfid/maixpy_log.png\" height=\"200\" />\n\n### 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n  ```c\n    // board_config.h\n    #define RFID_CS_PIN (20)\n    #define RFID_CK_PIN (21)\n    #define RFID_MO_PIN (8)\n    #define RFID_MI_PIN (15)\n\n    #define RFID_CS_HSNUM (20)\n    #define RFID_CK_HSNUM (21)\n    #define RFID_MO_HSNUM (8)\n    #define RFID_MI_HSNUM (15)\n  ```\n\n* MaixPy\n\n  ```python\n    ################### config ###################\n    CS_NUM = const(20)\n    SPI_FREQ_KHZ = const(600)\n    SPI_SCK = const(21)\n    SPI_MOSI = const(8)\n    SPI_MISO = const(15)\n    #############################################\n  ```\n\n\n## 参考设计\n\n\n- SPMOD_RFID 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_rfid/sipeed_spmod_rfid.png\" height=\"250\" />\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_grove.html": {"title": "SPMOD - Grove", "content": "# SPMOD - Grove\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_grove/sp_grove.png\"  width=\"\" height=\"400\" />\n\n\nSPMOD_Grove(GROVE 模块)\n\n## SPMOD - Grove 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 作为拓展版，提供三个标准的Grove接口。方便您将Grove模块与SP-MOD一起使用。\n- 每条数据线均提供外部上拉。\n- 提供高达1000mA的供电能力。\n- 模块尺寸：35.0\\*10.0\\*2.1mm\n\n## 概括\n\n| 功能特点： | 参数 |\n| --- | -- |\n| Grove 连接器 (HY 2.0mm 4P连接器)*3 | 用于连接Grove线缆 |\n| 排针4*2，间距2.54mm *1 | 用于和SP-MOD接口连接 |\n| 外部供电电压 | 视连接的模块而定 |\n| 外部供电电流 | 视模块工作情况而定，通常小于1000mA |\n| 工作温度 | -30℃ ~ 85℃\n\n## 参考设计\n\n- SPMOD_Grove 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_grove/sipeed_spmod_grove.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_fpc.html": {"title": "SPMOD - FPC", "content": "# SPMOD - FPC\n\n\n## 概述\n\n![](../../assets/spmod/spmod_fpc/sp_fpc.png)\n\n\nSPMOD_FPC(FPC 转接线模块)\n\n## SPMOD - FPC 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 作为延长套件，轻松的将SP-MOD接口用FPC延长至另一端。您将有更大的自由连接模块构建系统。\n- 提供一对SP-MOD至FPC转换板（一公一母），一条FPC排线, 10P规格。\n- 模块尺寸：15.0\\*10.0\\*3.3mm\n\n## 概括\n\n| 功能特点： | 参数 |\n| --- | -- |\n| SP-MOD至FPC10转换器器(公母一对)\t| 用于将SP-MOD接口和FPC的双向转换 |\n| FPC排线\t| 用于连接两个转换器 |\n| 外部供电电压 | 视连接的模块而定 |\n| 外部供电电流 | 视模块工作情况而定，通常小于1000mA |\n| 工作温度 | -30℃ ~ 85℃ |\n\n\n## 参考设计\n\n- SPMOD_FPC 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_fpc/sipeed_spmod_fpc.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_tof.html": {"title": "SPMOD - TOF", "content": "# SPMOD - TOF\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_tof/sp_tof.png\" style=\"padding-right:100px;\" width=\"\" height=\"300\" />\n\nSPMOD_TOF(TOF 模块) 采用 VL53L0X 模块。\n\n## SPMOD - TOF 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-MOD I2C 和 TOF 模块通讯\n- ToF模块：VL53L0X模块是一个I2C接口，长距离单点飞行时间测定（ToF）模块，它具有高性能和可靠性\n- 最远测量距离4000mm，最高50Hz的测量刷新率。典型前方测量角度27°\n- 可选配红色激光器瞄准头，通过XSHUT引脚控制激光器开关\n- 模块尺寸：25.0\\*10\\*3.15mm\n\n### VL53L0X 介绍\n\n| VL53L0X | 功能特性：|\n| --- | --- |\n| 测量距离 | 最大 4000mm(4m) |\n| 工作刷新率 | 50Hz |\n| 测量角度（正面）| 27°|\n| 通信接口 | I2C |\n| 工作电压 | 2.6V~3.5V (选用红色激光时： 2.8V~3.3V) |\n| 工作状态电流 | 18mA (选用红色激光时： 20mA) |\n| 工作温度 | -40℃ - 80℃ |\n| 睡眠状态电流 | 5uA |\n\n\n\n###  SPMOD_TOF 模块引脚定义：\n\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 |\n| --- | --- | --- | --- |\n| 1 | GND | G  | 模块电源地 |\n| 2 | IRQ | I  | 模块中断输入引脚，连接至 VL53L0X 的GPIO1 |\n| 3 | NC  | NC | 悬空引脚，无功能 |\n| 4 | SDA | I/O | 模块 I2C 串行数据引脚 |\n| 5 | 3V3 | V  | 模块电源输入正 |\n| 6 | NC  | NC | 悬空引脚，无功能 |\n| 7 | SHT | I  | 模块休眠&激光头控制引脚 #注释 |\n| 8 | SCL | I  | 模块 I2C 串行时钟引脚 |\n\n> SHT 低电平时，模块休眠 &激光头关闭\n\n<img src=\"../../assets/spmod/spmod_tof/back.png\" height=\"300\" />\n\n- 接线方式:\n\n|  MCU:FUN(IO)  | SP_RFID |\n| :-----------: | :-----: |\n| I2C:SDA(IO_7) |   SDA   |\n|   NC(IO_15)   |   NC    |\n|   NC(IO_20)   |   IRQ   |\n|   NC(IO_21)   |   NC    |\n| GPIOHS(IO_8)  |   SHT   |\n| I2C:SCL(IO_6) |   SCL   |\n|   2.8~3.5V    |  3.3V   |\n|      GND      |   GND   |\n\n<img src=\"../../assets/spmod/spmod_tof/connection.png\" height=\"250\">\n\n\n## 使用例程\n\n* 流程\n  1. 初始化\n  2. 校准(可选)\n  3. 读取距离(多种模式可选)\n\n### C 示例：\n\n```c\n\n  //set io mux\n    fpioa_set_function(VL53L0X_SCL, FUNC_I2C0_SCLK + VL53L0X_I2C_DEVICE * 2);\n    fpioa_set_function(VL53L0X_SDA, FUNC_I2C0_SDA + VL53L0X_I2C_DEVICE * 2);\n    fpioa_set_function(VL53L0X_SHT, FUNC_GPIOHS0 + VL53L0X_SHT);\n\n    gpiohs_set_drive_mode(VL53L0X_SHT, GPIO_DM_OUTPUT);\n\n    //i2c init\n    maix_i2c_init(VL53L0X_I2C_DEVICE, 7, VL53L0X_I2C_FREQ_KHZ * 1000);\n\n    while (vl53l0x_init(&vl53l0x_dev)) {\n          printf(\"VL53L0X init error!!!\\r\\n\");\n          msleep(500);\n    }\n\n    printf(\"VL53L0X init success!\\r\\n\");\n\n    // adjusting\n    printf(\"VL53L0X adjusting\\r\\n\");\n    vl53l0x_calibration_test(&vl53l0x_dev);\n\n    // get distance\n    printf(\"VL53L0X start work\\r\\n\");\n    vl53l0x_general_test(&vl53l0x_dev);\n\n```\n\n### MaixPy 例程：\n\n```python\n\n    fm.register(VL53L0X_SHT, fm.fpioa.GPIOHS0, force=True)\n    XSHUT = GPIO(GPIO.GPIOHS0, GPIO.OUT)\n\n    i2c = I2C(VL53L0X_I2C_NUM, freq=VL53L0X_FREQ, scl=VL53L0X_SCL, sda=VL53L0X_SDA)\n\n    # create obj and read distance\n\t  tof = VL53L0X(i2c)\n\t  while True:\n      mm = tof.read()\n      utime.sleep_ms(100)\n      print(mm)\n\n```\n### 运行环境\n\n|  语言  | 开发板   | SDK/固件版本 |\n| :----: | :------- | :--- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1 |\n\n### 运行结果\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_tof/log_c.png\" height=\"200\" />\n\n* MaixPy\n\n  - [None]\n## 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n```c\n  // board_config.h\n  #define VL53L0X_I2C_DEVICE 0 // i2c device number\n  #define VL53L0X_I2C_FREQ_KHZ 100 // i2c frequence\n  #define VL53L0X_SCL 6 // scl\n  #define VL53L0X_SDA 7 // sda\n  #define VL53L0X_SHT 8 // sht\n```\n\n* MaixPy\n\n```python\n  ################### config ###################\n  VL53L0X_I2C_NUM = const(I2C.I2C0)\n  VL53L0X_FREQ = const(100000)\n  VL53L0X_SCL = const(6)\n  VL53L0X_SDA = const(7)\n  VL53L0X_SHT = const(8)\n  ##############################################\n```\n\n\n## 参考设计\n\n- SPMOD_TOF 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_tof/sipeed_spmod_tof.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_servo.html": {"title": "SPMOD - SERVO", "content": "# SPMOD - SERVO\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_servo/sp_servo.png\"  width=\"\" height=\"300\" />\n\nSPMOD_SERVO (SERVO模块)。\n\n## SPMOD - SERVO 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-MOD控制多达6个独立的PWM 9g舵机\n- 舵机接口采用3P 2.54间距排针\n- 独立的外部5V供电，通过USB Type-C或者KF螺钉接线柱，不会从SP-MOD取电\n- 板载电源指示灯，通电状态一目了然\n- 模块尺寸：35.0\\*20\\*1.6mm\n\n| 功能特点： | 参数 |\n| --- | -- |\n| PWM 9g舵机接口*6 | 外接4.8-6V电源的情况下，可连接6个PWM 9g舵机并分别控制 |\n| 外部供电电压 | 4.8V-6.0V |\n| 外部供电电流 | 视模块工作情况而定，通常小于1500mA |\n| 工作温度 | -40℃ ~ 85℃ |\n\n\n###  SPMOD_SERVO 模块引脚定义：\n\n\n<img src=\"../../assets/spmod/spmod_servo/sp_servo_pin.png\" width=\"500\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_SERVO 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_servo/sipeed_spmod_servo.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_micarray.html": {"title": "SPMOD - MicArray", "content": "# SPMOD - MicArray\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_micarray/sp_micarray.png\"  width=\"\" height=\"300\" />\n\nSPMOD_MicArray(麦克风阵列模块)采用 RY3708(DC-DC)升压模块\n\n## SPMOD - MicArray 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 将SP-MOD转至FPC，利用FPC与麦克风阵列板相连。\n- 板载3.3V至5V升压DC-DC (RY3708)，轻松驱动麦克风阵列。\n- 利用Grove接口控制麦克风阵列板上的LED。\n- 需要配合SIPEED MICARRAY一起使用。\n- 模块尺寸：35.0\\*10.0\\*11.2mm\n\n\n###  BOOST DC-DC RY3708 模块 介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 输出电压 | 5.1V ±0.2V |\n| 外部供电电压 |\t3.3V ±0.2V |\n| 外部供电电流 | 视麦克风阵列板的工作情况而定，通常小于500mA |\n| 工作温度范围 | -40℃ ~ 85℃ |\n> 1.2MHz固定开关频率,内部4A开关电流限制,高温自动切断,集成80mΩ内部功率MOSFET\n\n\n\n###  SPMOD_MicArray 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G |模块电源地 |\n| 2 | D2 | I | Mic_D0 |\n| 3 | D3 | I | Mic_D2 |\n| 4 | D0 | I | Mic_WS |\n| 5 | 3V3 | V |模块电源输入正 |\n| 6 | D4 | I | Mic_D1 |\n| 7 | D5 | I | Mic_D3 |\n| 8 | D1 | I | Mic_BCK |\n| 9 | CK | I | LED控制串行时钟引脚 (相当于I2C SCL) |\n| 10 | DA | I |  LED控制串行数据引脚 (相当于I2C SDA) |\n\n<img src=\"\" width=\"300\" />\n\n## 使用例程\n\n```python\nfrom Maix import MIC_ARRAY as mic\nimport lcd\n\nlcd.init()\nmic.init()\n#mic.init(i2s_d0=23, i2s_d1=22, i2s_d2=21, i2s_d3=20, i2s_ws=19, i2s_sclk=18, sk9822_dat=24, sk9822_clk=25)\n\nwhile True:\n    imga = mic.get_map()\n    b = mic.get_dir(imga)\n    a = mic.set_led(b,(0,0,255))\n    imgb = imga.resize(160,160)\n    imgc = imgb.to_rainbow(1)\n    a = lcd.display(imgc)\nmic.deinit()\n```\n\n> 需要根据自己接板子上的管脚号来进行修改mic.init()中参数\n\n## 参考设计\n\n- SPMOD_MicArray 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_micarray/sipeed_spmod_micarray.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_extender.html": {"title": "SPMOD - Extender", "content": "# SPMOD - Extender\n\n\n## 概述\n\n![](../../assets/spmod/spmod_extender/sp_extender.png)\n\n\nSPMOD_Extender(8PIN扩展模块)\n\n## SPMOD - Extender 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-Extender将SP-MOD一分为四，包含三个相连的2线接口（连接至SP-MOD的D0和D1）和一个单独的四线接口（连接至SP-MOD的D2-D5）\n- 模块尺寸：35.0\\*20.0\\*1.6mm\n\n## 概括\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 两线SP-MOD接口*3 | 连接至SP-MOD的D0和D1，可用作UART (最多连接一个设备)或I2C（最多连接三个设备）或者两个独立的GPIO |\n| 四线SP-MOD接口 | 连接至SP-MOD的D2-D5，通常用作SPI接口，也可用作四个杜立的GPIO接口 |\n| 外部供电电压 | 视连接的模块而定 |\n| 外部供电电流 | 视模块工作情况而定，通常小于1000mA |\n| 工作温度 | -40℃ ~ 85℃\n\n\n\n## 参考设计\n\n- SPMOD_Extender 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_extender/sipeed_spmod_extender.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_joystick.html": {"title": "SPMOD - JoyStick", "content": "# SPMOD - JoyStick\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_joystick/sp_joystick.png\"  width=\"\" height=\"300\" />\n\nSPMOD_JoyStick (JoyStick模块)。\n\n## SPMOD - JoyStick 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI接口连接\n- 可通过外部适配器单独连接7.2V~9V DC，为手柄的振动马达供电\n- 内置升压电路，轻松驱动手柄\n- PSX/PS2兼容\n- 模块尺寸：35.0\\*20.0\\*13.3mm\n\n\n###  SPMOD_JoyStick 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G | 模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | SO | I/O | MISO数据引脚，手柄信号输出 |\n| 4 | NC | NC | 悬空引脚，无功能 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，手柄信号输入 |\n| 8 | ACK | O | 确认信号输出引脚 |\n\n<img src=\"\" width=\"500\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_JoyStick 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_joystick/sipeed_spmod_joystick.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | 链接 |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/lichee/index.html": {"title": "Lichee Pi", "content": "---\ntitle: Lichee Pi\n---\n> 编辑与2022年3月11日\n\n- Lichee 是 [Sipeed](https://www.sipeed.com/) 推出的开源产品，是为了能让用户获得优廉的linux设备，实战linux底层相关的内容的产品。\n\n目前LicheePi相关核心板部分参数对比表格如下：\n\n| 类别 | Lichee RV |Lichee Zero Plus|Lichee Zero|Lichee nano|\n| :--- | :--- | :--- | :--- | :--- |\n| SOC | Allwinner D1 | Allwinner S3 | Allwinner V3s | Allwinner F1c100s |\n| CPU架构 |玄铁 C906 | Cortex™-A7  | Cortex™-A7 |  ARM 926EJS  |\n|运行频率|1GHz|1.2GHz|1.2GHz(max)|600MHz(max)|\n| RAM | 512MB DDR3 | 128Mbyte DDR3 |  64MB DRAM | 32MB DDR |\n|FLASH|可选SD-nand|可选SD Nand、<br>SPI Nor Flash<br>或者eMMC |预留<br>SOP8 SPI Flash<br>焊盘|板载 16MB NOR FLASH|\n| TF连接器 | 有|有|有|有|\n\n- 上述的款型都可以通过sd卡启动系统\n- 其他参数过多，版面放不下，需要的话麻烦自行对比一下。\n\n## Lichee 核心版照片(Linux)\n### Lichee Zero\n<div align=\"center\">\n<a href=\"./Zero/Zero.html\" ><img src=\"./assets/Zero/Zero_1.png\" width=400></a>\n</div>\n\n### Lichee Nano\n\n<div align=\"center\">\n\n<a href=\"./Nano/Nano.html\" ><img src=\"./assets/Nano/Nano_2.png\" width=400></a>\n\n</div>\n\n### Lichee Zero Plus\n\n<div align=\"center\">\n\n<a href=\"./ZeroPlus/ZeroPlus.html\"><img src=\"./assets/Zero-Plus/Plus_1.jpg\" width=400></a>\n\n</div>\n\n### Lichee RV\n\n<div align=\"center\">\n\n<a href=\"./RV/RV.html\"><img src=\"./assets/RV/D1-4.png\" width=400></a>\n\n</div>"}, "/hardware/zh/lichee/ZeroPlus/ZeroPlus.html": {"title": "Lichee ZeroPlus", "content": "# Lichee ZeroPlus\n\n## 概述\nLichee Zero Plus是基于全志科技的S3 (ARM Cortex-A7内核)的高性能CPU芯片设计的高集成度核心板。\n使用双NGFF金手指设计，引出134pin引脚，方便开发者拓展使用。S3是V3s的升级版，1.2GHz主频，内置128MB ddr3内存，引脚相对V3s全很多。\n支持MIPI摄像头，普通并口摄像头，RGB屏幕，内置ePHY.\n\n<img src=\"./../assets/Zero-Plus/Plus_1.jpg\" width=400>\n\n## 参数\n### 芯片\nS3芯片架构\n![](./../assets/Zero-Plus/Plus_2.png)\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | • ARM® Cortex™-A7 @1.2GHz |\n| GPU | • Supports 1080p@60fps or 2-channel 1080p@30fps H.264 video encoding, supports 8M JPEG encoding <br>• Supports H.264 1080p@60fps decoding, MJPEG 1080@30fps decoding |\n| ISP | • Integrated ISP up to 8M pixels<br>• Supports two channel outputs for display and encoding respectively<br>• Supports various input and output formats<br>• Supports AE/AF/AWB<br>• Supports saturation adjustment/ noise reduction/ defect pixel correction/distortion correction |\n| Video Input/Output | • Supports 8/10/12-bit parallel CSI and 4-lane MIPI CSI2<br>• Supports BT1120 input<br>• Supports up to 8M CMOS sensor<br>• Supports RGB/i80/LVDS LCD up to 1024x768 resolution<br>• Supports Allwinner's next-gen SmartColor display technology for better visual effects for images & videos |\n| Memory | • SIP 16-bit DDR3, up to 1333Mbp |\n| Audio Codec | • Integrated 92dB audio codec<br>• Supports two ADC channels and two DAC channels<br>• Supports 3 MIC-in, a stereo Line-in, a headphone output and a stereo line-out output |\n| Security Engine | • Supports AES/DES |\n| Connectivity | • 3 x SD card controllers<br>• LRADC/SPI/TWI/UART/PWM<br>• USB, EMAC+PHY |\n\n### 核心板\n| 项目 | 参数 |\n| --- | --- |\n| CPU | ARM Cortex-A7 处理器(1.2Ghz)， VFPv4 浮点处理器 |\n| 内存 | 芯片内置 128Mbyte DDR3 内存 (时钟频率最高 672MHz) |\n| 存储 |可选 SPI Nor Flash(8/16/32MB)，SD Nand(128/512MB)，eMMC(4/8GB)<br>Micro SD 卡 |\n| 电源 | 5V 电源输入， 3 路 DCDC 稳压输出 (1.2,1.5,3.3) |\n| 复位 | 板载复位芯片 |\n| 晶振 | 板载 24M 主晶振， 32.768KHz RTC 晶振 |\n| 接口 | NGFF M.2 B KEY x 2 共引出 67x2=134pin<br>板载 micro usb 接口和系统串口，可供下载固件及调试 |\n| 系统支持 | 支持最新 Linux 5.2 mainline kernel, Linux 3.4 bsp kernel<br>支持 debian 发行版 |\n\n## 使用教程\n\n[Lichee Zero](/soft/Lichee/zh/Zero-Doc/Start/intro_cn.md)\n\n## 产品技术支持\n\nLichee ZeroPlus 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/zh/lichee/RV/flash.html": {"title": "Lichee RV 烧录系统", "content": "# Lichee RV 烧录系统\n\n系统镜像分为 Tina与Debian两种，Tina为专用小linux镜像，Debian为桌面级镜像\n\n## 准备\n\n1. Lichee RV 核心板\n2. TF 内存卡（建议使用[官方店](https://shop365481095.taobao.com/)的的内存卡，其他的卡可能会有各种奇怪的问题）\n3. 烧录工具 [PhoenixCard](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/tool)\n4. 系统镜像下载\n    国内用户：[百度网盘](https://pan.baidu.com/s/1QJTaDw6kkTM4c_GAlmG0hg) 提取码：wbef\n    国外用户：[Mega](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA)\n\n| 镜像词缀说明 | 含义 | 备注 |\n| --- | --- | --- |\n| LicheeRV | Sipeed 专用的 RISCV D1 Linux 系列系统。 | --- |\n| Tina | 标记为 tina openwrt 系统。 | --- |\n| debian | 标记为 riscv debian 系统。 | --- |\n| 86panel | [taobao 86panel](https://item.taobao.com/item.htm?spm=a230r.1.14.18.30b534187YMsRx&id=663345415205&ns=1&abbucket=7#detail) | --- |\n| dock | [taobao dock](https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-21410578028.20.35765d54K9XCOt&id=666274331852) | --- |\n| hdmi | 表示屏幕默认输出到 HDMI 屏幕上。 |  |\n| 800480 / 480P | 表示屏幕默认输出到 LCD 屏幕上，分辨率可以是 800*480 或 480P (640X480)。 |  |\n| 8723ds | 表示该镜像支持 8723ds WIFI / BLE 驱动。 |  |\n| xr829 | 表示该镜像支持 xr829 WIFI / BLE 驱动。 |  |\n| waft | 是否内置 waft 软件。 |  |\n\n\n## 烧录镜像\n\n### 烧录步骤\n\n烧录前最好使用[SD card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)先把内存卡格式化一次，格式化的时候注意不要选择错了镜像。\n\n- 打开烧录软件 [PhoenixCard](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/tool)，选择烧录的固件，将内存卡通过读卡器插入电脑中\n- 选择 `启动卡` 选项\n- 选择正确的盘符\n- 点击 `烧卡`\n- 根据状态栏的颜色可以判断烧录结果：红色的话说明烧录失败了，建议使用[SD card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)格式化后再重新烧录一次；绿色则表示一切正常。\n\n![](./../assets/RV/flash.png)\n\n要注意 Windows 默认打不开 linux 的文件系统，所以对于烧录过 linux 镜像的 sd 卡在 Windows 上会不能直接被打开，且被提示需要格式化之类的。\n这时可以使用[SD card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)来格式化 sd 卡来恢复到 Windows 系统可用的状态。\n对于嵌入式 linux，建议持有两张以上的 sd 卡。\n\n> 并不能保证每台电脑和每个人的内存卡都是可以烧录的，烧录失败的话建议购买官方的镜像卡。\n\n等待烧录结束；烧录 Tina 系统镜像会比较快，烧录 Debian 系统镜像将会久一点，可能多用10分钟。\n\n### 烧录失败相关\n\n如果在烧录时提示格式化失败，或者使用烧录过的卡但是电脑上没有显示盘符，可以按以下操作来解决：\n\n1. 在此下载磁盘处理软件： https://www.diskgenius.cn/\n2. 电脑上显示不出的盘符，会在该软件里显示出来，使用该软件进行快速分区：\n    ![attachmentId-2788](./../assets/RV/Diskgenius.png)\n3. 分区完成后，电脑上就能够看到盘符，PhoenixCard 里也能看到，在 PhoenixCard 里点击恢复卡即可恢复卡到正常状态\n4. 按之前步骤继续烧录即可\n\n## 启动\n\n启动后若提示需要用户名和密码的话的分别如下：\n\n- Tina 系统登录用户名：`root`  密码：`tina`\n\n- Debian 系统登录用户名：`root` 密码：`licheepi`\n\n插卡启动，可以在串口工具中查看到启动信息:\n\n- debian 启动的打印信息\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看部分debian启动日志</font></summary>\n<pre><code class=\"language-shell\">\n[270]HELLO! BOOT0 is starting!\n[273]BOOT0 commit : 27369ab\n\nOpenSBI v0.6\n   ____                    _____ ____ _____\n  / __ \\                  / ____|  _ \\_   _|\n | |  | |_ __   ___ _ __ | (___ | |_) || |\n | |  | | '_ \\ / _ \\ '_ \\ \\___ \\|  _ < | |\n | |__| | |_) |  __/ | | |____) | |_) || |_\n  \\____/| .__/ \\___|_| |_|_____/|____/_____|\n        | |\n        |_|\n</code></pre>\n</details>\n\n- Tina 启动的打印信息\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看Tina启动日志</font></summary>\n<pre><code class=\"language-shell\">\nBusyBox v1.27.2 () built-in shell (ash)\n\n    __  ___     _        __   _\n   /  |/  /__ _(_)_ __  / /  (_)__  __ ____ __\n  / /|_/ / _ `/ /\\ \\ / / /__/ / _ \\/ // /\\ \\ /\n /_/  /_/\\_,_/_//_\\_\\ /____/_/_//_/\\_,_//_\\_\\\n ----------------------------------------------\n Maix Linux (Neptune, 5C1C9C53)\n ----------------------------------------------\nroot@MaixLinux:/#\n</code></pre>\n</details>\n\n## 相关问题\n\n[点我跳转](./problems.html)"}, "/hardware/zh/lichee/RV/problems.html": {"title": "相关问题", "content": "---\ntitle: 相关问题\nkeywords: debian, Rv, Problam, apt, img, sipeed\n---\n\n## apt 相关\n\n- 在使用默认debian镜像时，如果进行apt操作，发现以下报错：\n  \n> GPG error: http://ftp.ports.debian.org/debian-ports sid InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY E852514F5DF312F6\n\n说明内置的密钥到期了，需要手工更新下密钥；下面是两种下载密钥的方式：\n - 网页下载：https://packages.debian.org/sid/all/debian-ports-archive-keyring/download\n - wget方式 `wget http://ftp.cn.debian.org/debian/pool/main/d/debian-ports-archive-keyring/debian-ports-archive-keyring_2022.02.15_all.deb`\n  \n将密钥拷贝（使用scp或者lrzsz工具）到LicheeRV板上，执行：\n\n> sudo dpkg -i debian-ports-archive-keyring_2022.02.15_all.deb\n\n即可更新密钥，然后可以正常进行apt更新：`sudo apt-get update`\n\n## 启动无反应\n\n- 确认自己在使用 PhoenixCard 的时候选择的是 `启动卡`\n  ![](./../assets/RV/flash.png)\n- 对于使用Tina系统的是可以用adb终端来连接进行通信\n  直接将电脑与核心板相连即可\n  ![](./../assets/RV/adb-shell.png)\n- 对于debian系统只能使用串口来通信\n\n## 86 panel 烧录后屏幕无反应/显示不对\n\n需要在linux系统中使用下面命令来和对应的fex文件来覆盖板级配置\nfex下载地址 https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/SDK/board\n覆盖指令为\n```bash\nsudo dd if=boot_package_XXX.fex of=/dev/sdX bs=1K seek=16400\n```\n上面命令中的 sdX 为 TF 卡在 linux 系统中的命名。\n\n有问题的话可以去[论坛](https://bbs.sipeed.com/)发帖"}, "/hardware/zh/lichee/RV/user.html": {"title": "基础上手", "content": "# 基础上手\n\n## Dock 相关使用\n\n### 连接板子\n\n- 我们可以很容易看到底板背部上有串口的 TX 和 RX 引脚标识。因此可以使用 ttl 电平的串口来使板子与电脑进行通信（Tina和Debian均适用）。\n\n- 对于 Tina 系统可以使用核心板上的 typec 接口和电脑上的 adb 终端来进行连接\n\n- 对于 Debian 系统可以外接键盘和鼠标来直接操作\n\n#### Debian 相关事项\n\n启动会比较慢，取决于TF卡的速度。\n\n用户名为 `root`  密码是 `licheepi`\n\n**使用串口与 debian 系统连接的话会一直打印内核信息。解决方法是：**\n- 使用root权限编辑 `/etc/rsyslog.conf` 并且把文件最后一行中的 `*.emerg` 改成 `#*.emerg` \n- 重启 rsyslog 服务，直接执行 `/etc/init.d/rsyslog restart` 即可\n\n**想要在图形化界面中调出命令行的方法：**\n键盘执行 `Alt+F2` 打开运行，接着在里面输入 `termit` 即可打开命令行终端。\n\n### 点灯示例\n\n当我们成功进入系统(Tina和debian均可)后，就可以进行基础的点灯操作啦！\n\n核心板的螺丝固定焊盘旁有一颗 LED ，查看尺寸图很容易看到：\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看尺寸图</font></summary>\n  <img src=\"./../assets/RV/rv_coreboard_dimension.png\">\n</details>\n\n从[原理图](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/HDK/2_Schematic)可以查到 LED 连接的是 PC0 引脚，根据简单的公式 ('C'-'A')x32 + 0 = 2x32+0 = 64\n\n当然我们也可以查看 pinmux-pins 文件中的内容来知道 IO 复用情况表：\n\n```bash\ncat /sys/kernel/debug/pinctrl/2000000.pinctrl/pinmux-pins\n...\npin 64 (PC0): device 2008000.ledc function ledc group PC0 #这里可以看到是LED引脚\npin 65 (PC1): UNCLAIMED\npin 66 (PC2): UNCLAIMED\npin 67 (PC3): UNCLAIMED\npin 68 (PC4): UNCLAIMED\npin 69 (PC5): UNCLAIMED\npin 70 (PC6): UNCLAIMED\npin 71 (PC7): UNCLAIMED\n...\n```\n\n我们先导出该 GPIO：\n\n```bash\necho 64 > /sys/class/gpio/export  #导出GPIO64\n```\n\n然后再将该 IO 置为输出状态，即可操作其电平：\n\n```bash\necho out>/sys/class/gpio/gpio64/direction #设置IO为输出\necho 1 > /sys/class/gpio/gpio64/value   #输出高电平\necho 0 > /sys/class/gpio/gpio64/value   #输出低电平\n```\n\n上面的是最简单的使用 IO 的操作了，就不细说了吧。\n\n不使用IO的话就取消导出\n\n```bash\necho 64 > /sys/class/gpio/unexport    #取消导出GPIO64\n```\n\n至此我们就成功在 RISC-V 64 D1上点灯啦~\n\n你也可以对 串行RGB LED WS2812 进行花式点灯：\n\n```bash\necho 255 > /sys/class/leds/sunxi_led0r/brightness #红灯亮\necho 0 > /sys/class/leds/sunxi_led0r/brightness   #红灯灭\necho 255 > /sys/class/leds/sunxi_led0g/brightness #绿灯亮\necho 0 > /sys/class/leds/sunxi_led0g/brightness   #绿灯灭\necho 255 > /sys/class/leds/sunxi_led0b/brightness #蓝灯亮\necho 0 > /sys/class/leds/sunxi_led0b/brightness   #蓝灯灭\n```\n\n### 外设功能验证\n\n#### 音频功能\n\n- 录音设备查看\n\n使用 `arecord -l` 命令\n\n```bash\nroot@MaixLinux:~# arecord -l\n**** List of CAPTURE Hardware Devices ****\ncard 0: audiocodec [audiocodec], device 0: SUNXI-CODEC 2030000.codec-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\ncard 1: snddmic [snddmic], device 0: 2031000.dmic-dmic-hifi dmic-hifi-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\ncard 2: sndhdmi [sndhdmi], device 0: 2034000.daudio-audiohdmi-dai 20340a4.hdmiaudio-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\n```\n\n- 播放设备查看\n\n使用 `aplay -l` 命令\n\n```bash\nroot@MaixLinux:~# aplay -l\n**** List of PLAYBACK Hardware Devices ****\ncard 0: audiocodec [audiocodec], device 0: SUNXI-CODEC 2030000.codec-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\ncard 2: sndhdmi [sndhdmi], device 0: 2034000.daudio-audiohdmi-dai 20340a4.hdmiaudio-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\n```\n\n录音播放测试：\n\n```bash\narecord -D hw:1,0 -f S16_LE -t wav -d 3 t.wav     #录音\n```\n```bash\naplay -D hw:0,0 t.wav                             #播放录音\n```\n\n另外可以使用 alsamixer 进行音量调整\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看运行alsamixer</font></summary>\n    <pre><code class=\"language-shell\">┌────────────────────────────── AlsaMixer v1.2.4 ──────────────────────────────┐\n│ Card: audiocodec                                     F1:  Help               │\n│ Chip:                                                F2:  System information │\n│ View: F3:[Playback] F4: Capture  F5: All             F6:  Select sound card  │\n│ Item: Headphone [dB gain: -24.00]                    Esc: Exit               │\n│                                                                              │\n│     ┌──┐                                                           ┌──┐      │\n│     │  │                                                           │  │      │\n│     │  │                                                           │  │      │\n│     │  │                                                           │  │      →\n│     │  │                                                           │  │      →\n│     │  │                                                           │▒▒│      →\n│     │  │                                                           │▒▒│      →\n│     │  │                                                           │▒▒│      →\n│     │  │                                                           │▒▒│      →\n│     │▒▒│                                                           │▒▒│      →\n│     │▒▒│                                                           │▒▒│      │\n│     │▒▒│                                                           │▒▒│      │\n│     ├──┤     ┌──┐     ┌──┐     Off      ┌──┐     ┌──┐     ┌──┐     └──┘      │\n│     │MM│     │MM│     │MM│              │MM│     │MM│     │MM│               │\n│     └──┘     └──┘     └──┘              └──┘     └──┘     └──┘               │\n│      25                                                             63       │\n│  &lt;Headphon>FMINL ga FMINR ga ADC1 ADC ADC1 Inp ADC1 Inp ADC1 Inp ADC1 vol    │\n└──────────────────────────────────────────────────────────────────────────────┘</code></pre>\n</details>\n\n#### USB功能\n\n默认内核支持外挂U盘的驱动，插上U盘后可以使用 `fdisk -l` 指令查看到新增的 /dev/sda 设备 <br>\n\n如果U盘没有被格式化，应该使用mkfs.vfat指令来格式化U盘，再使用mount指令挂载U盘。\n\n#### 无线网络\n\n##### **使用 Tina 系统**\n\n  LicheeRV 底板默认使用 XR829 或者 RTL8723BS wifi 模块，可以使用以下指令进行联网操作\n\n  先配置热点信息：需要手动在 /etc/wifi 目录下的 wpa_supplicant.conf 文件里添加下面内容\n\n  ```bash\n  network={  \n      ssid=\"WiFi_name\"  \n      psk=\"WiFi_password\"  \n  } \n  ```\n\n  配置完成后重启一下(执行 `reboot` 命令即可)，重启完成后执行 `ifconfig wlan0 up; udhcpc -iwlan0 &` 后即可连上对应的wifi。\n  连上网络后，就可以使用 ssh (自己记得设置一下密码)来远程登录板卡，或者使用 scp 来进行文件传输。\n\n##### **使用 debian 系统**\n\n> Debian 不支持命令行联网\n  \n  点击系统菜单--Preferenes--Connman Settings，打开 Network Settings ，查看网络属性中的 Interface 是否为 wlan0。双击网络名称，并输入 WiFi 密码进行连接\n\n  ![](./../assets/RV/wifi-1.jpg)\n\n  成功连接网络之后，通过系统系统菜单--Preferenes--Connman Settings，查看网络属性查看网络的 IP 地址\n\n  ![](./../assets/RV/wifi-2.jpg)\n\n#### 屏显触摸\n\nLicheeRV系列可以使用以下显示屏：\n- SPI屏\t\t1.14寸屏(TODO)\n- RGB屏\t\t4.3寸 480x272；5.0寸 800x480；\n- RGB+SPI屏\t4.0寸 480x480(st7701s); 4.0寸 720x720(nv3052c)\n- MIPI屏\t\t8.0寸 1280x720(ILI9881C)\n\n如果需要调试屏幕驱动，可以使用以下指令查看屏幕驱动信息：\n\n以下信息根据烧录镜像的不同而打印的不一样。\n\n```bash\ncat /sys/class/disp/disp/attr/sys\n\nscreen 0:\nde_rate 300000000 hz, ref_fps:60\nmgr0: 480x480 fmt[rgb] cs[0x204] range[full] eotf[0x4] bits[8bits] err[0] force_sync[0] unblank direct_show[false] iommu[1]\ndmabuf: cache[0] cache max[0] umap skip[0] overflow[0]\n\tlcd output\tbacklight( 50)\tfps:59.5\tesd level(0)\tfreq(60)\tpos(0)\treset(0)\t 480x 480\n\terr:0\tskip:184\tirq:230715\tvsync:0\tvsync_skip:0\n   BUF    enable ch[1] lyr[0] z[16] prem[N] a[globl 255] fmt[  0] fb[ 480, 480; 480, 480; 480, 480] crop[   0,   0, 480, 480] frame[   0,   0, 480, 480] addr[ffe00000,       0,       0] flags[0x       0] trd[0,0]\n```\n\n屏幕彩条测试：`echo 1 > /sys/class/disp/disp/attr/colorbar`\n\n#### 视频播放\n\n我们可以尝试在LicheeRV上播放BadApple啦~ [视频文件下载](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/MP4)\n\nTina镜像中内置了ffmpeg软件包；ffmpeg是强大的多媒体库，可以用于录屏或者播放\n\n录屏指令：\n\n```bash\nffmpeg -f fbdev -framerate 10 -i /dev/fb0 record.avi\n```\n\n播放指令（分别是扬声器播放音频和hdmi播放音频）：\n\n```bash\nffmpeg -i /mnt/UDISK/badapple_640480_xvid.mp4 -pix_fmt bgra -f fbdev /dev/fb0 -f alsa hw:0,0  \nffmpeg -i /mnt/UDISK/badapple_640480_xvid.mp4 -pix_fmt bgra -f fbdev /dev/fb0 -f alsa hw:2,0   \n```\n\n这里由于是CPU软解，所以测试最高分辨率约为720x540， 再高会变卡\n\n<iframe src=\"https://player.bilibili.com/player.html?aid=209723771&bvid=BV1xa411r7PP&cid=457742249&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n#### 麦克风阵列(仅debian系统)\n\n将板子与麦克风阵列连接好后（需要注意不要将排线接反和不要把引脚接反。），直接执行内置的 `micarr_0609` 指令即可即\n\n```bash\nsudo ./micarr_0609\n```\n\n有麦克风阵列相关的二次开发需求，可以联系 support@sipeed.com\n\n![](./../assets/RV/mic_array_picture.jpg)\n\n<iframe src=\"https://player.bilibili.com/player.html?aid=849734125&bvid=BV1HL4y1H7nv&cid=457750392&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 86Panel\n\n如果烧录后显示不正确或者不对劲的话，前往[相关问题](./problems.html)纠错一下\n\n下面仅进行简单的操作。另外上面 dock 板子的操作同样适用于 86Panel。\n\n对于使用 tina 系统的是没有 GUI 界面的。因此下面使用 debian 简单展示一下屏幕\n\n烧录 debian 系统后，插卡启动，等待2分钟左右，屏幕上就会显示登录界面\n\n![登录界面](./../assets/RV/LicheeRV_login_picture.png \"登录界面\")\n\n输入用户名 sipeed，密码 licheepi，即可进入桌面 （使用USB HOST口外接键盘鼠标进行输入）\n\n![桌面样式](./../assets/RV/desktop_appearance.png \"桌面样式\")\n\n进入桌面后可以进行一些基础操作\n\n- Alt+F2 可以打开 运行 ，接着输入 termit 即可打开命令行终端\n\n![基础操作](./../assets/RV/Basic_operation.png \"基础操作\")\n\n接下来让我们尝试在Debian下跑一下Hello World:\n\n![运行自制程序](./../assets/RV/Run_HelloWorld.png \"运行自制程序\")\n\n另有720P高清屏的效果对比，有米的朋友可以考虑入手。\n\n注意使用的时候应当烧录一下板级配置文件来成功显示，具体请看[86panel显示异常](problems.html#86-panel-烧录后屏幕无反应显示不对)\n\n实际显示效果如下：\n\n![高清显示_1](./../assets/RV/display_1.png)\n\n![高清显示_2](./../assets/RV/display_2.png)\n\n### 点灯操作\n\n由于 86Panel 的核心板的 LED 与底板外设复用了，因此不能直接使用核心板的灯了。\n\n将直插型 LED 正确地与预留的 IO 焊盘连接好后可以参考 dock 底板点灯的方式来点灯。\n\n### 连接网络\n\n#### 有线网络\n\n86 Panel 支持百兆网络，使用套餐附送的网线接上板子网口后，执行以下指令来连接有线网络\n\n```bash\nifconfig eth0 up\nudhcpc -ieth0\n```\n\n#### 无线网络\n\n可以参考 Dock 底板连接[网络的方法](#无线网络)\n\n### 其他\n\n与 dock 底板相关操作一致\n\n### 触摸屏测试\n\n<font color=#16B2C>仅 tina 系统内置 触摸demo</font>\n\n如果你购买的是86面板套餐，可以使用 ts_test 进行触摸测试。\n\n> 注意触摸驱动有瑕疵，ts_test测试时松开后，光标会不动，但是终端仍会正常打印信息\n\n```bash\nroot@MaixLinux:/# ts\nts_calibrate  ts_harvest    ts_print_mt   ts_test       ts_verify\nts_finddev    ts_print      ts_print_raw  ts_test_mt    tshowimg\n```\n\n## BSP SDK 开发指南\n\n为了方便用户自行开发，矽速整理发布了 LicheeRV 的bsp开发docker镜像，大家使用该镜像可以快速开始D1的系统级开发。\n\n国内用户：[百度网盘](https://pan.baidu.com/s/1QJTaDw6kkTM4c_GAlmG0hg)  提取码：wbef\n国外用户：[Mega](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA)\n\n在网盘中下载对应的docker文件后，解压到tar文件后导入到docker\n\n```bash\ngzip -d licheerv_d1_compile.tar.gz #解压成tar文件\ndocker import licheerv_d1_compile.tar licheerv_d1_compile:latest #docker导入镜像\n```\n\n成功运行后应当重新登陆一次；用户名为 `nihao`，密码为 `sipeed123`\n\n```bash\nsudo docker run -it licheerv_d1_compile:latest /bin/bash # 交互模式启动D1镜像编译环境\nlogin #切换用户\n```\n\n进入容器后的基础编译操作为：\n\n```bash\ncd ~/sdk/tina-d1-open_new/\nsource build/envsetup.sh\nlunch   #选1\nmake menuconfig  #去掉里面的 alsa-plugin 选项，否则编译不过\n# alsa-plugins 在 menuconfig 中的位置如下\n#.\n#└── Libraries\n#    └── alsa-plugins\nmake -j8  #按实际CPU性能编译\npack  #打包\n```\n\nSDK内置了一些版型的dts，你可以自行选择编辑：\ndevice/config/chips/d1/configs/nezha/board_xxx.dts\n\n其他SDK的开发说明，可以参见全志开发平台上下载的相关文档\nhttps://open.allwinnertech.com/\n也可以加全志交流QQ群：`498263967`\n\n如果需要自己下载SDK开发，参考全志在线相关网页：https://d1.docs.aw-ol.com/\n\n## WAFT 开发指南\n\nTODO"}, "/hardware/zh/lichee/RV/Dock.html": {"title": "Lichee Dock", "content": "# Lichee Dock\n\n## 概述\n\nLichee RV Dock 是为开源开发者而设计的一款功能**集成度高**、**体积小**且价格亲民的RISC-V Linux开发板套件。它不仅支持 **HDMI 输出**，搭配屏幕转接板更可以支持多种的屏幕显示（**MIPI、RGB和MCU接口**）。它同时具备丰富的外设，包括一个主机 **USB-A** 接口，**2.4G Wi-Fi+BT** 模块，一个模拟麦克风和扬声器插口等。使用者拿到套件之后，无需等待和焊接，即可用套件连接显示器和 USB 设备快速上手开发各种有趣且实用的 Linux 应用，较大地**加速了**开发者的试研和开发工作。除此之外，用户还可以利用开发板的多种显示接口，无线功能和 GPIO ，搭配板载麦克风和扬声器，快速实现各种创意。\n\n![外观图](./../assets/RV/RV-Dock.jpg)\n\n## 参数\n\n| 项目 | 参数 |\n| --- | --- |\n|支持的核心板 | Lichee RV 核心板 |\n| 显示输出接口 | 板载一个显示输出连接器；<br>RGB屏幕信号和MIPI屏幕信号连接到2x20P排针焊盘 <br>（可以使用我们的屏幕转接板驱动RGB接口或者MIPI接口的屏幕） |\n| 网络连接 | 板载2.4G WIFI+BT模组、2.4G 贴片天线、IPEX连接器 |\n| USB | 板载一个USB type-A母座 |\n| 音频 | 板载扬声器驱动电路（最高支持4Ω3W扬声器）和扬声器连接器<br>板载驻极体麦克风电路 |\n| 存储 | 预留了一个SOP8焊盘，SPI协议，默认不焊接元件 |\n| 拓展连接器 | 板载30P FPC连接器，可以直接连接到我们的Mic Array R6 麦克风阵列板 |\n| GPIO拓展 | 通过2x20P 2.54mm 焊盘引出GPIO供用户使用 |\n| LED | 板载一个WS2812 RGB LED<br>板载一个电源指示灯 |\n| 按键 | 板载一个复位RST按键<br>板载一个用户按键 |\n\n\n## 相关链接\n\n[下载站](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV-Dock)\n\n[使用教程](./flash.html)\n\n## 产品技术支持\n\nLichee RV Dock 可以在多种场景实现客户不同方面的需要，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 support@sipeed.com。"}, "/hardware/zh/lichee/RV/86_panel.html": {"title": "Lichee 86 Panel", "content": "# Lichee 86 Panel\n\n## 概述\n\nLichee RV-86 Panel是为智能家居中控应用场景而设计的开发套件。在硬件上，套件包含了LicheeRV 核心板（全志D1+512MB DDR3)、4英寸 IPS 显示屏+电容触摸屏、WIFI + BT、以太网、双数字硅麦和 GPIO 拓展接口等。\n在软件上，我们提供了 Linux 系统（OpenWRT 及 Debian )和阿里 WAFT 开发环境( WAFT 是阿里基于 WebAssembly 和自研的渲染引擎打造的一款面向 AIOT 的高性能应用框架)。\n\n![裸板视图](./../assets/RV/86_2.png)\n\n## 参数\n| 项目 | 参数 |\n| --- | --- |\n| 核心模块 | Sipeed LicheeRV 哪吒计算条 |\n| 显示 | 默认搭配为4英寸480\\*480 IPS标清电容触摸屏<br>可选升级为4英寸720\\*720 IPS高清电容触摸屏<br>预留8英寸1280\\*800 IPS电容触摸屏接口 |\n| 音频 | 板载1W小扬声器，双路数字硅麦 |\n| 网络 | XR829 WIFI+BT无线模块<br>RTL8201F百兆以太网<br>预留板载RJ45以太网接口 |\n| USB | 核心板带有USB-C OTG接口 <br>底板预留USB-C HOST 与USB转串口电路 |\n| 电源 | 支持5V,12V供电(板载DC-DC ) |\n| 扩展引脚 | 双2x8Pin 2.54mm 排针，预留FPCIO引出 | \n| 外壳 | 选配86盒3D打印外壳，图纸开源 |\n| 尺寸 | 86x86mm |\n| 适用场景 | 智能家居中控，WAFT UI评估 |\n| 开发框架 | 支持WAFT (WebAssembly Framework For Things）环境 |\n| 系统支持 | 支持 OpenWRT及 Debian系统 |\n| 开发资源 | 提供原厂SDK的 Docker开发镜像 |\n\n![板子功能](./../assets/RV/86_pin.png)\n\n## 相关链接\n\n[下载站](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV_86_panel)\n\n[烧录系统](./flash.html)\n\n[相关使用](./user.html)\n\n## 产品技术支持\n\nLichee RV-86 Panel 可以在多种场景实现客户不同方面的需要，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/zh/lichee/RV/RV.html": {"title": "Lichee RV - Nezha CM", "content": "# Lichee RV - Nezha CM\n\n## 概述\nLichee RV - Nezha CM是模块化设计的核心计算模组，搭载全志D1主控芯片(基于平头哥玄铁C906处理器），512MB DDR3内存，可选启动介质为TF卡或者SDNAND芯片，并使用两组M.2B - KEY 67 Pin金手指引出所有l0，方便量产使用，也方便安装替换。\n\n![](./../assets/RV/D1-4.jpg)\n\n![](./../assets/RV/D1-back.jpg)\n\n## 参数\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | 全志 D1 阿里平头哥 玄铁 C906 内核，主频 1GHz |\n| 内存 | 16bit 512MB DDR3，时钟频率 792MHz |\n| 存储 | 板载 TF 卡连接器，可插入 TF 卡作为存储，已测试能够识别1TB容量的卡； <br>预留 SD-NAND 焊盘（与 8pin LCD 接口冲突，用于商业应用定制） |\n| 显示接口 | MIPI：引出 4-lane MIPI DSI 至金手指 <br>RGB：引出 RGB888（部分与 DSI 复用） 至金手指 <br>MCU(I80)：引出 I80 接口至金手指 <br>SPI：板载 8pin SPI 液晶屏接口，可扩展 1.14 英寸液晶屏 |\n| 音频接口 | 模拟音频耳机输出(HPOUT)： 引出至金手指 <br>模拟音频线路输入(LINEIN)： 引出至金手指 <br>数字音频 (I2S/SPDIF)： 引出至金手指 <br>模拟麦克风接口(MIC3)： 引出至金手指 <br>数字麦克风接口(DMIC)： 引出至金手指 |\n| 以太网 | 引出 RMII/RGMII 接口至金手指（与部分 GPIO 复用） |\n| USB | 板载 TYPE-C USB-OTG 接口(USB0) <br>USB-HOST 引出至金手指(USB1) |\n| GPIO | 剩余 GPIO 全部引出至金手指 |\n| 按键 | • FEL 按键（进入下载模式）|\n| 指示灯 | • 一个电源指示灯 <br>• 一个用户指示灯（高电平有效） |\n|PCB | 板层 4 层 |\n| 固定方式 | 通过两组 M.2 B-KEY 金手指连接器与底板连接，使用一颗 M2 螺丝紧固 |\n| 支持开发语言 | C/C++, Python, Golang, etc... |\n| 系统镜像 | Tina Linux(基于OpenWRT 14.07)、 Debian、YoC (RTOS ) |\n\n\n![](./../assets/RV/D1-pin.png)\n\n## 底板之间的对比\n\n| 项目 | Lichee RV Dock | Lichee RV Panel |\n| :---: | --- | --- |\n| SOC | 全志D1（XuanTie C906 RISC-V） | 全志D1（XuanTie C906 RISC-V） |\n| 内存 | 1GByte | 1GByte |\n| 无线网络 | 可选择：<br>-2.4G WIFI+BT<br>-无（可以自行焊接其他型号的WIFI模块调试）\t| 2.4G WIFI+BT |\n| 有线网络 | 无\t| 支持100M以太网 |\n| 影像输出 | HDMI连接器 <br>SPI接口屏幕连接器 <br>连接屏幕转接板，可以实现：<br>-  常用RGB接口屏幕连接器（含TP引脚）（支持我们店铺的4.3寸/5.0寸屏）<br>-  MIPI接口屏幕连接器（兼容Nezha开发板适配的8寸屏） | sRGB接口屏幕连接器（含TP引脚）（支持标配的4寸IPS屏带TP） <br>MIPI接口屏幕连接器（兼容Nezha开发板适配的8寸屏）|\n| USB端口 | \"1个USB OTG(核心板板载的USB-C座子) <br> 1个USB Host(底板板载的USB-A座子) | 1个USB OTG(核心板板载的USB-C座子) <br>1个USB Host(底板板载的USB-C座子) |  \n| 拓展接口 | 支持麦克风阵列板<br>大部分GPIO通过2x20P直插焊盘引出 | 小部分GPIO通过直插焊盘引出 |\n| 音频 | 板载3W音频功放 <br>板载驻极体麦克风电路 | 板载3W音频功放 <br>板载2个MEMS数字麦克风 |\n| 按键\t| 1个FEL按键（进入下载模式）<br>1个RST按键（复位）<br>1个用户按键 | 1个FEL按键（进入下载模式） |\n| LED | 1个电源指示灯<br>1个2812 RGB LED | 1个电源指示灯 |\n| 外壳 | 无 | 有3D打印外壳 |\n| 尺寸 | 65.0mm x 40.0mm | 86.0mm x 86.0mm |\n\n\n\n## 连接1.14寸屏幕\n\n![](./../assets/RV/D1-1.png)![](./../assets/RV/D1-2.png)![](./../assets/RV/D1-3.png)\n\n> 目前 1.14 显示屏是点不亮的，需要等待后续的更新; \n\n## 系统烧录\n\n[烧录教程](./flash.html)\n\n## 注意事项\n\n当前核心板的USB Type-C连接器使用CC引脚作为自动OTG的识别引脚，但是与USB C to C 数据线的识别存在冲突，只能使用A to C数据线，可在硬件上改动器件进行切换，共有两种工作方式，具体特性对应如下：\n\n| Type-C工作模式 | OTG（出厂默认产品） | CC识别（需要改动硬件） |\n| --- | :---: | :---: |\n| 电阻R30与电阻R31 | 不贴 | 贴装5.1K 1% 0402电阻 |\n| 二极管D3与D4 | 贴装4148二极管 | 不贴 |\n| 是否兼容C to C数据线 | 否 | 是 |\n| 是否兼容A to C 数据线 | 是 | 是 |\n| 是否支持自动OTG切换 | 是 | 否 |\n\n如需使用C to C数据线，则需要改动TypeC接口周围的器件对应CC识别模式，并在需要扩展外置USB设备时手动切换为HOST模式。核心板正面位号图如下，供参考：\n> ① 换上5.1K 1% 0402电阻，② 拆除二极管\n\n![](./../assets/RV/other.png)\n\n![](./../assets/RV/D1Core2.png)\n\n\n## 资料下载\n[硬件资料下载](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/HDK)\n\nDebian 系统镜像请到\n\n>[百度网盘](https://pan.baidu.com/s/1QJTaDw6kkTM4c_GAlmG0hg)(提取码：`wbef`)\n>[Mega netdisk](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA)\n\n[源码获取](/hardware/zh/lichee/RV/user.html#BSP-SDK-开发指南)\n\n## 相关问题\n\n[licheeRV debian镜像相关问题](./problems.md#apt-相关)"}, "/hardware/zh/lichee/Zero/Zero.html": {"title": "Lichee Zero", "content": "# Lichee Zero\n\n## Lichee Zero 概述\nLichee Zero是基于全志科技的V3s(ARM Cortex-A7内核)高性能CPL芯片设计的迷你开发板。开发板设计小巧精致，将芯片的所有资源都引出,板载USB、Flash、TF卡、4OP LCD接口等，并把所有IO资源引出，方便开发者拓展使用，适合初学者学习linux或者商用于产品开发。\n\n核心板：\n\n<html>\n<div class=\"imbox\">\n<img src=\"./../assets/Zero/Zero_1.png\" width=240>\n<img src=\"./../assets/Zero/Zero_6.png\" width=240>\n<style>\n.imbox{\n     display:flex;\n     flex-direction: row;\n     }\n</style>\n</div>\n</html>\n\n\n核心板+扩展板：\n\n<html>\n<div class=\"imbox\">\n<img src=\"./../assets/Zero/Zero_3.png\" width=240>\n<img src=\"./../assets/Zero/Zero_4.png\" width=240>\n<style>\n.imbox{\n     display:flex;\n     flex-direction: row;\n     }\n</style>\n</div>\n</html>\n\n## 参数\n\n### V3s参数\n\nV3s框架\n\n![](./../assets/Zero/V3s.png)\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | ARM Cortex™-A7 最高1.2GHz|\n| Memory |  Integrated 64MB DRAM  |\n| Audio Codec | • Integrated 92dB audio codec<br>• Supports two ADC channels and two DAC channels<br>• Supports one low-noise analog microphone bias outputs<br>• Supports one microphone input and one stereo microphone outpu |\n| Video | • Supports 1080p@40fps or 1080p@30fps+VGA@30fps H.264 video encoding,<br>• Supports H.264 1080p@30fps decoding, MJPEG 1080@30fps decoding |\n| Video Input/Output | • Supports 8/10/12-bit parallel CSI and 4-lane MIPI CSI2<br>• Supports up to 5M CMOS sensor<br>• Supports RGB/i80/LVDS LCD up to 1024x768 resolution |\n| Connectivity | •  3 x SD card controllers<br>•  LRADC/SPI/TWI/UART/PWM<br>•  USB, EMAC+PHY |\n| ISP | • Integrated ISP up to 5M pixels<br>• Supports two channel outputs for display and encoding respectively<br>• Supports various input and output formats<br>• Supports AE/AF/AWB<br>• Supports saturation adjustment/ noise reduction/ defect pixel correction/distortion correction |\n\n### Lichee Zero核心板参数\n\n| 项目 | 参数 | \n| ---- | ---- |\n| CPU | V3s |\n| 内存 | 64MB DDR2 |\n| 存储 | 预留 SOP8 SPI Flash焊盘 <br>板载TF卡座 |\n| 显示 | 通用40P RGB LCD FPC座<br>可直插常见的40P 4.3/5/7寸屏幕（板载背光驱动)，通过转接板可插50P 7/9寸屏<br>支持常见的272x480,480x800,1024x600等分辨率板载电阻式触摸屏芯片，支持电阻屏<br>板载RGB LED |\n| 通讯接口 | SDIO x2，可搭配配套SDIO WiFi+BT模块<br>SPl x1<br>12C x2<br>UART x3<br>100M Ether x1(含EPHY)<br>OTG USB x1<br>MIPI CSI x1 |\n| 其他接口 | <br>PWM x2<br>LRADC x1<br>Speakerx2+ Mic x1 |\n| 电气特性 | Micro USB 5V供电<br>2.54mm插针3.3V~5V供电<br>1.27mm邮票孔供电 |\n\n![](./../assets/Zero/Zero_8.png)\n![](./../assets/Zero/Zero_10.png)\n\n### Lichee Zero 拓展板\n\n| 项目 | 参数 |\n| ---- | ---- |\n| CPU | V3s |\n| 内存 | 64MB DDR2 |\n| 存储 | 预留 SOP8 SPI Flash焊盘 <br>板载TF卡座 |\n| 显示 | 通用40P RGB LCD FPC座<br>可直插常见的40P 4.3/5/7寸屏幕（板载背光驱动)，通过转接板可插50P 7/9寸屏<br>支持常见的272x480,480x800,1024x600等分辨率板载电阻式触摸屏芯片，支持电阻屏<br>板载RGB LED |\n| 通讯接口 | SDIO x2，可搭配配套SDIO WiFi+BT模块<br>SPI x1<br>I2C x2<br>UART x3<br>100M Ether x1(含EPHY)<br>OTG USB x1<br>MIPI CSI x1 |\n| 其他接口 | <br>PWM x2<br>LRADC x1<br>Speakerx2+ Mic x1 |\n| 板载外设 | 以太网接口<br>3.5mm耳机接口<br>驻极体麦克风<br>额外TF卡卡槽<br>4个按键<br>MIPI接口 |\n| 电气特性 | Micro USB 5V供电<br>2.54mm插针3.3V~5V供电<br>1.27mm邮票孔供电 |\n\n![](./../assets/Zero/Zero_9.png)\n\n## 使用教程\n\n[Lichee Zero](./../../../../soft/Lichee/zh/Zero-Doc/Start/board_intro.html)\n\n## 产品技术支持\n\nLichee Zero 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/zh/lichee/Nano/Nano.html": {"title": "Lichee Nano", "content": "# Lichee Nano\n## 概述\n\nLichee Nano是基于全志科技的F1C100s(ARM 926EJS内核)高性能soC芯片设计的迷你开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载USB、Flash、TF卡、4OP LCD接口等，并把所有IO资源引出，方便开发者拓展使用，非常适合初学者学习linux或者商用于产品开发。\n\n> 默认用户名称:root 用户密码:licheepi\n\n<img src=\"./../assets/Nano/Nano_2.png\" width=400>\n<img src=\"./../assets/Nano/Nano_3.png\" width=400>\n\n## 参数\n\n### F1C100s参数\nLichee Nano开发板板载的F1C100s芯片功能很强大，芯片内置32MBDDR，拥有SDIO、SPI、UART、Speaker、Mic等接口，支持外挂 8~32MB SPI Nor Flash;在视频处理方面表现出现，支持720P视频输出，支持H.264、MJPEG等高清格式的解码。\n\n![](./../assets/Nano/F1C100s.png)\n\n| 项目 | 参数 |\n| --- | ---- |\n| CPU | •ARM9 CPU architecture<br>•16KByte D-Cache<br>•32KByte I-Cache |\n| Memory | •SIP 32MB DDR1<br>•SD2.0,eMMC 4.41 |\n| Video | •H.264 1280x720@30fps decoding<br>•MPEG1/2/4 1280x720@30fps decoding<br>•MJPEG 1280x720@30fps encoding<br>•JPEG encode size up to 8192x8192|\n| Camera | •8-bit CMOS-sensor interface<br>•CCIR656 protocol for NTSC and PAL |\n| Audio | •Integrated analog audio codec with two DAC channels and one ADC channel,maximum 192kHz DAC sample rate and 48kHz ADC sample rate<br>•One I2S/PCM interface |\n| Display | •LCD RGB interface up to 1280x720@60fps<br>•TV CVBS output, support NTSC/PAL, with auto plug detecting |\n| Connectivity | •USB OTG, SDIO,IR, 3 x TWI, 2 x SPI, 3 x UART |\n\n### 开发板参数\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | 全志 F1C100s， ARM 926EJS , 主频 408MHz， 可超频至 600Mhz |\n| 内存及存储 |集成 32MB DDR<br>板载 16MB NOR FLASH， 可从 FLASH 启动<br>板载 TF 卡座，可从 TF 启动 |\n| 显示 | 通用 40P RGB LCD FPC 0.5mm 座子<br>可直接使用常见的 40P 4.3/5/7 寸屏幕（板载背光驱动）<br>支持常见的 272x480, 480x800, 1024x600 等分辨率<br>板载电阻式触摸屏芯片 |\n| 视频处理能力 | H.264 1280x720@30FPS 解码<br>MPEG1/2/4 1280x720@30FPS 解码<br>MJPEG 1280x720@30 FPS 解码<br>JPEG encode size up to 8192x8192 |\n| 通信接口 | SDIO，可搭配配套 SDIO WiFi+BT 模块<br>SPI x2<br>TWI x3<br>UART x3<br>OTG USB x1<br>TV out |\n| 其它接口 | PWM x2<br>LRADC x1<br>Speakerx2 + Mic x1 |\n\n![](./../assets/Nano/Nano_pin.png)\n\n### 软件参数\n\n| 开发环境 | 参数 |\n| --- | --- |\n| Linux | 支持3.10 BSP Linux<br>支持4.19 主线 Linux |\n| 裸机 | Xboot |\n| 裸机 | RT-Thread |\n\n## 使用教程\n\n[Lichee Nano](./../../../../soft/Lichee/zh/Nano-Doc-Backup/index.html)\n\n## 产品技术支持\n\nLichee Nano 开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/zh/lichee/One/index.html": {"title": "", "content": "敬请期待"}, "/hardware/zh/maixsense/maixsense-a075v/maixsense-a075v.html": {"title": "MaixSense-A075V", "content": "# MaixSense-A075V\n\n|     时间      | 负责人 |   更新内容   |\n| :-----------: | :----: | :----------: |\n| 2022.08.10 | lyx | 初次编写文档 |\n| 2022.11.15 | lyx | 补充细节 |\n\n## 产品概述\n\n![mt_big](asstes/../assets/mt_big.jpg)\n\n**MaixSense-A075V** 是一款具有 **320x240** 分辨率及 **RGB** 功能的 **3D TOF** 摄像机模组，\n支持 **Linux** 下免驱的即插即用，可通过上位机显示彩色 **3D** 画面并记录点云\n\n## 产品开箱指南\n\n### 准备工作\n\n在 Windows 系统上运行预览 **MaixSense-A075V** 的话需要安装驱动。\n**Windows 驱动**：[点击获取](https://dl.sipeed.com/shareURL/MaixSense/Drivers)\n**Windows 安装驱动教程**：[点击查看](./install_drivers.html)\n\n### 网页上位机预览\n\n>**注意**：模组上电前一定要确保网络环境中没有使用 `192.168.233.0/24` 的地址段，\n>**MaixSense-A075V** 会使用 **RNDIS** 并设置自己的 `iP` 地址为 `http://192.168.233.1`. \n\n![tof-07514](asstes/../assets/mt_pin.jpg)\n\n根据上图将模组通电接入 `PC` 端，这时自带的风扇会开始工作以及镜头处会显示有红灯在闪烁，选择浏览器输入 `http://192.168.233.1` 预览 3D 点云图，上电后有延迟等待 `10s-15s` 系统和程序才会启动完成。\n\n**使用网页上位机快速预览（正面和侧面）：**\n \n<html>\n  <img src=\"./assets/mt_examle.jpg\" width=48%>\n  <img src=\"./assets/mt_examleb.jpg\" width=48%>\n</html>\n\n可选预览深度伪彩点云，取消勾选页面右侧的交互面板上的第一行 `RGB_Map` 即可。\n\n![mt_examlec](assets/mt_examlec.jpg)\n\n### 互动配置\n\n网页上位机交互面板提供了一系列配置和功能，可以实时预览变动的效果。\n\n![mt_examled](assets/mt_examled.jpg)\n\n**交互面板控件说明**\n\n- **RGB_Map**：多选框 开关 RGB 映射，即关闭时只显示深度伪彩点云，打开时显示 RGB 映射点云。\n- **colorMap**：下拉栏 提供了几个伪彩映射选项(即 cmap )，推荐使用 jet，RGB_Map 关闭时有效。\n- **deepRangeMax** 和 **deepRangeMin** 滑动条是设定 cmap 的映射范围的，即只有位于 deepRangeMin 和 deepRangeMax 之间的数值（深度值）会通过 cmap，RGB_Map 关闭时有效。\n- **NormalPoint**：多选框 开关显示正常点（TOF 成像会有无效点，对应的相反描述），需要打开。\n- **OE_Points**：多选框 开关显示 OE 点，建议关闭。\n- **UE_Points**：多选框 开关显示 UE 点，建议关闭。\n- **Bad_Points**：多选框 开关显示无效点，建议关闭。\n- **SpatialFilter**：多选框 开关空间滤波，基于下面的 SpatialFilterSize 值和 SpatialFilterType 指定的算法进行处理。\n- **TemporalFilter**：多选框 开关时间滤波，基于下面的 TemporalFilteralpha 值做了一个时间上的平均。\n- **TemporalFilteralpha**：滑动条 设定时间滤波所需时长，适中即可，可自行尝试体验其它效果。\n- **SpatialFilterType**：下拉栏 设定空间滤波算法，提供高斯滤波（Gaussian）和双边滤波（Bilateral），双边滤波性能要求较高，不建议使用。\n- **SpatialFilterSize**：滑动条 设定空间滤波所需范围，适中即可，可自行尝试体验其它效果。\n- **FlyingPointFilter**：多选框 开关飞点过滤，基于下面的 FlyingPointThreshold 值作为过滤阈值，超过阈值的将被过滤掉，建议适中配置，否则有效点也会被剔除。\n\n### 保存数据\n\n网页版上位机控件栏最下方提供两个按钮，用户可根据以下的说明去使用。\n\n**SaveRaw**：可保存一帧 raw 数据，如果需要使用深度或 IR 或 RGB 数据进行二次开发的话，则需要了解 raw 的数据结构。不过我们也提供详细的 `jupyter notebook` 供用户和开发者使用和了解 raw 数据的处理过程。\n\n**SavePointCloud**：可保存一帧 3D 点云图，保存格式为 `pcd` ，同样可以通过上述提供的脚本预览。\n\n>注意：**raw** 数据可通过开放的接口获取，开发者进行解析即可基于此二次开发，但点云 **pointcloud** 是基于 **raw** 数据和相机内参进行计算得到的，无相应接口提供。\n\n### SSH 登录\n\n除了直接使用网页上位机进行预览，我们还可以使用 SSH 进行登录操作。\n\n.. details::点我查看 MobaXterm 介绍\n\n    MobaXterm 是在 Windows 下使用的全能终端管理软件，而 Linux 系统可以使用 ssh 远程被操作，使用 MobaXterm 进行 ssh 登陆板子直接编辑板内的代码或执行命令，也能方便的拖拽文件上传或下载到电脑里，类似的工具还有 vscode remote 远程登录 linux 服务器。\n\n    ![mobaxterm_ssh](./../../maixIII/assets/ssh.jpg)\n\n**MobaXterm**：[点击前往下载](mobaxterm.mobatek.net/download) 分别有付费与免费双版本，下载免费版本即可。\n**MobaXterm 使用例程**：[点击查看](https://wiki.sipeed.com/hardware/zh/maixII/M2/tools/mobaxterm.html?highlight=ssh)\n\nWindows：参照上文例程使用模组自带的 `ip` 地址 `192.168.233.1` 进行登录。\nLinux：直接使用以下的命令行登录终端进行操作。\n\n```bash\nssh root@192.168.233.1\n```\n\n## 案例：远中近点云实拍\n\n高精度的映射物品摆放距离的差异，点云图可直观清楚感受到更真实的可视化。\n\n![mt_cloud](assets/mt_cloud.jpg)\n\n## 案例：避障小车\n\n模组可搭载小车或无人机来回移动获取障碍物的远近深度值，并通过差异判断画面中是否有障碍物，做出快速反应并精准规避障碍物。\n\n![me_car](./../assets/me_car.jpg)\n\n>例程暂未开源，待整理公开\n\n## 案例：检测人流\n\n可实时监控人流，进行更高精度以及大分辨率的统计。\n\n![me_pt](./../assets/me_pt.jpg)\n\n>例程暂未开源，待整理公开。\n\n## 二次开发：SDK 支持\n\n### python SDK\n\n这是基于 `python 3` 软件开发工具包，MaixSense-A075V 对外开发了 `http` 接口，我们可通过 `http` 请求获取到原生数据（包括深度图，ir 图，rgb 图），为了方便用户理解数据包的结构及获取还有解码的相关逻辑，因此我们提供封装了 `http` 请求和原生数据的解码相关函数，用户基于此可进行二次开发。\n\n**SDK 获取方式**：[点击下载](https://dl.sipeed.com/fileList/others/maixsense_example/maixsense_075_tutorial.ipynb)\n**使用方式**：安装 `jupyter` 后连接模组打开我们提供的 `toturial.py` 即可。\n\n### 解包推流 \n\n理解了上述 `python SDK` 数据获取和解码的逻辑后，我们可以尝试进阶版，连续获取解码并调用第三方 `python` 图像库。例如：`matplotlib` 进行实时显示，而 `toturial.py` 给出了获取一帧数据的逻辑实现，通过 `plt` 显示并外套循环即可做到实时显示。\n\n**解包推流**：[点我查看 stream.py 内容](./../maixsense-a010/code.html#streampy)\n**使用方式**：装好所有的依赖包后即可 `python stream.py` 运行。\n\n![mt_sdk](assets/mt_sdk.jpg)\n\n### 检测体积\n\n基于第三方 `python` 包，理解了上述数据获取和解码的逻辑后再次进阶，\n持续显示多帧并且再通过 `SDK` 获取模组内参数计算出粗略的点云，并进行累加得到物品的总体积。\n\n>限制：要求俯视图可以看到除底面外的所有细节\n\n**检测体积**：[点我查看 calVolumes.py 内容](./../maixsense-a010/code.html#calvolumespy)\n**使用方式**：装好所有的依赖包后即可 `python calVolumes.py` 运行，命令行有后续操作提示。\n\n![mt_volumbs](assets/mt_volumbs.jpg)\n\n## 二次开发：接入 ROS\n### 接入 ROS1\n**1. 准备工作**\n\n运行 ROS 前我们要准备适用的环境：`Linux` 系统。\n可使用虚拟机 `virtual box` 或者 `vmware`：[点击前往下载](https://www.vmware.com/cn/products/workstation-player/workstation-player-evaluation.html)\n也可以自行安装双系统，安装方法请自行搜索或参考右侧：[双系统安装教程](https://neucrack.com/p/330)\n\n**2. 安装运行**\n\nROS1 接入包：[点击前往下载](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A075V/software/SDK)\n\n```bash\n#解压缩sipeed-tofv075-ros.zip，并进入目录\nsource /opt/ros/*/setup.sh\ncatkin_make\nsource devel/setup.sh\nrosrun sipeed_tof_cpp publisher\n#之后终端会持续刷新命令行\n```\n![mt_adb](./assets/mt_adb.jpg)\n\n**3. 可自行在 RQT 查看帧率**\n\n![mt_rqta](./assets/mt_rqta.jpg)\n\n**4. RVIZ 预览**\n\n打开 `rviz2` 后，在界面左下角的 `Add`->`By topic`->`PointCloud2或/depth` ->`Image 添加` ->`Display/Global Options/Fixed Frame` 需要修改成 `tof` 才能正常显示点云，根据添加的内容左侧会显示 **Image** 而中间则显示点云。\n\n![mt_ros](assets/mt_ros.jpg)\n\n### 接入 ROS2\n**1. 准备工作**\n\n运行 ROS 前我们要准备适用的环境：`Linux` 系统。\n可使用虚拟机 `virtual box` 或者 `vmware`：[点击获取](https://www.vmware.com/cn/products/workstation-player/workstation-player-evaluation.html)\n也可以自行安装双系统，安装方法请自行搜索或参考右侧：[双系统安装教程](https://neucrack.com/p/330)\n\n**2. 安装运行**\n\n我们提供了 ROS2 的接入功能包，用户需要在运行 ROS2 的系统上编译安装。\nROS2 接入包：[点击前往下载](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A075V/software/SDK)\n\n``` bash\n#解压缩sipeed-tofv075-ros2.zip，并进入目录\nsource /opt/ros/*/setup.sh\ncolcon build #（如提示缺少colcon时需要sudo apt install python3-colcon-ros）\nsource install/setup.sh\nros2 run sipeed_tof_cpp publisher\n#之后终端会持续刷新显示[sipeed_tof]: Publishing，即正常工作\n``` \n\n**3. RQT 查看帧率**\n\n打开 `RQT` 后选择 `Plugins`->`Topics`->`Topic Monitor`。\n\n![mt_rqt](asstes/../assets/mt_rqt.jpg)\n\n**4. RVIZ2 预览**\n\n打开 `rviz2` 后，在界面左下角的 `Add`->`By topic`->`PointCloud2` 或 `/depth、/intensity、/rgb`->`Image 添加`->`Display/Global Options/Fixed Frame` 需要修改成 `“tof”` 才能正常显示点云。根据添加的内容左侧会显示 **Image** 而中间则显示点云。\n\n**伪彩点云和 RGBD 融合的点云效果：**\n<html>\n  <img src=\"./assets/mt_rosb.jpg\" width=48%>\n  <img src=\"./assets/mt_rosc.jpg\" width=48%>\n</html>"}, "/hardware/zh/maixsense/maixsense-a075v/maixsense_075_tutorial.html": {"title": "", "content": "###Frameencodeanddecodeimpl**structureofoneframe**|packet|field|size|type|description||------|------------|--------|------|------------------------------------------------||frame|frame_id|8B|uint64|indicatewhichframeisit|||frame_stamp|8B|uint64|xxxmspassed|||config|12B|config|infoneededbydecode|||deep_size|4B|int32|sizeofdeepthdata|||rgb_size|4B|int32|sizeofrgbdata|||payload|adaptive|bytes|payloaddata,sizeisnotfixed||config|trigger_mode|1B|uint8|0:STOP1:AUTO2:SINGLE|||deep_mode|1B|uint8|0:16bit1:8bit|||deep_shift|1B|uint8|shiftxxxfrom16bit,justworkingfor8bitmode|||ir_mode|1B|uint8|0:16bit1:8bit|||status_mode|1B|uint8|0:16bit1:2bit2:8bit3:1bit|||status_mask|1B|uint8|justworkingfor1bitmode1:12:24:3|||rgb_mode|1B|uint8|0:YUV1:JPG2:NULL|||rgb_res|1B|uint8|0:800\\*6001:1600\\*1200|||expose_time|4B|int32|exposetimeofthistof,0meansAE(autoexpose)|importstructimportnumpyasnpimportcv2defframe_config_decode(frame_config):'''@frame_configbytes@returnfields,tuple(trigger_mode,deep_mode,deep_shift,ir_mode,status_mode,status_mask,rgb_mode,rgb_res,expose_time)'''returnstruct.unpack(\"<BBBBBBBBi\",frame_config)defframe_config_encode(trigger_mode=1,deep_mode=1,deep_shift=255,ir_mode=1,status_mode=2,status_mask=7,rgb_mode=1,rgb_res=0,expose_time=0):'''@trigger_mode,deep_mode,deep_shift,ir_mode,status_mode,status_mask,rgb_mode,rgb_res,expose_time@returnframe_configbytes'''returnstruct.pack(\"<BBBBBBBBi\",trigger_mode,deep_mode,deep_shift,ir_mode,status_mode,status_mask,rgb_mode,rgb_res,expose_time)defframe_payload_decode(frame_data:bytes,with_config:tuple):'''@frame_data,bytes@with_config,tuple(trigger_mode,deep_mode,deep_shift,ir_mode,status_mode,status_mask,rgb_mode,rgb_res,expose_time)@returnimgs,tuple(deepth_img,ir_img,status_img,rgb_img)'''deep_data_size,rgb_data_size=struct.unpack(\"<ii\",frame_data[:8])frame_payload=frame_data[8:]#0:16bit1:8bit,resolution:320*240deepth_size=(320*240*2)>>with_config[1]deepth_img=struct.unpack(\"<%us\"%deepth_size,frame_payload[:deepth_size])[0]if0!=deepth_sizeelseNoneframe_payload=frame_payload[deepth_size:]#0:16bit1:8bit,resolution:320*240ir_size=(320*240*2)>>with_config[3]ir_img=struct.unpack(\"<%us\"%ir_size,frame_payload[:ir_size])[0]if0!=ir_sizeelseNoneframe_payload=frame_payload[ir_size:]status_size=(320*240//8)*(16if0==with_config[4]else2if1==with_config[4]else8if2==with_config[4]else1)status_img=struct.unpack(\"<%us\"%status_size,frame_payload[:status_size])[0]if0!=status_sizeelseNoneframe_payload=frame_payload[status_size:]assert(deep_data_size==deepth_size+ir_size+status_size)rgb_size=len(frame_payload)assert(rgb_data_size==rgb_size)rgb_img=struct.unpack(\"<%us\"%rgb_size,frame_payload[:rgb_size])[0]if0!=rgb_sizeelseNoneif(notrgb_imgisNone):if(1==with_config[6]):jpeg=cv2.imdecode(np.frombuffer(rgb_img,'uint8',rgb_size),cv2.IMREAD_COLOR)ifnotjpegisNone:rgb=cv2.cvtColor(jpeg,cv2.COLOR_BGR2RGB)rgb_img=rgb.tobytes()else:rgb_img=None#elif0==with_config[6]:#yuv=np.frombuffer(rgb_img,'uint8',rgb_size)#print(len(yuv))#ifnotyuvisNone:#rgb=cv2.cvtColor(yuv,cv2.COLOR_YUV420P2RGB)#rgb_img=rgb.tobytes()#else:#rgb_img=Nonereturn(deepth_img,ir_img,status_img,rgb_img)###Framecapturefromnetworkimplimportnumpyasnpimportmatplotlib.pyplotaspltimportcv2importrequestsHOST='192.168.233.1'PORT=80defpost_encode_config(config=frame_config_encode(),host=HOST,port=PORT):r=requests.post('http://{}:{}/set_cfg'.format(host,port),config)if(r.status_code==requests.codes.ok):returnTruereturnFalsedefpost_CameraParmsBytes(cameraParms:bytes,host=HOST,port=PORT):r=requests.post('http://{}:{}/calibration'.format(host,port),cameraParms)if(r.status_code==requests.codes.ok):print(\"ok\")defget_frame_from_http(host=HOST,port=PORT):r=requests.get('http://{}:{}/getdeep'.format(host,port))if(r.status_code==requests.codes.ok):print('Getdeepimage')deepimg=r.contentprint('Length={}'.format(len(deepimg)))(frameid,stamp_msec)=struct.unpack('<QQ',deepimg[0:8+8])print((frameid,stamp_msec/1000))returndeepimg###Exampleofhowtoshowoneframe-networkexample(2D)-localfileexample(2D,3D)####showframeimplimportnumpyasnpimportmatplotlib.pyplotaspltimportcv2defshow_frame(frame_data:bytes):config=frame_config_decode(frame_data[16:16+12])frame_bytes=frame_payload_decode(frame_data[16+12:],config)depth=np.frombuffer(frame_bytes[0],'uint16'if0==config[1]else'uint8').reshape(240,320)ifframe_bytes[0]elseNoneir=np.frombuffer(frame_bytes[1],'uint16'if0==config[3]else'uint8').reshape(240,320)ifframe_bytes[1]elseNonestatus=np.frombuffer(frame_bytes[2],'uint16'if0==config[4]else'uint8').reshape(240,320)ifframe_bytes[2]elseNonergb=np.frombuffer(frame_bytes[3],'uint8').reshape((480,640,3)ifconfig[6]==1else(600,800,3))ifframe_bytes[3]elseNonefigsize=(12,12)fig=plt.figure(figsize=figsize)ax1=fig.add_subplot(221)ifnotdepthisNone:ax1.imshow(depth)#np.save(\"fg1.npy\",depth)#np.savetxt(\"depth.csv\",(depth/4).astype('uint16'),delimiter=\",\")ax2=fig.add_subplot(222)ifnotirisNone:ax2.imshow(ir)ax3=fig.add_subplot(223)ifnotstatusisNone:ax3.imshow(status)ax4=fig.add_subplot(224)ifnotrgbisNone:ax4.imshow(rgb)####networkexampleifpost_encode_config(frame_config_encode(1,0,255,0,2,7,1,0,0)):p=get_frame_from_http()show_frame(p)#withopen(\"rgbd.raw\",'wb')asf:#f.write(p)#f.flush()Get deep image\nLength=409712\n(0, 118.585)####localfileexamplewithopen(\"rgbd.raw\",'rb')asfp:file_data=fp.read()fp.close()show_frame(file_data)####localfileexample(3D)needlibraryopen3d,yourpythonversionshouldbelessthan3.9(included)website:https://pypi.org/project/open3d/install:pipinstallopen3dimportnumpyasnpimportopen3daso3dpoints=o3d.io.read_point_cloud(\"rgbd.pcd\")o3d.visualization.draw_geometries([points])##utilswithopen(\"./sipeed/CameraParms.json\",\"rb\")asf:post_CameraParmsBytes(f.read())ok"}, "/hardware/zh/maixsense/maixsense-a075v/install_drivers.html": {"title": "安装 RNDIS 驱动", "content": "# 安装 RNDIS 驱动\n\n> 编辑于 2022年8月9日\n\n## 说明\n\nRNDIS 全称为 Remote Network Driver Interface Specification，即远程网络驱动接口规范，是在 USB 设备上跑 TCP/IP 一种规范。\n\n## 相关操作\n\n在 Windows7 及其以上的操作系统中，均已经内置了 RNDIS，但是如果不进行一些特殊操作的话，电脑一般是识别不到相关符合 RNDIS 设备的。\n\n### 安装驱动\n\n将目标设备与电脑通过 USB 接口连接起来，且能够在电脑的设备管理器中看到串行设备。如果没有看到有串行设备的话大概率是供电不足所导致的：对于台式机建议使用主机背部的 USB 接口；使用 USB hub 的话建议使用带有额外供电的；另外建议使用 USB 3.0 的数据口，因为 USB 2.0 驱动供电可能不足。\n\n![串行设备](./assets/install_drivers/serial.png)\n\n右键它，选择更新驱动程序，接着在下面的界面中选择更新驱动程序\n\n![更新驱动](./assets/install_drivers/update.png)\n\n这里我们选择下面的 `让我从计算机上的可用驱动列表中选出(L)`\n\n![选择驱动](./assets/install_drivers/scan.png)\n\n接着对于下面的图我们选择偏右下方的 `从磁盘安装(H)...`\n\n![从磁盘安装](./assets/install_drivers/install.png)\n\n然后在下面的对话框中选择右下角的浏览\n\n![浏览](./assets/install_drivers/path.png)\n\n选中我们所下载且解压之后的文件夹里面，选择一个 .inf 文件后，点击右下角的 `打开`\n\n![inf](./assets/install_drivers/inf.png)\n\n接着会回退到下面的界面，这里直接右下角的点击下一页即可\n\n![下一页](./assets/install_drivers/next.png)\n\n然后就会显示已经更新驱动了\n\n![结束安装驱动](./assets/install_drivers/finish.png)\n\n重新拔插 USB 设备后，等待大概十秒左右，可以在系统的设备管理器里网络适配器中看到看到有 `RNDIS/Ethernet Gadget`，到此已经成功安装驱动了"}, "/hardware/zh/maixsense/index.html": {"title": "MaixSense 系列", "content": "---\ntitle: MaixSense 系列\n---\n\n## MaixSense 是什么?\n\nMaixSense 系列产品搭载 TOF 深度摄像头，目前有 MaixSense-A010 和 MaixSense-A075V 两款产品。\n- MS-A010 是一款由 BL702 + 炬佑 100x100 TOF 模组所组成的极致性价比的 TOF 3D 传感器模组，最大支持 100x100 的分辨率和 8 位精度，并且带有 240×135 的 LCD 显示屏可实时预览 color map 后的深度图。\n- 而 MS-A075V 是一款具有 RGB 功能的 3D TOF 摄像机模组，该模组可以实现 Linux 免驱的即插即用，实现实时彩色 3D 显示。\n\n<img src=\"./assets/meta.jpg\" alt=\"summary\" width=100%>\n\n购买方式：[众筹预售购买连接](https://igg.me/at/MaixSense)\n\n|                                                | <p style=\"white-space:nowrap\">MaixSense-A010</p> | <p style=\"white-space:nowrap\">MaixSense-A075V</p> |\n| :--------------------------------------------- | :----------------------------------------------- | :------------------------------------------------ |\n|                                                | ![me-small](./assets/me_small.jpg)               | ![me-big](./assets/me_big.jpg)                    |\n| 接口                                           | 1.25mm 串口连接器 \\*1<br>Type-C USB2.0 \\*1       | 1.25mm 串口连接器 \\*1 <br>Type-C USB2.0 \\*1       |\n| 分辨率                                         | TOF：100x100@30fps                               | RGB：1600x1200@30fps<br>TOF：320x240@60fps        |\n| 视场角                                         | RGB：无<br>TOF：70°(H) * 60°(V)                  | RGB：120°<br>TOF：55°(H)*72°(H)                   |\n| <p style=\"white-space:nowrap\">TOF 像素尺寸</p> |                                                  | 15um                                              |\n| 激光发射器                                     | 40nm VCSEL                                       | 940nm,3W                                          |\n| 测量范围                                       | 0.2-2.5m                                         | 0.15-1.5m                                         |\n| 测量精度                                       | &lt;=1%/cm                                       | &lt;=1%/cm                                        |\n\n\n## MaixSense 能做什么？\n\n### 案例：远中近物体实拍\n\n高精度的映射物品摆放距离的差异，点云图可直观感受到更真实的可视化。\n<html>\n  <img src=\"./maixsense-a010/assets/ms_cloud.jpg\" width=48%>\n  <img src=\"./maixsense-a075v/assets/mt_cloud.jpg\" width=48%>\n</html>\n\n### 案例：人流统计\n\n可实时监控人流，进行高精度、大分辨率的统计。\n<html>\n  <img src=\"./assets/me_p.jpg\" width=48%>\n  <img src=\"./assets/me_pt.jpg\" width=48%>\n</html>\n\n### 案例：小车避障\n\n可搭载于小车移动并判断画面是否有障碍物，模组自带 LCD 屏幕精准显示距离并做出反应规避障碍物。\n![me_car](./assets/me_car.gif)\n\n### 案例：键盘灯跟随\n\n实现超酷炫的键盘灯跟随，实时跟踪手部的位置，再根据手部的位置映射键盘灯。\n\n![ms_lamp](./maixsense-a010/assets/ms_lamp.jpg)\n\n### 案例：体积测量\n\n通过 SDK 获取到的模组内参数后，计算粗略点云并累加总体积，达到体积测量的效果。\n\n![mt_volume](./maixsense-a075v/assets/mt_volumbs.jpg)\n\n### 案例：外接 MCU\nMS-A010 拥有强大的兼容性，基于串口协议的数据传输。\n可外接 K210 bit 这样的单片机开发板或树莓派之类的 linux 开发板来进行二次开发。\n\n![ms_mcu](./maixsense-a010/assets/ms_mcu.jpg)\n\n### 案例：接入 ROS1 + ROS2\n\n双支持 ROS 系统，开放 ROS1+ROS2 接入功能包，可快速获得深度数据及深度图。\n<html>\n  <img src=\"./assets/me_ross.jpg\" height=250 width=49%>\n  <img src=\"./assets/me_rosb.jpg\" width=49% height=250>\n</html>\n\n## 快速了解 TOF 技术\n\n1. TOF: 是一种距离测量的方法，通过测量发射器和反射器之间的超声波/微波/光等信号的“飞行时间”来计算两者之间的距离。 可以实现TOF测距的是TOF传感器。 最常用的是红外线或激光测距。\n2. 物体之间的距离存在差异。 该模块通过捕获的深度值的差异来显示冷色和暖色。冷暖色随着距离的映射而变化，距离越近色调呈暖调（橘红）而越远色调呈冷调（蓝色）。\n<html>\n  <img src=\"./assets/tof_two.jpg\" height=250 width=49%>\n  <img src=\"./assets/tof.jpg\" width=49% height=250>\n</html>\n\n## 更多\n\n关于 MS-010 更详细的资料获取：[点击跳转](https://wiki.sipeed.com/hardware/zh/maixsense/maixsense-a010/maixsense-a010.html)\n关于 MS-075 更详细的资料获取：[点击跳转](https://wiki.sipeed.com/hardware/zh/maixsense/maixsense-a075v/maixsense-a075v.html)"}, "/hardware/zh/maixsense/maixsense-a010/maixsense-a010.html": {"title": "MaixSense-A010", "content": "# MaixSense-A010\n\n|     时间      | 负责人 |   更新内容   |\n| :-----------: | :----: | :----------: |\n| 2022.09.10 | lyx | 初次编写文档 |\n| 2022.11.12 | lyx | 补充细节 |\n## 产品概述\n\n![ms_small](./assets/ms_s.jpg)\n**MaixSense-A010** 是 **SIPEED** 推出由 **BL702** + 炬佑 **100x100 TOF** 所组成的 **3D** 传感器模组，最大支持 **100x100** 的分辨率和 **8** 位精度并自带 **240×135** 像素的 **LCD** 屏可实时预览 **colormap** 后的深度图。\n\n### 资料汇总\n\n硬件资料：[点击查看下载](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010)\nGithub：[点击查看](https://github.com/sipeed/MaixSense_ROS)\n\n## 产品开箱指南\n\n### 准备工作\n\n**MaixSense-A010** 采用串口协议对外提供接口以及传输数据。\n我们提供的物理接口有 type-c（虚拟串口）及 1.0mm 4pin 母座（UART）都能获取深度图数据用于集成.\n\n- **产品接线说明**\n \n通过 type-c 接口连接 PC 端后，可以识别到 `/dev/ttyUSBx（Linux）`或 `COMx（Windows)`.\n\n![ms_pinb](./assets/ms_pinb.jpg)\n\n还可通过 usb2ttl 模组按照硬件引脚图（设备屏幕正面朝下）连接 4pin 母座。\n\n<html>\n  <img src=\"./assets/ms_pin.jpg\" width=48%>\n  <img src=\"./asstes/../assets/ms_pinc.jpg\" width=48%>\n</html>\n\n<table>\n    <tr>\n        <td>MS-A010</td>\n        <td>TX</td>\n        <td>RX</td>\n        <td>GND</td>\n        <td>5V</td>\n    </tr>\n    <tr>\n        <td>usb2ttl 模块</td>\n        <td>RX</td>\n        <td>TX</td>\n        <td>GND</td>\n        <td>5V</td>\n    </tr>\n</table>\n\n### 上电互动预览\n\n**按键功能**：左侧为“下一个”右侧为“切换”.\n\n**屏幕显示**：屏幕中心的 **+** 字是测距点，右上方会实时显示 **xx cm** 代表测距的距离。如镜头前近处有大面积物体时屏幕右上会显示 **“block!”**而其他情况为 **“open!”**.\n\n将设备接入电源后，可在设备上自带 LCD 屏实时预览 color map 后的深度伪彩图。\n\n![ms_lcd](./assets/ms_lcd.jpg)\n\n### PC 互动预览\n\n在 PC 端上预览修改配置前需要先安装上位机软件 COMTOOL.\n\n**COMTOOL/Windows 系统**：[点击下载](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010/software_pack/comtool)\n**COMTOOL/Linux 系统**：[需用户自行编译/点击跳转](https://github.com/sipeed/MetaSense-ComTool)\n\n>注意：Win 7 及以下系统需装驱动，可自行前往 FTDI 官网下载。\n\n打开 COMTOOL 软件后选择 `Graph` 界面，如果软件上方无 `Graph` 的话可在右上角 **+** 号处添加 `Graph`，创建后若居中部分为白无图，则**双击**左下角 `MaixSenseLite` 即可打开界面显示端口。\n\n![ms_comtool](./assets/ms_comtool.jpg)\n\n在左侧 `Port` 选择小的端口和对应波特率（任意选择高波特率），点击 `open` 后再勾选下方 `USB` 即可接收大量数据,左下角处会显示 **Connected**.\n\n![ms_comtool_two](./assets/ms_comtoolt.jpg)\n\n设定 `Header` 为 `\\x00\\xFF` 即可解析正确的图像数据并观察到深度图，可以直观感受二维平面图像上的深度。\n\n![ms_comtoolh](./assets/ms_comtoolh.jpg)\n\n### 互动配置说明\n\nCOMTOOL 上位机的配置控件说明\n- **Header**：设置识别包头\n- **RawCMD**：用户可以手动发送指令（USB 和 UART 串口行为相同）\n- **ISP**：启动停止\n- **LCD**：显示自带屏的开启关闭\n- **USB**：串口传输深度图开启关闭\n- **UART**：串口传输深度图开启关闭\n- **ANTIMMI**：自动抗多机干扰开启关闭（易受干扰，关闭的效果都要更好些）\n- **Binn**：可下拉设置 BINNING，Baud 设置 UART 波特率\n- **X、Y**：设置坐标：D 左侧多选框开启后显示出该摄像头的距离。\n- **Unit**：设置量化单位（16位量化到8位，比例缩小，设置太小的话会只能看清很近处的影像）\n- **FPS**：设置出图帧率（不宜过高，根据对接设备的性能合理设置即可，减小帧率可以减少传输数据量）\n- **Ev**：曝光间隙控制（最左代表 AE，其他是固定曝光时间）\n\n## 案例：远近中物体实拍\n\n设备自带 **LCD** 屏上电后可实时观察到远近中物体的深度值差异。\n物体不同的放置位置形成距离的差异，设备捕捉到差异后转化为深度值并因距离的远近显示冷暖色调。\n\n![ms_](./assets/ms_carton.jpg)\n\n## 案例：检测人流\n\n实时高精度，大分辨率的监测人流量走动的情况并且快速统计出数据。\n\n![ms_people](./assets/ms-people.jpg)\n\n>例程源码暂时还未开源，待整理公开。\n## 案例：键盘灯跟随\n\n实现超酷炫的键盘灯跟随，设备实时跟踪手部的位置变化，再根据手部的位置映射键盘灯。\n**键盘灯相关代码支持**：[点击查看](https://dl.sipeed.com/shareURL/others/maixsense_example)\n\n![ma_lamp](./assets/ms_lamp.jpg)\n\n## 案例：接入 MCU \n\n因 **MaixSense-A010** 拥有强大的兼容性，可基于串口协议外接 **K210 Maix bit** 这样的 **AIOT** 开发板或树莓派之类的 **Linux** 开发板来进行二次开发，为了方便用户的使用我们开放接入例程。\n\n.. details::点击查看 K210 Maix Bit 介绍\n    Maix Bit 是 sipeed Maix 中产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片 K210 设计的一款 AIOT 开发板。以 K210 作为核心单元，功能非常很强大，芯片内置 64 位双核处理器，拥有 8M 的片上 SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达 1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n    ![bit](./../../../../soft/maixduino/assets/BiT.png)\n\n**Maix Bit 购买传送门**：[点击查看](https://item.taobao.com/item.htm?spm=a230r.1.14.11.681570a1yq4sJD&id=586580351110&ns=1&abbucket=10&mt=)\n**Maix Bit 资料传送门**：[更多详细资料](https://wiki.sipeed.com/hardware/zh/maix/maixpy_develop_kit_board/maix_bit.html)\n**MaixSense-A010 外接 Maix Bit 例程**：[点击查看](http://wiki.sipeed.com/hardware/zh/maixsense/maixsense-a010/mcu.html)\n\n![ms_mcu](./assets/ms_mcu.jpg)\n\n## 二次开发：串口协议\n\n可参考上方的案例：**MS-A010 外接 K210 bit**\n**MaixSense-A010 串口协议传送门**：[点击查看](http://wiki.sipeed.com/hardware/zh/maixsense/maixsense-a010/at_command.html)\n\n## 二次开发：接入 ROS\n### 接入 ROS1 \n\n**1. 准备工作** \n运行 ROS 前我们要准备适用的环境：`Linux` 系统。\n可使用虚拟机 `virtual box` 或者 `vmware`：[点击获取](https://www.vmware.com/cn/products/workstation-player/workstation-player-evaluation.html)\n也可以自行安装双系统，安装方法请自行搜索或参考右侧：[双系统安装教程](https://neucrack.com/p/330)\n\n**2. 安装运行**\nROS 接入包：[点击前往下载](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010/software_pack/SDK)\n\n```bash\n#解压缩 sipeed_tof_ms_a010.zip，并进入目录\ncd ros1\nsource /opt/ros/*/setup.sh\ncatkin_make\nsource devel/setup.sh \nrosrun sipeed_tof_ms_a010 a010_publisher _device:=\"/dev/ttyUSB0\"\n#之后终端会持续刷新显示[sipeed_tof]: Publishing，即正常工作\n```\n\n![ros_adb](./assets/ros_adb.jpg)\n\n**3. 可自行在 RQT 查看帧率**\n\n![ms_rosone](./assets/ms_rosone.jpg)\n\n**4. RVIZ2 预览**\n打开 `rviz2` 后，在界面左下角的 `Add`->`By topic`->`PointCloud2或/depth` ->`Image 添加` ->`Display/Global Options/Fixed Frame` 需要修改成 `tof`，才能正常显示点云，根据添加的内容，左侧会显示 `Image` 而中间则显示点云。\n![ms_rviz](./assets/ms_rviz.jpg)\n\n\n### 接入 ROS2 \n\n**1. 准备工作**\n运行 ROS 前我们要准备适用的环境：`Linux` 系统。\n可使用虚拟机 `virtual box` 或者 `vmware`：[点击获取](https://www.vmware.com/cn/products/workstation-player/workstation-player-evaluation.html)\n也可以自行安装双系统，安装方法请自行搜索或参考右侧：[双系统安装教程](https://neucrack.com/p/330)\n\n> 如果环境同时安装了 ROS1，使用 ROS2 的话需要选额外择正确的版本。\n\n```bash\nls /opt/ros\nros@ros-virtual-machine:~/Desktop$ ls /opt/ros\nnoetic  rolling\n```\n**2. 安装运行**\n我们提供了 ROS2 的接入功能包，用户需要在运行 ROS2 的系统上编译安装。\nROS 接入包：[点击前往下载](https://dl.sipeed.com/shareURL/MaixSense/MaixSense_A010/software_pack/SDK)\n\n```bash\n#解压缩sipeed_tof_ms_a010.zip，并进入目录\ncd ros2\nsource /opt/ros/*/setup.sh\ncolcon build #（如提示缺少colcon时需要sudo apt install python3-colcon-ros）\nsource install/setup.sh\nros2 run sipeed_tof_ms_a010 publisher --ros-args -p device:=\"/dev/ttyUSB0\"\n#之后终端会持续刷新显示[sipeed_tof]: Publishing，即正常工作\n```\n\n**3. RQT 查看帧率**\n\n![ms_rqt](asstes/../asstes/../assets/ms_rqt.jpg)\n\n**4. RVIZ2 预览**\n打开 `rviz2` 后，在界面左下角的 `Add`->`By topic`->`PointCloud2或/depth` ->`Image 添加` ->`Display/Global Options/Fixed Frame` 需要修改成 `tof`，才能正常显示点云，根据添加的内容，左侧会显示 `Image` 而中间则显示点云。\n![ms_ros](assets/ms_ros.jpg)"}, "/hardware/zh/maixsense/maixsense-a010/mcu.html": {"title": "MS-A010 接入 MCU（Maix Bit）", "content": "# MS-A010 接入 MCU（Maix Bit）\n\n此文详细说明一下 MaixSense-a010 接入 K210 Bit 例程，用户可基于此篇快速进行二次开发。\n\n[Maix Bit 购买链接指路](https://item.taobao.com/item.htm?spm=a230r.1.14.11.681570a1yq4sJD&id=586580351110&ns=1&abbucket=10&mt=)\n[]()\n![ms_mscu](./assets/ms_mcu.jpg)\n\n## 概述\n\nMS-A010 拥有强大的兼容性，可基于串口协议外接 Maix-I-Bit 这样的单片机开发板或树莓派之类的 linux 开发板来进行二次开发。\nMAIX-I-BIT 开发板是 Sipeed Maix 中产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片 K210 (RISC-V 架构 64位双核) 设计的一款 AIOT 开发板。\n\n## 准备工作\n\n首先，我们肯定要各自拥有一个 MS-A010 模组和 Bit 开发板 如果没有的话，接入例程就此停步。\n接下来 准备 4pin 端子线以及 USB type-c 线一条。\n\n### 接线教程\n\n接线需要了解 A010 的接口的引脚信息，"}, "/hardware/zh/maixsense/maixsense-a010/at_command.html": {"title": "MaixSense-A010 二次开发手册", "content": "# MaixSense-A010 二次开发手册\n\n## AT 指令表\n\n| AT                             |                                                                                                                                                                                                                |\n| ------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| +ISP<br>Image Signal Processor | :0: turn ISP off<br>=1: turn ISP on                                                                                                                                                                            |\n| +BINN<br>full binning          | =1: output 100x100 pixel frame<br>=2: output 50x50 pixel frame<br>=4: output 25x25 pixel frame<br>                                                                                                             |\n| +DISP<br>display mux           | =0: all off<br>=1: lcd display on<br>=2: usb display on<br>=3: lcd and usb display on<br>=4: uart display on<br>=5: lcd and uart display on<br>=6: usb and uart display on<br>=7: lcd, usb and uart display on |\n| +BAUD<br>uart baudrate         | =0: 9600<br>=1: 57600<br>=2: 115200<br>=3: 230400<br>=4: 460800<br>=5: 921600<br>=6: 1000000<br>=7: 2000000<br>=8: 3000000                                                                                     |\n| +UNIT<br>quantization unit     | =0: auto<br>=1-10: quantizated by unit(mm)                                                                                                                                                                     |\n| +FPS<br>frame per second       | =1-19: set frame per second                                                                                                                                                                                    |\n| +Save<br>save config           | : save current configuration                                 |\n\n句法：\n\n|输入|执行|注释|\n|---|---|---|\n|AT+ISP? |\\r|返回当前ISP状态|\n|AT+ISP=? |\\r|返回所有支持的ISP状态|\n|AT+ISP=< MODE >|\\r|选择ISP状态|\n\n\n参数：\n\n|< MODE >  | 含义 |\n|----|----|\n|0 \"STOP ISP\"   |立即关闭模组ISP，停止IR发射器|\n|1 \"LAUNCH ISP\" |计划启动模组ISP，实际出图需等待1～2秒|\n\n### BINN指令\n句法：\n\n| 输入 | 执行 | 注释 |\n|----|----|----|\n| AT+BINN? | \\r | 返回当前BINN状态 |\n| AT+BINN=? | \\r | 返回所有支持的BINN状态 |\n| AT+BINN= < MODE > | \\r | 选择BINN状态 |\n\n参数：\n\n| < MODE > | 含义 |\n|----------|------|\n| 1 \"1x1 BINN\" | 1x1相当于无binning，实际出图分辨率为100x100。 |\n| 2 \"2x2 BINN\" | 2×2binning，4个像素点合并成1个，实际出图分辨率为50×50计划启动模组ISP，实际出图需等待1～2秒。|\n| 4 \"4x4 BINN\" | 4×4binning，16个像素点合并成1个，实际出图分辨率为25×25。 |\n\n\n### DISP指令\n请按需开启，避免资源过度占用\n句法：\n\n| 输入 | 执行 | 注释 |\n|------|------|-----|\n| AT+DISP? | \\r | 返回当前DISP状态 | \n| AT+DISP=? | \\r | 返回所有支持的DISP状态 |\n| AT+DISP=< MODE > | \\r | 选择DISP状态 |\n\n参数：\n\n\n| < MODE > | 含义 |\n|----------|------|\n| 0 | all off |\n| 1 | lcd display on |\n| 2 | usb display on |\n| 3 | lcd and usb display on |\n| 4 | uart display on |\n| 5 | lcd and uart display on |\n| 6 | usb and uart display on |\n| 7 | lcd, usb and uart display on |\n\n### BAUD指令\n句法：\n\n| 输入 | 执行 | 注释 |\n|------|-----|------|\n| AT+BAUD? | \\r | 返回当前BAUD状态 |\n| AT+BAUD=? | \\r | 返回所有支持的BAUD状态 |\n| AT+BAUD=< MODE > | \\r | 选择BAUD状态 |\n\n参数：\n\n| < MODE > | 含义 |\n|----------|------|\n| 0 | 9600 |\n| 1 | 57600 |\n| 2 | 115200 |\n| 3 | 230400 |\n| 4 | 460800 |\n| 5 | 921600 |\n| 6 | 1000000 |\n| 7 | 2000000 |\n| 8 | 3000000 |\n\n### UNIT指令\n句法：\n\n| 输入 | 执行 | 注释 |\n|------|------|------|\n| AT+UNIT? | \\r | 返回当前UNIT值 |\n| AT+UNIT=? | \\r | 返回所有支持的UNIT值 |\n| AT+UNIT=< UINT > | \\r | 选择UNIT值 |\n\n参数：\n\n| < UINT > | 含义 | \n|----------|------|\n| 0 \"DEFAULT UNIT\" | 采用默认量化策略，因tof特性导致成像近处精度优于远距离处，故放大近距离处差异，采用5.1*sqrt(x)将16bit的原数据量化为8bit |\n| 1...9 \"QUANTIZE UNIT\" | 代表以x mm为单位进行量化，取值越小细节越多，同时可视距离越短，请合理设置 |\n\n### FPS指令\n句法：\n\n| 输入 | 执行 | 注释 |\n|------|-----|------|\n| AT+FPS? | \\r | 返回当前FPS值 |\n| AT+FPS=? | \\r | 返回所有支持的FPS值 |\n| AT+FPS=<FPS> | \\r | 选择FPS值 |\n\n参数：\n\n| < FPS > | 含义 |\n|---------|------|\n| 1...19 \"frame per second\" | tof出图帧率，越大越流畅 |\n\n### SAVE指令\n句法：\n\n| 输入 | 执行 | 注释 |\n|------|------|-----|\n| AT+SAVE | \\r | 固化TOF摄像头当前配置，事后需要复位 |\n\n多机和 AE 指令建议加入\n\n### ANTIMMI指令\n句法：\n\n| 输入 | 执行 | 注释 |\n|------|------|-----|\n| AT+ANTIMMI? | \\r    | 返回当前ANTIMMI状态       |\n| AT+ANTIMMI=? | \\r   | 返回所有支持的ANTIMMI状态  |\n| AT+ANTIMMI=< MODE > | \\r | 选择ANTIMMI状态      |\n\n参数：\n\n| < MODE > | 含义 |\n|----------|------|\n| -1       | disable anti-mmi               |\n| 0        | auto anti-mmi                  |\n| 1-41     | manual anti-mmi usb display on |\n\n### 图像数据包说明\n上电默认启动ISP并在显示屏显示图像，同时输出图像数据到uart和usb\n图像数据封装成包（未稳定）：\n1. 包头2字节：0X00、0XFF \n2. 包长度2字节：当前包剩余数据的字节数 \n3. 其他内容16字节：包括包序号、包长度、分辨率等等 \n4. 图像帧 \n5. 校验1字节：之前所有字节的“和”低八位 \n6. 包尾1字节：0XDD"}, "/hardware/zh/maixsense/maixsense-a010/code.html": {"title": "源码总览", "content": "# 源码总览\n\n- [源码总览](#源码总览)\n  - [tof_mainpy](#tof_mainpy)\n  - [streampy](#streampy)\n  - [calvolumespy](#calvolumespy)\n\n## tof_mainpy\n\n```python\nfrom fpioa_manager import fm\nfrom machine import UART\nimport lcd, image\n\n# lcd.init(invert=True)\nlcd.init()\nimg = image.Image()\n\nfm.register(24, fm.fpioa.UART1_TX, force=True)\nfm.register(25, fm.fpioa.UART1_RX, force=True)\n\nuart_A = UART(UART.UART1, 115200, 8, 0, 0, timeout=1000, read_buf_len=4096)\n\ndef uart_readBytes():\n    return uart_A.read()\n\n\ndef uart_hasData():\n    return uart_A.any()\n\n\ndef uart_sendCmd(cmd):\n    uart_A.write(cmd)\n\nuart_sendCmd(b\"AT+BAUD=5\\r\")\n\nuart_A.deinit()\n\nuart_A = UART(UART.UART1, 921600, 8, 0, 0, timeout=1000, read_buf_len=4096)\n\njetcolors = [\n    (128, 0, 0), (132, 0, 0), (136, 0, 0), (140, 0, 0), (144, 0, 0), (148, 0, 0), (152, 0, 0), (156, 0, 0), (160, 0, 0), (164, 0, 0), (168, 0, 0), (172, 0, 0), (176, 0, 0), (180, 0, 0), (184, 0, 0), (188, 0, 0), (192, 0, 0), (196, 0, 0), (200, 0, 0), (204, 0, 0), (208, 0, 0), (212, 0, 0), (216, 0, 0), (220, 0, 0), (224, 0, 0), (228, 0, 0), (232, 0, 0), (236, 0, 0), (240, 0, 0), (244, 0, 0), (248, 0, 0), (252, 0, 0), (255, 0, 0), (255, 4, 0), (255, 8, 0), (255, 12, 0), (255, 16, 0), (255, 20, 0), (255, 24, 0), (255, 28, 0), (255, 32, 0), (255, 36, 0), (255, 40, 0), (255, 44, 0), (255, 48, 0), (255, 52, 0), (255, 56, 0), (255, 60, 0), (255, 64, 0), (255, 68, 0), (255, 72, 0), (255, 76, 0), (255, 80, 0), (255, 84, 0), (255, 88, 0), (255, 92, 0), (255, 96, 0), (255, 100, 0), (255, 104, 0), (255, 108, 0), (255, 112, 0), (255, 116, 0), (255, 120, 0), (255, 124, 0), (255, 128, 0), (255, 132, 0), (255, 136, 0), (255, 140, 0), (255, 144, 0), (255, 148, 0), (255, 152, 0), (255, 156, 0), (255, 160, 0), (255, 164, 0), (255, 168, 0), (255, 172, 0), (255, 176, 0), (255, 180, 0), (255, 184, 0), (255, 188, 0), (255, 192, 0), (255, 196, 0), (255, 200, 0), (255, 204, 0), (255, 208, 0), (255, 212, 0), (255, 216, 0), (255, 220, 0), (255, 224, 0), (255, 228, 0), (255, 232, 0), (255, 236, 0), (255, 240, 0), (255, 244, 0), (255, 248, 0), (255, 252, 0), (254, 255, 1), (250, 255, 6), (246, 255, 10), (242, 255, 14), (238, 255, 18), (234, 255, 22), (230, 255, 26), (226, 255, 30), (222, 255, 34), (218, 255, 38), (214, 255, 42), (210, 255, 46), (206, 255, 50), (202, 255, 54), (198, 255, 58), (194, 255, 62), (190, 255, 66), (186, 255, 70), (182, 255, 74), (178, 255, 78), (174, 255, 82), (170, 255, 86), (166, 255, 90), (162, 255, 94), (158, 255, 98), (154, 255, 102), (150, 255, 106), (146, 255, 110), (142, 255, 114), (138, 255, 118), (134, 255, 122), (130, 255, 126),\n    (126, 255, 130), (122, 255, 134), (118, 255, 138), (114, 255, 142), (110, 255, 146), (106, 255, 150), (102, 255, 154), (98, 255, 158), (94, 255, 162), (90, 255, 166), (86, 255, 170), (82, 255, 174), (78, 255, 178), (74, 255, 182), (70, 255, 186), (66, 255, 190), (62, 255, 194), (58, 255, 198), (54, 255, 202), (50, 255, 206), (46, 255, 210), (42, 255, 214), (38, 255, 218), (34, 255, 222), (30, 255, 226), (26, 255, 230), (22, 255, 234), (18, 255, 238), (14, 255, 242), (10, 255, 246), (6, 255, 250), (2, 255, 254), (0, 252, 255), (0, 248, 255), (0, 244, 255), (0, 240, 255), (0, 236, 255), (0, 232, 255), (0, 228, 255), (0, 224, 255), (0, 220, 255), (0, 216, 255), (0, 212, 255), (0, 208, 255), (0, 204, 255), (0, 200, 255), (0, 196, 255), (0, 192, 255), (0, 188, 255), (0, 184, 255), (0, 180, 255), (0, 176, 255), (0, 172, 255), (0, 168, 255), (0, 164, 255), (0, 160, 255), (0, 156, 255), (0, 152, 255), (0, 148, 255), (0, 144, 255), (0, 140, 255), (0, 136, 255), (0, 132, 255), (0, 128, 255), (0, 124, 255), (0, 120, 255), (0, 116, 255), (0, 112, 255), (0, 108, 255), (0, 104, 255), (0, 100, 255), (0, 96, 255), (0, 92, 255), (0, 88, 255), (0, 84, 255), (0, 80, 255), (0, 76, 255), (0, 72, 255), (0, 68, 255), (0, 64, 255), (0, 60, 255), (0, 56, 255), (0, 52, 255), (0, 48, 255), (0, 44, 255), (0, 40, 255), (0, 36, 255), (0, 32, 255), (0, 28, 255), (0, 24, 255), (0, 20, 255), (0, 16, 255), (0, 12, 255), (0, 8, 255), (0, 4, 255), (0, 0, 255), (0, 0, 252), (0, 0, 248), (0, 0, 244), (0, 0, 240), (0, 0, 236), (0, 0, 232), (0, 0, 228), (0, 0, 224), (0, 0, 220), (0, 0, 216), (0, 0, 212), (0, 0, 208), (0, 0, 204), (0, 0, 200), (0, 0, 196), (0, 0, 192), (0, 0, 188), (0, 0, 184), (0, 0, 180), (0, 0, 176), (0, 0, 172), (0, 0, 168), (0, 0, 164), (0, 0, 160), (0, 0, 156), (0, 0, 152), (0, 0, 148), (0, 0, 144), (0, 0, 140), (0, 0, 136), (0, 0, 132), (0, 0, 128)\n]\n\ndef show(frameData, res):\n    resR = res[0]\n    resC = res[1]\n    for y in range(resR):\n        for x in range(resC):\n            pixel_cmap_rgb = jetcolors[frameData[y*resR + x]]\n            img.set_pixel(110 + x, 70 + y, pixel_cmap_rgb)\n    lcd.display(img)\n    img.clear()\n\nFRAME_HEAD = b\"\\x00\\xFF\"\nFRAME_TAIL = b\"\\xCC\"\n\nfrom struct import unpack\n# send_cmd(\"AT+BINN=2\\r\")\nuart_sendCmd(b\"AT+DISP=5\\r\")\nuart_sendCmd(b\"AT+FPS=10\\r\")\n\n# while True:\n#     if uart_hasData():\n#         print(uart_readBytes())\n\nrawData = b''\nwhile True:\n    if not uart_hasData():\n        continue\n    rawData += uart_readBytes()\n    idx = rawData.find(FRAME_HEAD)\n    if idx < 0:\n        continue\n    rawData = rawData[idx:]\n    # print(rawData)\n    # check data length 2Byte\n    dataLen = unpack(\"H\", rawData[2: 4])[0]\n    # print(\"len: \"+str(dataLen))\n    frameLen = len(FRAME_HEAD) + 2 + dataLen + 2\n    frameDataLen = dataLen - 16\n\n    if len(rawData) < frameLen:\n        continue\n    # get data\n    frame = rawData[:frameLen]\n    # print(frame.hex())\n    rawData = rawData[frameLen:]\n\n    frameTail = frame[-1]\n    # print(\"tail: \"+str(hex(frameTail)))\n    _sum = frame[-2]\n    # print(\"checksum: \"+str(hex(_sum)))\n    # check sum\n    # spi has no checksum but i add one\n    if frameTail != 0xdd and _sum != sum(frame[:frameLen - 2]) % 256:\n        continue\n\n    frameID = unpack(\"H\", frame[16:18])[0]\n    # print(\"frame ID: \"+str(frameID))\n\n    resR = unpack(\"B\", frame[14:15])[0]\n    resC = unpack(\"B\", frame[15:16])[0]\n    res = (resR, resC)\n    # print(res)\n    # frameData=[ unpack(\"H\", frame[20+i:22+i])[0] for i in range(0, frameDataLen, 2) ]\n    frameData = [unpack(\"B\", frame[20+i:21+i])[0]\n                    for i in range(0, frameDataLen, 1)]\n\n    show(frameData, res)\n\n    del frameData\n```\n\n## streampy\n\n```python\nfrom PIL import Image\nimport requests\nimport matplotlib.pyplot as plt\nimport struct\nimport numpy as np\nimport cv2\n\n\ndef frame_config_decode(frame_config):\n    '''\n        @frame_config bytes\n\n        @return fields, tuple (trigger_mode, deep_mode, deep_shift, ir_mode, status_mode, status_mask, rgb_mode, rgb_res, expose_time)\n    '''\n    return struct.unpack(\"<BBBBBBBBi\", frame_config)\n\n\ndef frame_config_encode(trigger_mode=1, deep_mode=1, deep_shift=255, ir_mode=1, status_mode=2, status_mask=7, rgb_mode=1, rgb_res=0, expose_time=0):\n    return struct.pack(\"<BBBBBBBBi\",\n                       trigger_mode, deep_mode, deep_shift, ir_mode, status_mode, status_mask, rgb_mode, rgb_res, expose_time)\n\n\ndef frame_payload_decode(frame_data: bytes, with_config: tuple):\n    deep_data_size, rgb_data_size = struct.unpack(\"<ii\", frame_data[:8])\n    frame_payload = frame_data[8:]\n    # 0:16bit 1:8bit, resolution: 320*240\n    deepth_size = (320*240*2) >> with_config[1]\n    deepth_img = struct.unpack(\"<%us\" % deepth_size, frame_payload[:deepth_size])[\n        0] if 0 != deepth_size else None\n    frame_payload = frame_payload[deepth_size:]\n\n    # 0:16bit 1:8bit, resolution: 320*240\n    ir_size = (320*240*2) >> with_config[3]\n    ir_img = struct.unpack(\"<%us\" % ir_size, frame_payload[:ir_size])[\n        0] if 0 != ir_size else None\n    frame_payload = frame_payload[ir_size:]\n\n    status_size = (320*240//8) * (16 if 0 == with_config[4] else\n                                  2 if 1 == with_config[4] else 8 if 2 == with_config[4] else 1)\n    status_img = struct.unpack(\"<%us\" % status_size, frame_payload[:status_size])[\n        0] if 0 != status_size else None\n    frame_payload = frame_payload[status_size:]\n\n    assert(deep_data_size == deepth_size+ir_size+status_size)\n\n    rgb_size = len(frame_payload)\n    assert(rgb_data_size == rgb_size)\n    rgb_img = struct.unpack(\"<%us\" % rgb_size, frame_payload[:rgb_size])[\n        0] if 0 != rgb_size else None\n\n    if (not rgb_img is None) and (1 == with_config[6]):\n        jpeg = cv2.imdecode(np.frombuffer(\n            rgb_img, 'uint8', rgb_size), cv2.IMREAD_COLOR)\n        if not jpeg is None:\n            rgb = cv2.cvtColor(jpeg, cv2.COLOR_BGR2RGB)\n            rgb_img = rgb.tobytes()\n        else:\n            rgb_img = None\n\n    return (deepth_img, ir_img, status_img, rgb_img)\n\n\nHOST = '192.168.233.1'\nPORT = 80\n\n\ndef post_encode_config(config=frame_config_encode(), host=HOST, port=PORT):\n    r = requests.post('http://{}:{}/set_cfg'.format(host, port), config)\n    if(r.status_code == requests.codes.ok):\n        return True\n    return False\n\n\ndef get_frame_from_http(host=HOST, port=PORT):\n    r = requests.get('http://{}:{}/getdeep'.format(host, port))\n    if(r.status_code == requests.codes.ok):\n        # print('Get deep image')\n        deepimg = r.content\n        # print('Length={}'.format(len(deepimg)))\n        (frameid, stamp_msec) = struct.unpack('<QQ', deepimg[0:8+8])\n        # print((frameid, stamp_msec/1000))\n        return deepimg\n\n\ndef show_frame(fig, frame_data: bytes):\n    config = frame_config_decode(frame_data[16:16+12])\n    frame_bytes = frame_payload_decode(frame_data[16+12:], config)\n\n    depth = np.frombuffer(frame_bytes[0], 'uint16' if 0 == config[1] else 'uint8').reshape(\n        240, 320) if frame_bytes[0] else None\n\n    ir = np.frombuffer(frame_bytes[1], 'uint16' if 0 == config[3] else 'uint8').reshape(\n        240, 320) if frame_bytes[1] else None\n\n    status = np.frombuffer(frame_bytes[2], 'uint16' if 0 == config[4] else 'uint8').reshape(\n        240, 320) if frame_bytes[2] else None\n\n    rgb = np.frombuffer(frame_bytes[3], 'uint8').reshape(\n        (480, 640, 3)) if frame_bytes[3] else None\n\n    ax1 = fig.add_subplot(221)\n    if not depth is None:\n        # center_dis = depth[240//2, 320//2]\n        # if 0 == config[1]:\n        #     print(\"%f mm\" % (center_dis/4))\n        # else:\n        #     print(\"%f mm\" % ((center_dis/5.1) ** 2))\n        # depth = depth.copy()\n\n        # l,r= 200,5000\n        # depth_f = ((depth.astype('float64') - l) * (65535 / (r - l)))\n        # depth_f[np.where(depth_f < 0)] = 0\n        # depth_f[np.where(depth_f > 65535)] = 65535\n\n        # depth = depth_f.astype(depth.dtype)\n\n        # depth[240//2, 320//2 - 5:320//2+5] = 0x00\n        # depth[240//2-5:240//2+5, 320//2] = 0x00\n        ax1.imshow(depth, cmap='jet_r')\n    ax2 = fig.add_subplot(222)\n    if not ir is None:\n        ax2.imshow(ir, cmap='gray')\n    ax3 = fig.add_subplot(223)\n    if not status is None:\n        ax3.imshow(status)\n    ax4 = fig.add_subplot(224)\n    if not rgb is None:\n        ax4.imshow(rgb)\n\n\nif post_encode_config(frame_config_encode(1, 1, 255, 0, 2, 7, 1, 0, 0)):\n    # 打开交互模式\n    plt.ion()\n    figsize = (12, 12)\n    fig = plt.figure('2D frame', figsize=figsize)\n    while True:\n        p = get_frame_from_http()\n        show_frame(fig, p)\n        # 停顿时间\n        plt.pause(0.001)\n        # 清除当前画布\n        fig.clf()\n\n    plt.ioff()\n```\n\n## calvolumespy\n\n```python\nfrom PIL import Image, ImageDraw\nimport requests\nimport matplotlib.pyplot as plt\nimport struct\nimport numpy as np\nimport cv2\n\nHOST = '192.168.233.1'\nPORT = 80\n\ndef depth2xyz(xp, yp, z, fx, fy, cx, cy, depth_scale=1000):\n    # h,w=np.mgrid[0:depth_map.shape[0],0:depth_map.shape[1]]\n    z = z/depth_scale\n    x = (xp-cx)*z/fx\n    y = (yp-cy)*z/fy\n    # xyz=np.dstack((x,y,z))\n    # xyz=cv2.rgbd.depthTo3d(depth_map,depth_cam_matrix)\n    return [x, y, z]\n\n\ndef polygon_area(polygon):\n    area = 0\n    q = polygon[-1]\n    for p in polygon:\n        area += p[0] * q[1] - p[1] * q[0]\n        q = p\n    return abs(area) / 2.0\n\ndef get_lenscoeff(host=HOST, port=PORT):\n    r = requests.get('http://{}:{}/getinfo'.format(host, port))\n    if(r.status_code == requests.codes.ok):\n        lenscoeff_bin = r.content\n        (_fx,_fy,_cx,_cy) = struct.unpack('<ffff', lenscoeff_bin[41:41+4*4])\n        # print((frameid, stamp_msec/1000))\n        return (_fx,_fy,_cx,_cy)\n\n\ndiff_low = 30\ndiff_high = 500\nfx = 2.265142e+02\nfy = 2.278584e+02\ncx = 1.637246e+02  # cx\ncy = 1.233738e+02  # cy\n\n(fx,fy,cx,cy) = get_lenscoeff()\n\ndef cal_volume(d_bk, d_bg):\n    img_h, img_w = d_bk.shape[0], d_bk.shape[1]\n    d_bk = d_bk.astype(np.float32)  # cvt to mm\n    d_bg = d_bg.astype(np.float32)\n\n    diff = (d_bg-d_bk).astype(np.int16)\n    diff1 = diff.copy()\n    diff1 = np.where(diff1 < diff_low, 0, diff1)\n    diff1 = np.where(diff1 > diff_high, 0, diff1)\n    diff1 = (np.where(diff1 > 0, 1, 0)*255).astype(np.uint8)\n    # plt.imshow(diff1)\n\n    # print(d_bk.shape) (240, 320)\n    output = np.zeros((img_h, img_w, 3), np.uint8)\n\n    num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(\n        diff1, connectivity=8)\n    # print('num_labels = ',num_labels)\n    # 连通域的信息：对应各个轮廓的x、y、width、height和面积\n    # print('stats = ',stats)\n    res = list()\n    max_stats = list()\n    for i in range(5):\n        max_label = 1+np.argmax(stats[1:, 4])\n        # print('stats[max_label] = ', stats[max_label])\n        if i > 0 and stats[max_label][4] < 700:\n            break\n        max_stat = stats[max_label]\n        max_stats.append(max_stat)\n        stats[max_label][4] = 0\n\n        mask = (labels == max_label)\n        # (np.random.rand(3)*255).astype(np.uint8)\n        output[:, :, :][mask] = [200, 0, 0]\n        # plt.imshow(output)\n        \n        # kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))\n        # eroded = cv2.erode(output, kernel)\n        # dilated = cv2.dilate(output, kernel)\n\n        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))\n        # output = dilated\n        output=cv2.morphologyEx(output, cv2.MORPH_OPEN, kernel)\n        output=cv2.morphologyEx(output, cv2.MORPH_CLOSE, kernel)\n\n\n        volumes = []\n        # points = []\n        # areas = []\n        for yp in range(img_h):\n            for xp in range(img_w):\n                if mask[yp, xp]:\n                    x1, y1, z1 = depth2xyz(\n                        xp, yp, d_bk[yp, xp], fx, fy, cx, cy, depth_scale=1)\n                    x0, y0, z0 = depth2xyz(\n                        xp, yp, d_bg[yp, xp], fx, fy, cx, cy, depth_scale=1)\n\n                    x = xp-1\n                    if x < 0:\n                        x = 0\n                    y = yp\n                    xl, yl, zl = depth2xyz(\n                        x, y, d_bk[y, x], fx, fy, cx, cy, depth_scale=1)\n                    x = xp+1\n                    if x >= img_w:\n                        x = img_w-1\n                    y = yp\n                    xr, yr, zr = depth2xyz(\n                        x, y, d_bk[y, x], fx, fy, cx, cy, depth_scale=1)\n                    x = xp\n                    y = yp-1\n                    if y < 0:\n                        y = 0\n                    xt, yt, zt = depth2xyz(\n                        x, y, d_bk[y, x], fx, fy, cx, cy, depth_scale=1)\n                    x = xp\n                    y = yp+1\n                    if y >= img_h:\n                        y = img_h-1\n                    xb, yb, zb = depth2xyz(\n                        x, y, d_bk[y, x], fx, fy, cx, cy, depth_scale=1)\n                    \n                    area_a = polygon_area(\n                        [[xt, yt], [xl, yl], [xb, yb], [xr, yr]])/2\n\n                    dz = z0-z1\n                    dx = z1/fx\n                    dy = z1/fy\n                    area_b = dx*dy*2/2\n\n                    area = (area_a+area_b)/2  # avg get better acc\n                    volume = area*dz\n                    # areas.append(area)\n                    volumes.append(volume)\n                    # points.append((x1, y1, dz))\n        # areas = np.array(areas)\n        volumes = np.array(volumes)\n        # points = np.array(points)\n\n        res.append(\"{}:{} cm3\".format(i, int(np.sum(volumes)/1000)))\n        # print(res)\n\n    img_pil = Image.fromarray(output)\n    draw = ImageDraw.Draw(img_pil)\n    for i in range(len(max_stats)):\n        max_stat = max_stats[i]\n        draw.rectangle([(max_stat[0], max_stat[1]),\n                        (max_stat[0] + max_stat[2], max_stat[1] + max_stat[3])], outline=\"red\")\n        draw.text((max_stat[0], max_stat[1]),  res[i], fill=(255, 255, 255))\n    output = np.array(img_pil)\n    \n    return output\n\n\ndef frame_config_decode(frame_config):\n    '''\n        @frame_config bytes\n\n        @return fields, tuple (trigger_mode, deep_mode, deep_shift, ir_mode, status_mode, status_mask, rgb_mode, rgb_res, expose_time)\n    '''\n    return struct.unpack(\"<BBBBBBBBi\", frame_config)\n\n\ndef frame_config_encode(trigger_mode=1, deep_mode=1, deep_shift=255, ir_mode=1, status_mode=2, status_mask=7, rgb_mode=1, rgb_res=0, expose_time=0):\n    return struct.pack(\"<BBBBBBBBi\",\n                       trigger_mode, deep_mode, deep_shift, ir_mode, status_mode, status_mask, rgb_mode, rgb_res, expose_time)\n\n\ndef frame_payload_decode(frame_data: bytes, with_config: tuple):\n    deep_data_size, rgb_data_size = struct.unpack(\"<ii\", frame_data[:8])\n    frame_payload = frame_data[8:]\n    # 0:16bit 1:8bit, resolution: 320*240\n    deepth_size = (320*240*2) >> with_config[1]\n    deepth_img = struct.unpack(\"<%us\" % deepth_size, frame_payload[:deepth_size])[\n        0] if 0 != deepth_size else None\n    frame_payload = frame_payload[deepth_size:]\n\n    # 0:16bit 1:8bit, resolution: 320*240\n    ir_size = (320*240*2) >> with_config[3]\n    ir_img = struct.unpack(\"<%us\" % ir_size, frame_payload[:ir_size])[\n        0] if 0 != ir_size else None\n    frame_payload = frame_payload[ir_size:]\n\n    status_size = (320*240//8) * (16 if 0 == with_config[4] else\n                                  2 if 1 == with_config[4] else 8 if 2 == with_config[4] else 1)\n    status_img = struct.unpack(\"<%us\" % status_size, frame_payload[:status_size])[\n        0] if 0 != status_size else None\n    frame_payload = frame_payload[status_size:]\n\n    assert(deep_data_size == deepth_size+ir_size+status_size)\n\n    rgb_size = len(frame_payload)\n    assert(rgb_data_size == rgb_size)\n    rgb_img = struct.unpack(\"<%us\" % rgb_size, frame_payload[:rgb_size])[\n        0] if 0 != rgb_size else None\n\n    if (not rgb_img is None) and (1 == with_config[6]):\n        jpeg = cv2.imdecode(np.frombuffer(\n            rgb_img, 'uint8', rgb_size), cv2.IMREAD_COLOR)\n        if not jpeg is None:\n            rgb = cv2.cvtColor(jpeg, cv2.COLOR_BGR2RGB)\n            rgb_img = rgb.tobytes()\n        else:\n            rgb_img = None\n\n    return (deepth_img, ir_img, status_img, rgb_img)\n\n\ndef post_encode_config(config=frame_config_encode(), host=HOST, port=PORT):\n    r = requests.post('http://{}:{}/set_cfg'.format(host, port), config)\n    if(r.status_code == requests.codes.ok):\n        return True\n    return False\n\n\ndef get_frame_from_http(host=HOST, port=PORT):\n    r = requests.get('http://{}:{}/getdeep'.format(host, port))\n    if(r.status_code == requests.codes.ok):\n        # print('Get deep image')\n        deepimg = r.content\n        # print('Length={}'.format(len(deepimg)))\n        (frameid, stamp_msec) = struct.unpack('<QQ', deepimg[0:8+8])\n        # print((frameid, stamp_msec/1000))\n        return deepimg\n\n\ndef show_frame(fig, frame_data: bytes):\n    config = frame_config_decode(frame_data[16:16+12])\n    frame_bytes = frame_payload_decode(frame_data[16+12:], config)\n\n    depth = np.frombuffer(frame_bytes[0], 'uint16' if 0 == config[1] else 'uint8').reshape(\n        240, 320) if frame_bytes[0] else None\n\n    # ir = np.frombuffer(frame_bytes[1], 'uint16' if 0 == config[3] else 'uint8').reshape(\n    #     240, 320) if frame_bytes[1] else None\n\n    # status = np.frombuffer(frame_bytes[2], 'uint16' if 0 == config[4] else 'uint8').reshape(\n    #     240, 320) if frame_bytes[2] else None\n\n    rgb = np.frombuffer(frame_bytes[3], 'uint8').reshape(\n        (480, 640, 3)) if frame_bytes[3] else None\n\n    ax1 = fig.add_subplot(122)\n    if not depth is None:\n        # center_dis = depth[240//2, 320//2]\n        # if 0 == config[1]:\n        #     print(\"%f mm\" % (center_dis/4))\n        # else:\n        #     print(\"%f mm\" % ((center_dis/5.1) ** 2))\n        # depth = depth.copy()\n\n        # l,r= 200,5000\n        # depth_f = ((depth.astype('float64') - l) * (65535 / (r - l)))\n        # depth_f[np.where(depth_f < 0)] = 0\n        # depth_f[np.where(depth_f > 65535)] = 65535\n\n        # depth = depth_f.astype(depth.dtype)\n\n        # depth[240//2, 320//2 - 5:320//2+5] = 0x00\n        # depth[240//2-5:240//2+5, 320//2] = 0x00\n\n        if not UPDATE_BG[1] is None:\n            ax1.imshow(cal_volume(depth, UPDATE_BG[1]))\n        else:\n            ax1.imshow(depth)\n\n        if UPDATE_BG[0]:\n            UPDATE_BG[1] = depth\n\n    # ax2 = fig.add_subplot(222)\n    # if not ir is None:\n    #     ax2.imshow(ir, cmap='gray')\n    # ax3 = fig.add_subplot(223)\n    # if not status is None:\n    #     ax3.imshow(status)\n    ax4 = fig.add_subplot(121)\n    if not rgb is None:\n        ax4.imshow(rgb)\n\n\nUPDATE_BG = [False, None]\n\nif post_encode_config(frame_config_encode(1, 0, 255, 0, 2, 7, 1, 0, 0)):\n    # 打开交互模式\n    def on_key_press(event):\n        if event.key == ' ':\n            UPDATE_BG[0] = True\n        elif event.key == 'c':\n            UPDATE_BG[1] = None\n\n    plt.ion()\n    figsize = (12, 12)\n    fig = plt.figure('2D frame', figsize=figsize)\n    fig.canvas.mpl_connect('key_press_event', on_key_press)\n\n    print(\"按下空格键更新背景图，按下c键清空背景图\")\n    while True:\n        p = get_frame_from_http()\n        show_frame(fig, p)\n        if UPDATE_BG[0]:\n            UPDATE_BG[0] = False\n            print(\"update bg success!\")\n        # 停顿时间\n        plt.pause(0.001)\n        # 清除当前画布\n        fig.clf()\n\n    plt.ioff()\n```"}, "/hardware/zh/modules/camera_summary.html": {"title": "施工中", "content": "---\ntitle: 施工中\n---\n\n\nGC0328\n双摄像头模块(GC0328)\nOV7740\nOV2640\nOV2640-M12\n双摄像头模块(OV2640)"}, "/hardware/zh/modules/micarray.html": {"title": "MicArray 麦克风阵列", "content": "# MicArray 麦克风阵列\n\n## 概述\n\n麦克风阵列由沿板的六个麦克风和一个中心的麦克风组成，阵列板上的 12 颗 LED 可以用来可视化识别声源方位，可以用来做声源定位实验。\n\n购买链接：\n- [淘宝](https://item.taobao.com/item.htm?id=591820993474)\n- [Aliexpress](https://www.aliexpress.com/item/1005002687541143.html)\n\n## 产品视图\n\n<img src=\"./../../assets/spmod/spmod_micarray/spmod_micarray.png\" width=55%>\n\n[点我下载产品规格书](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-R6+1_MicArray/Specifications/Sipeed%20R6+1%20%E9%BA%A6%E5%85%8B%E9%A3%8E%E9%98%B5%E5%88%97%20%E8%A7%84%E6%A0%BC%E4%B9%A6%20V1.0.pdf)\n[点我下载产品原理图](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-R6+1_MicArray/Sipeed-R6+1_MicArray_11.16/Sipeed-R6+1_MicArray_11.16(Schematic).pdf)\n[点我下载点位图](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-R6+1_MicArray/Sipeed-R6+1_MicArray_11.16/Sipeed-R6+1_MicArray_11.16(Assembly%20drawing).pdf)\n\n## 麦克风阵列介绍\n\n- MEMS 麦克风 :7 个 MSM261S4030H0 组成阵列  \n  [点我下载 MSM261S4030H0 数据手册](https://dl.sipeed.com/fileList/MAIX/HDK/Chip_DS/%E9%BA%A6%E5%85%8B_MSM261S4030H0(%E4%BD%BF%E7%94%A8%E7%9A%84).pdf)\n- 灵敏度 : -26(dB,dBFS @1kHz 1Pa)\n- 信噪比 : 57dB(20kHz bandwidth, A-weighted)\n- 尺寸 :78.1*88.8mm\n- 灯光 :12 个 SK9822 LED 组成一个环形 LED 阵列 \n  [点我下载 SK9822 数据手册](https://dl.sipeed.com/fileList/MAIX/HDK/Chip_DS/sk9822_micarray_led.PDF)\n    - 多个 LED 通过双信号线级联\n    - 8 Bit(256 级) 可调颜色,5 Bit (32 级)亮度调节 \n- 连接器 :支持 2*5P 2.54mm 端子和 10P 0.5mm FPC 连接器\n\n## 参数\n| 功能特点 | 参数 |\n| --- | --- |\n| 声压级 | 140 dB SPL |\n| 灵敏度 | -26(dB,dBFS @1kHz 1Pa) |\n| 信噪比 | 57 dB (20kHz bandwidth,A-weighted) <br>THD<1% (100dB SPL @1kHz S=Nom,Rload>2k ) |\n| 时钟频率 | 1.0-4.0Mhz(正常模式) <br>150-800khz(低功耗模式) |\n\n## 模块引脚定义\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 | \n| --- | --- | --- | --- |\n| 1 | VIN | VCC | 模块电源输入正 |\n| 2 | GND | GND | 模块电源地 |\n| 3 | MIC_D0 | I/O | 0 号麦克风和1号麦克风的 I²S 接口的串行数据输出 |\n| 4 | MIC_D1 | I/O | 2 号麦克风和3号麦克风的 I²S 接口的串行数据输出 |\n| 5 | MIC_D2 | I/O | 4 号麦克风和5号麦克风的 I²S 接口的串行数据输出 |\n| 6 | MIC_D3 | I/O | 中心麦克风的 I²S 接口的串行数据输出 |\n| 7 | MIC_WS | I/O | I²S 接口的串行数据字选择 |\n| 8 | MIC_CK | I/O | I²S 接口的串行数据时钟 |\n| 9 | LED_CK | I/O | LED 的串行数据时钟 |\n| 10 | LED_DA | I/O | LED 的的串行数据输出 |\n\n<img src=\"./../../assets/spmod/spmod_micarray/MicArray.png\" width=55%>\n\n## 例程代码\n\n### 接线\n\n杜邦线接法\n\n| 麦克风阵列 | 开发板上的对应管脚 | 代码中所对应的参数 |\n| ---- | ---- | ---- |\n| VIN | 3.3v/5v | —— |\n| GND | GND | —— |\n| LED_CK | I/O 口 | sk9822_clk |\n| LED_DA | I/O 口 | sk9822_dat |\n| MIC_D0 | I/O 口 | i2s_d0 |\n| MIC_D1 | I/O 口 | i2s_d1 |\n| MIC_D2 | I/O 口 | i2s_d2 |\n| MIC_D3 | I/O 口 | i2s_d3 |\n| MIC_WS | I/O 口 | i2s_ws |\n| MIC_CK | I/O 口 | i2s_sclk |\n\n因为 K210 的 FPIOA 的特性, 支持每个外设随意映射到任意引脚；所以将上面的表格中的 `I/O 口` 与自己的板子上带有数字标识的引脚连起来即可，类似于标有 GND 这种特殊标识的就不算所谓的数字标识引脚。连接完引脚后可以查看下面代码下方关于代码中引脚的说明。\n\n### 烧录固件\n\n前往 [下载站](https://dl.sipeed.com/shareURL/MAIX/MaixPy/release/master) 下载固件，下载 [固件说明](https://wiki.sipeed.com/soft/maixpy/zh/get_started/upgrade_maixpy_firmware.html#%E5%9B%BA%E4%BB%B6%E5%91%BD%E5%90%8D%E8%AF%B4%E6%98%8E) 里面的默认固件即可使用。\n\n### Micropython 代码\n\n```python\nfrom Maix import MIC_ARRAY as mic\nimport lcd\n\nlcd.init()\nmic.init()\n#mic.init(i2s_d0=23, i2s_d1=22, i2s_d2=21, i2s_d3=20, i2s_ws=19, i2s_sclk=18, sk9822_dat=24, sk9822_clk=25)\n\nwhile True:\n    imga = mic.get_map()\n    b = mic.get_dir(imga)\n    a = mic.set_led(b,(0,0,255))\n    imgb = imga.resize(160,160)\n    imgc = imgb.to_rainbow(1)\n    a = lcd.display(imgc)\nmic.deinit()\n\n```\n\n需要自行根据自己的连接的管脚号，对应着修改`mic.init(i2s_d0=23, i2s_d1=22, i2s_d2=21, i2s_d3=20, i2s_ws=19, i2s_sclk=18, sk9822_dat=24, sk9822_clk=25)`里面的参数。比如如果将麦克风阵列上的 `MIC_D0` 与 K210 板子上面的标号为 25 的引脚相连，那么对应在代码中的参数需要修改为 `i2s_d0=25`，其他七个引脚也是同理。因为每个人的配置是不同的，所以使用杜邦线的话没有固定的连接说明，个人自行修改引脚参数，并且不要忘记删掉`mic.init(...)`前面的注释（删掉`#`就行）。\n\n### C 语言代码\n\n#### SK9822 驱动代码\n\n仅供参考用，来源：[github](https://github.com/sipeed/MaixPy/blob/master/components/kendryte_sdk/src/sipeed_sk9822.c) ;需要分析代码的话建议复制代码到电脑本地编辑器中查看。\n\n<details>\n  <summary>sipeed_sk9822.c</summary>\n  <pre class=\"language-none line-numbers language-c\"><code class=\"language-c\">#include \"sipeed_sk9822.h\"\n\n#define LED_NUM 12\n\n#define SK9822_DAT_SET()                 \\\n    {                                    \\\n        gpiohs->output_val.bits.b27 = 1; \\\n    }\n\n#define SK9822_DAT_CLR()                 \\\n    {                                    \\\n        gpiohs->output_val.bits.b27 = 0; \\\n    }\n\n#define SK9822_CLK_SET()                 \\\n    {                                    \\\n        gpiohs->output_val.bits.b28 = 1; \\\n    }\n\n#define SK9822_CLK_CLR()                 \\\n    {                                    \\\n        gpiohs->output_val.bits.b28 = 0; \\\n    }\n\nstatic void sk9822_init(void)\n{\n    gpiohs_set_drive_mode(SK9822_DAT_GPIONUM, GPIO_DM_OUTPUT);\n    gpiohs_set_drive_mode(SK9822_CLK_GPIONUM, GPIO_DM_OUTPUT);\n    gpiohs_set_pin(SK9822_DAT_GPIONUM, 0);\n    gpiohs_set_pin(SK9822_CLK_GPIONUM, 0);\n}\n\nvoid sk9822_send_data(uint32_t data)\n{\n    for (uint32_t mask = 0x80000000; mask > 0; mask >>= 1)\n    {\n        SK9822_CLK_CLR();\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        // usleep(1);\n        if (data & mask)\n        {\n            SK9822_DAT_SET();\n        }\n        else\n        {\n            SK9822_DAT_CLR();\n        }\n        SK9822_CLK_SET();\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        asm volatile(\"nop\");\n        // usleep(2);\n    }\n}\n\n//32bit 0\nvoid sk9822_start_frame(void)\n{\n    sk9822_send_data(0);\n}\n\n//32bit 1\nvoid sk9822_stop_frame(void)\n{\n    sk9822_send_data(0xffffffff);\n}\n\n//1 1 1 1 gray | b | g | r\nvoid sk9822_data_one_led(uint8_t gray, uint8_t r, uint8_t g, uint8_t b)\n{\n    uint32_t tosend;\n\n    gray &= 0x1f; //for make sure no error data in\n    tosend = ((0xe0 | gray) << 24) | (b << 16) | (g << 8) | r;\n    sk9822_send_data(tosend);\n}\n\nuint32_t sk9822_gen_data_one_led(uint8_t gray, uint8_t r, uint8_t g, uint8_t b)\n{\n    uint32_t tosend;\n\n    gray &= 0x1f; //for make sure no error data in\n    tosend = ((0xe0 | gray) << 24) | (b << 16) | (g << 8) | r;\n    return tosend;\n}\n\n//first color1, then msleep interval, then color2, last msleep interval\nvoid sk9822_flash(uint32_t color1, uint32_t color2, uint32_t interval)\n{\n    uint8_t index;\n\n    color1 |= 0xe0000000;\n    color2 |= 0xe0000000;\n\n    sk9822_start_frame();\n    for (index = 0; index < LED_NUM; index++)\n    {\n        sk9822_send_data(color1);\n    }\n    sk9822_stop_frame();\n    msleep(interval);\n\n    sk9822_start_frame();\n    for (index = 0; index < LED_NUM; index++)\n    {\n        sk9822_send_data(color2);\n    }\n    sk9822_stop_frame();\n    msleep(interval);\n}\n\nstatic void arraymove(uint32_t array[], uint8_t len)\n{\n    uint8_t index;\n    uint32_t tmp;\n\n    tmp = array[0];\n    for (index = 0; index < len - 1; index++)\n    {\n        array[index] = array[index + 1];\n    }\n    array[len - 1] = tmp;\n}\n//呼吸\n//跑马灯\n//方位\nvoid sk9822_horse_race(uint8_t r, uint8_t g, uint8_t b, uint32_t interval, uint8_t times)\n{\n    uint32_t led_frame[LED_NUM] = {0};\n    uint8_t i, index;\n\n    for (index = 0; index < 12; index++)\n    {\n        led_frame[index] = 0xff000000;\n    }\n\n    for (index = 0; index < 6; index++)\n    {\n        // led_frame[index] = sk9822_gen_data_one_led((0xe0|(index*4)),r-40*index,g-30*index,b-20*index);\n        led_frame[index] = sk9822_gen_data_one_led((0xe0 | (32 - index * 4)), r, g, b);\n    }\n\n    for (index = 0; index < times; index++)\n    {\n        while (1)\n        {\n            sk9822_start_frame();\n            for (i = 0; i < 12; i++)\n            {\n                sk9822_send_data(led_frame[i]);\n            }\n            sk9822_stop_frame();\n            arraymove(led_frame, LED_NUM);\n            msleep(interval);\n        }\n    }\n}\n\nvoid sk9822_breath(uint8_t r, uint8_t g, uint8_t b, uint32_t interval)\n{\n    uint8_t index, cnt, dir;\n\n    uint32_t color = sk9822_gen_data_one_led(0xff, r, g, b);\n\n    cnt = 0;\n    dir = 1;\n\n    while (1)\n    {\n        if (cnt >= 30)\n        {\n            dir = !dir;\n            cnt = 0;\n        }\n        cnt++;\n        color = sk9822_gen_data_one_led((0xe0 | (dir ? cnt : 31 - cnt)), r, g, b);\n        sk9822_start_frame();\n        for (index = 0; index < LED_NUM; index++)\n        {\n            sk9822_send_data(color);\n        }\n        sk9822_stop_frame();\n        msleep(interval);\n    }\n}\n\nvoid sipeed_init_mic_array_led(void)\n{\n    sk9822_init();\n    //flash 3 times\n    sk9822_flash(0xffeec900, 0xffff0000, 200);\n    sk9822_flash(0xffeec900, 0xff00ff00, 200);\n    sk9822_flash(0xffeec900, 0xff0000ff, 200);\n}\n\n// void sipeed_calc_voice_strength(uint8_t voice_data[])\n// {\n//     uint32_t tmp_sum[12] = {0};\n//     uint32_t led_color[12];\n//     uint8_t i, index, tmp;\n\n//     for (index = 0; index < 12; index++)\n//     {\n//         tmp_sum[index] = 0;\n//         for (i = 0; i < voice_strength_len[index]; i++)\n//         {\n//             tmp_sum[index] += voice_data[voice_strength[index][i]];\n//         }\n//         tmp = (uint8_t)tmp_sum[index] / voice_strength_len[index];\n//         led_brightness[index] = tmp > 15 ? 15 : tmp;\n//     }\n//     sk9822_start_frame();\n//     for (index = 0; index < 12; index++)\n//     {\n//         led_color[index] = (led_brightness[index] / 2) > 1 ? (((0xe0 | (led_brightness[index] * 2)) << 24) | 0xcd3333) : 0xe0000000;\n//         sk9822_send_data(led_color[index]);\n//     }\n//     sk9822_stop_frame();\n// }\n  </code>\n  </pre>\n</details>\n\n#### Micarray 代码\n\n仅供参考用，来源：[github](https://github.com/sipeed/MaixPy/blob/master/components/micropython/port/src/Maix/Maix_mic_array.c)；需要分析代码的话建议复制代码到电脑本地编辑器中查看。\n\n## 其他资料\n\n[麦克风阵列硬件资料](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-R6+1_MicArray)\n\n## 更多使用方法\n\n请移步到[论坛](https://bbs.sipeed.com)上查看\n\n## 常见问题\n\n### 出现报错信息\n\n![报错信息](./../../assets/spmod/spmod_micarray/spmod_micarray_err.png)\n\n更换其他IO管脚即可"}, "/hardware/zh/modules/Gamepad.html": {"title": "Sipeed Gamepad", "content": "# Sipeed Gamepad\n\n## 概述\n\n![](./../../assets/spmod/spmod_amigo_hendle/Gamepad141.jpg)\n\n采用主控芯片： GD32F150G\n\n通信接口：IIC（8P座子或者Grove-4P-2.0mm座子）\n\n板载10个按键（每个按键都连接到独立的GPIO）\n\n板载指示灯\n\n## 硬件参数\n\n| 项目 | 参数 |\n| --- | --- |\n| MCU | GD32F150G（Arm Cortex-M3）|\n| 主频 | 72Mhz |\n| 存储 | 64KB Flash, 8KB SRAM |\n| 按键 | 10个按键（每个按键都连接到独立的GPIO） |\n| 下载接口 | SWD下载 |\n| 晶振 | 24MHz无源晶振 |\n| LED | 板载1个电源指示灯和2个LED |\n| USB接口 | 板载1个USB TYPE-C 母座（连接到MCU的USB） |\n\n![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_5.png)\n\n## 手柄接口\n\n![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_3.jpg)\n\n![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_4.jpg)\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明      |\n| -------- | -------- | ---- | ------------- |\n| 1  | GND | G  | 模块电源地 |\n| 2  | NC | NC  | 悬空引脚，无功能 |\n| 3  | NC | NC  | 悬空引脚，无功能 |\n| 4  | SDA | I/O  | 模块I2C串行数据引脚 |\n| 5  | 3V3 | V  | 模块电源输入正 |\n| 6  | NC | NC  | 悬空引脚，无功能 |\n| 7  | NC | NC  | 悬空引脚，无功能 |\n| 8  | SCL | I  | 模块I2C串行时钟引脚 |\n\n链接方式\n\n单手柄：\n![](./../../assets/spmod/spmod_amigo_hendle/Gamepad.143.jpg)\n\n双手柄：\n\n![等待完善](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_6.png)\n## 软件描述\n| 项目| 参数 |\n| --- | --- |\n| 开发环境 | Maixpy IDE、 PlatformIO IDE |\n| 开发语言 | C语言、 python |\n| 通讯协议 | IIC |\n\n> GD32F150G源码和例程 [https://github.com/sipeed/GD32F150-I2C-Handle](https://github.com/sipeed/GD32F150-I2C-Handle)\n\n### 手柄测试\n\n单手手柄输入测试\n```python \nfrom machine import I2C\nimport nes, lcd\nfrom sound import CubeAudio\nimport sys, time\nfrom fpioa_manager import fm\nfrom Maix import FPIOA, GPIO\n\n\n# B A SEL START UP DOWN LEFT RIGHT  X   Y\n# 1 2 4   8     16  32   64   128  254 253\ni2c = I2C(I2C.I2C2, freq=400*1000, sda=27, scl=24)\nlcd.init(freq=15000000)\nlcd.register(0x36, 0x20\nstate = 0\nimport time\ni = 0\nwhile True:\n    dev = i2c1.scan()\n    print(dev)\n    dev = i2c2.scan()\n    print(dev)\n    time.sleep(0.5)\n    try:\n        #i2c.writeto(0x4A, b'0')\n        tmp = (i2c1.readfrom(0x4A, 2))\n        print('{}-{}'.format(int(tmp[0]), int(tmp[1])))\n    except Exception as e:\n        print(e)\n```\n\n双手柄输入测试\n```python\nfrom machine import I2C\nimport nes, lcd\nfrom sound import CubeAudio\nimport sys, time\nfrom fpioa_manager import fm\nfrom Maix import FPIOA, GPIO\n\n\n# B A SEL START UP DOWN LEFT RIGHT  X   Y\n# 1 2 4   8     16  32   64   128  254 253\ni2c = I2C(I2C.I2C2, freq=400*1000, sda=27, scl=24)\nlcd.init(freq=15000000)\nlcd.register(0x36, 0x20\nstate = 0\nimport time\ni = 0\nwhile True:\n    dev = i2c1.scan()\n    print(dev)\n    dev = i2c2.scan()\n    print(dev)\n    time.sleep(0.5)\n    try:\n        #i2c.writeto(0x4A, b'0')\n        tmp = (i2c1.readfrom(0x4A, 2))\n        print('{}-{}'.format(int(tmp[0]), int(tmp[1])))\n    except Exception as e:\n        print(e)\n    try:\n        #i2c.writeto(0x42, b'0')\n        tmp = (i2c2.readfrom(0x42, 2))\n        print('{}-{}'.format(int(tmp[0]), int(tmp[1])))\n    except Exception as e:\n        print(e)\n```\n\n测试代码输出\n\n```python\n    0-252       #没有输出\n    1-252       #按下 B 键\n    2-252       #按下 A 键\n    4-252       #按下 SEL 键  \n    8-252       #按下 START 键   \n    16-252      #按下 UP 键 \n    32-252      #按下 DOWN 键  \n    64-252      #按下 LEFT 键\n    128-252     #按下 RIGHT 键\n    0-254       #按下 X 键\n    0-253       #按下 Y 键\n```\n\n### 游戏测试\n\n[MaixPy-NES](/soft/maixpy/zh/api_reference/media/nes.md)\n\n\n## 资料下载\n\n[Gamepad](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Gamepad)"}, "/hardware/zh/modules/debugger_and_uart.html": {"title": "施工中", "content": "---\ntitle: 施工中\n---\n\nSipeed RV-Debugger Lite JTAG /串口调试\n\nSipeed RV debugger plus JTAG+UART\n\nSipeed USB-JTAG/TTL\n\nSipeed 双串口转USB模块"}}